This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-29T05:51:05.867Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.github/
  ISSUE_TEMPLATE/
    bug_report.md
    feature_request.md
  FUNDING.yml
.husky/
  .gitignore
  pre-commit
app/
  [locale]/
    [...not found]/
      page.tsx
    about/
      [...authors]/
        page.tsx
    api/
      newsletter/
        route.ts
    blog/
      [...slug]/
        page.tsx
      page.tsx
    i18n/
      locales/
        en/
          about.json
          common.json
          footer.json
          home.json
          newsletter.json
          notfound.json
          projects.json
          SEO.json
        zh-CN/
          about.json
          common.json
          footer.json
          home.json
          newsletter.json
          notfound.json
          projects.json
          SEO.json
      client.ts
      locales.js
      server.ts
      settings.ts
    projects/
      page.tsx
      project.tsx
    tags/
      page.tsx
    layout.tsx
    not-found.tsx
    page.tsx
    seo.tsx
    sitemap.ts
    tag-data.json
  robots.ts
components/
  comments/
    walinecomponents/
      walineComments.tsx
    Comments.tsx
  formspree/
    store/
      index.ts
    CBody.tsx
    CModal.tsx
    FormInputs.tsx
    index.tsx
    useContactForm.ts
  helper/
    TwSizeIndicator.tsx
  langswitch/
    icon.tsx
    index.tsx
  mdxcomponents/
    Audioplayer.tsx
    Image.tsx
    index.tsx
    Link.tsx
    TableWrapper.tsx
    WebsiteEmbed.tsx
  navigation/
    AuthorsMenu.tsx
    Footer.tsx
    Header.tsx
    MobileNav.tsx
  newletter/
    BlogNewsLetterForm.tsx
    NewsletterForm.tsx
  notfound/
    Button.tsx
    Client.tsx
  projectcard/
    index.tsx
  scroll/
    icons.tsx
    index.tsx
  search/
    icons/
      index.tsx
    kbar/
      Button.tsx
      CopyButton.tsx
      Emailform.tsx
      index.tsx
      KBarModal.tsx
      LangButton.tsx
      RenderResults.tsx
      ResultItem.tsx
      Settings.tsx
      ThemeButton.tsx
    KBarButton.tsx
    SearchButton.tsx
    SearchProvider.tsx
  seriescard/
    index.tsx
    seriesCard.tsx
  share/
    index.tsx
  sidetoc/
    Button.tsx
    icon.tsx
    index.tsx
    store.ts
    TocBody.tsx
  social-icons/
    icons.tsx
    index.tsx
  tag/
    index.tsx
  theme/
    icons/
      index.tsx
    DarkModeSwitch.tsx
    ThemeContext.tsx
    ThemeSwitch.tsx
  util/
    capitalizeFirstLetter.ts
    sortByDate.ts
    useOuterClick.ts
    useTagStore.ts
  LayoutWrapper.tsx
  PageTitle.tsx
  SectionContainer.tsx
css/
  prism.css
  tailwind.css
  waline.css
data/
  authors/
    en/
      formless.mdx
    zh-CN/
      formless.mdx
  blog/
    en/
      China Economy Advancing Steadily.mdx
    zh-CN/
      China Economy Advancing Steadily.mdx
  headerNavLinks.ts
  localeMetadata.ts
  logo.svg
  postsPerPage.ts
  projectsData.ts
  references-data.bib
  siteMetadata.js
layouts/
  home/
    LayoutHeader.tsx
    PostList.tsx
  AuthorLayout.tsx
  FeaturedLayout.tsx
  HomeLayout.tsx
  ListLayout.tsx
  Pagination.tsx
  PostBanner.tsx
  PostLayout.tsx
  PostSimple.tsx
public/
  static/
    favicons/
      safari-pinned-tab.svg
      site.webmanifest
scripts/
  postbuild.mjs
  rss.mjs
.env.example
.eslintignore
.eslintrc.js
.gitattributes
.gitignore
.yarnrc.yml
contentlayer.config.ts
jsconfig.json
LICENSE
middleware.ts
next-env.d.ts
next.config.js
package.json
postcss.config.js
prettier.config.js
README.md
SECURITY.md
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .github/ISSUE_TEMPLATE/bug_report.md
================
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: bug
assignees: ''
---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:

1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**System Info (if dev / build issue):**

- OS: [e.g. iOS]
- Node version (please ensure you are using 18+)
- Npm version

**Browser Info (if display / formatting issue):**

- Device [e.g. Desktop, iPhone6]
- Browser [e.g. chrome, safari]
- Version [e.g. 22]

**Additional context**
Add any other context about the problem here.

================
File: .github/ISSUE_TEMPLATE/feature_request.md
================
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: ''
assignees: ''
---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

================
File: .github/FUNDING.yml
================
# These are supported funding model platforms

github: PxlSyl
ko_fi: pxlsyl

================
File: .husky/.gitignore
================
_

================
File: .husky/pre-commit
================
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

npx --no-install lint-staged

================
File: app/[locale]/[...not found]/page.tsx
================
import { notFound } from 'next/navigation'

export default function NotFoundCatchAll() {
  notFound()
}

================
File: app/[locale]/about/[...authors]/page.tsx
================
import { Metadata } from 'next'
import { Authors, allAuthors } from 'contentlayer/generated'
import { MDXLayoutRenderer } from 'pliny/mdx-components'
import AuthorLayout from '@/layouts/AuthorLayout'
import { coreContent } from 'pliny/utils/contentlayer'
import { genPageMetadata } from 'app/[locale]/seo'
import { createTranslation } from 'app/[locale]/i18n/server'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { notFound } from 'next/navigation'

type AboutProps = {
  params: { authors: string[]; locale: LocaleTypes }
}

export async function generateMetadata({
  params: { authors, locale },
}: AboutProps): Promise<Metadata | undefined> {
  const authorSlug = decodeURI(authors.join('/'))
  const author = allAuthors.find((a) => a.slug === authorSlug && a.language === locale) as Authors
  if (!author) {
    return
  }
  const { t } = await createTranslation(locale, 'about')

  return genPageMetadata({
    title: `${t('about')} ${author.name}`,
    params: { locale: locale },
  })
}

export default async function Page({ params: { authors, locale } }: AboutProps) {
  const authorSlug = decodeURI(authors.join('/'))
  const author = allAuthors.find((a) => a.slug === authorSlug && a.language === locale) as Authors
  const authorIndex = allAuthors.findIndex((p) => p.slug === authorSlug)
  if (authorIndex === -1) {
    return notFound()
  }
  const mainContent = coreContent(author)

  return (
    <AuthorLayout params={{ locale: locale }} content={mainContent}>
      <MDXLayoutRenderer code={author.body.code} />
    </AuthorLayout>
  )
}

================
File: app/[locale]/api/newsletter/route.ts
================
import { NewsletterAPI } from 'pliny/newsletter'
import siteMetadata from '@/data/siteMetadata'

const handler = NewsletterAPI({
  // @ts-ignore
  provider: siteMetadata.newsletter.provider,
})

export { handler as GET, handler as POST }

================
File: app/[locale]/blog/[...slug]/page.tsx
================
import 'css/prism.css'
import 'katex/dist/katex.css'
import { Metadata } from 'next'
import { components } from '@/components/mdxcomponents'
import { MDXLayoutRenderer } from 'pliny/mdx-components'
import { sortPosts, coreContent, allCoreContent } from 'pliny/utils/contentlayer'
import { allBlogs, allAuthors } from 'contentlayer/generated'
import type { Authors, Blog } from 'contentlayer/generated'
import PostSimple from '@/layouts/PostSimple'
import PostLayout from '@/layouts/PostLayout'
import PostBanner from '@/layouts/PostBanner'
import siteMetadata from '@/data/siteMetadata'
import { maintitle } from '@/data/localeMetadata'
import { notFound } from 'next/navigation'
import { LocaleTypes } from 'app/[locale]/i18n/settings'

// 定义默认布局
const defaultLayout = 'PostBanner'
const layouts = {
  PostSimple,
  PostLayout,
  PostBanner,
}

interface BlogPageProps {
  params: { slug: string[]; locale: LocaleTypes }
}

// 统一 slug 处理函数，确保 slug 是 URL-safe 的
function normalizeSlug(slug: string[]): string {
  return decodeURI(slug.join('/')).replace(/\s+/g, '-').toLowerCase()
}

async function getPostFromParams({ params: { slug, locale } }: BlogPageProps): Promise<any> {
  const dslug = normalizeSlug(slug)
  const post = allBlogs.filter((p) => p.language === locale).find((p) => p.slug === dslug) as Blog

  if (!post) {
    return null
  }

  // 处理系列文章
  if (post?.series) {
    const seriesPosts = allBlogs
      .filter((p) => p.language === locale && p.series?.title === post.series?.title)
      .sort((a, b) => Number(a.series!.order) - Number(b.series!.order))
      .map((p) => ({
        title: p.title,
        slug: p.slug,
        language: p.language,
        isCurrent: p.slug === post.slug,
      }))
    if (seriesPosts.length > 0) {
      return { ...post, series: { ...post.series, posts: seriesPosts } }
    }
  }

  return post
}

export async function generateMetadata({
  params: { slug, locale },
}: BlogPageProps): Promise<Metadata | undefined> {
  const dslug = normalizeSlug(slug)
  const post = allBlogs.find((p) => p.slug === dslug && p.language === locale) as Blog
  if (!post) {
    return
  }

  const author = allAuthors.filter((a) => a.language === locale).find((a) => a.default === true)
  const authorList = post.authors || [author?.slug]
  const authorDetails = authorList.map((author) => {
    const authorResults = allAuthors
      .filter((a) => a.language === locale)
      .find((a) => a.slug.includes(author))
    return coreContent(authorResults as Authors)
  })

  const publishedAt = new Date(post.date).toISOString()
  const modifiedAt = new Date(post.lastmod || post.date).toISOString()
  const authors = authorDetails.map((author) => author.name)
  let imageList = [siteMetadata.socialBanner]
  if (post.images) {
    imageList = typeof post.images === 'string' ? [post.images] : post.images
  }
  const ogImages = imageList.map((img) => ({
    url: img.includes('http') ? img : siteMetadata.siteUrl + img,
  }))

  return {
    title: post.title,
    description: post.summary,
    openGraph: {
      title: post.title,
      description: post.summary,
      siteName: maintitle[locale],
      locale: post.language,
      type: 'article',
      publishedTime: publishedAt,
      modifiedTime: modifiedAt,
      url: `${siteMetadata.siteUrl}/${locale}/blog/${dslug}`,
      images: ogImages,
      authors: authors.length > 0 ? authors : [siteMetadata.author],
    },
    twitter: {
      card: 'summary_large_image',
      title: post.title,
      description: post.summary,
      images: imageList,
    },
  }
}

export const generateStaticParams = async () => {
  const paths = allBlogs.map((p) => ({
    slug: p.slug.split('/').map((segment) => segment.replace(/\s+/g, '-').toLowerCase()), // 处理 slug
    locale: p.language,
  }))
  return paths
}

export default async function Page({ params: { slug, locale } }: BlogPageProps) {
  const dslug = normalizeSlug(slug)

  // 过滤掉 production 环境中的草稿 + locale 过滤
  const sortedCoreContents = allCoreContent(
    sortPosts(allBlogs.filter((p) => p.language === locale))
  )
  const postIndex = sortedCoreContents.findIndex((p) => p.slug === dslug)
  if (postIndex === -1) {
    return notFound()
  }

  const prev = sortedCoreContents[postIndex + 1]
  const next = sortedCoreContents[postIndex - 1]
  const post = await getPostFromParams({ params: { slug, locale } })

  // 如果找不到对应的文章
  if (!post) {
    return notFound()
  }

  const author = allAuthors.filter((a) => a.language === locale).find((a) => a.default === true)
  const authorList = post.authors || [author?.slug]
  const authorDetails = authorList.map((author) => {
    const authorResults = allAuthors
      .filter((a) => a.language === locale)
      .find((a) => a.slug.includes(author))
    return coreContent(authorResults as Authors)
  })

  const mainContent = coreContent(post)
  const jsonLd = post.structuredData
  jsonLd['author'] = authorDetails.map((author) => ({
    '@type': 'Person',
    name: author.name,
  }))

  const Layout = layouts[post.layout || defaultLayout]

  return (
    <>
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}
      />
      <Layout
        content={mainContent}
        authorDetails={authorDetails}
        next={next}
        prev={prev}
        params={{ locale }}
      >
        <MDXLayoutRenderer code={post.body.code} components={components} toc={post.toc} />
      </Layout>
    </>
  )
}

================
File: app/[locale]/blog/page.tsx
================
import { Metadata } from 'next'
import ListLayout from '@/layouts/ListLayout'
import { allCoreContent, sortPosts } from 'pliny/utils/contentlayer'
import { allBlogs } from 'contentlayer/generated'
import { genPageMetadata } from 'app/[locale]/seo'
import { createTranslation } from '../i18n/server'
import { LocaleTypes } from '../i18n/settings'

type BlogPageProps = {
  params: { locale: LocaleTypes }
}

export async function generateMetadata({ params: { locale } }: BlogPageProps): Promise<Metadata> {
  return genPageMetadata({
    title: 'Blog',
    params: { locale: locale },
  })
}

export default async function BlogPage({ params: { locale } }: BlogPageProps) {
  const { t } = await createTranslation(locale, 'home')
  const posts = allCoreContent(sortPosts(allBlogs))
  const filteredPosts = posts.filter((post) => post.language === locale)

  return <ListLayout params={{ locale: locale }} posts={filteredPosts} title={t('all')} />
}

================
File: app/[locale]/i18n/locales/en/about.json
================
{
  "about": "About"
}

================
File: app/[locale]/i18n/locales/en/common.json
================
{
  "home": "Home",
  "blog": "All Articles",
  "tags": "Tag Navigation",
  "projects": "Thematic Sections",
  "about": "About",
  "lang": "Language",
  "showmenu": "Show menu",
  "scrollcomment": "Scroll to comment",
  "scrolltop": "Scroll to top",
  "darkmode": "Toggle dark mode",
  "content": "Content",
  "kbarplaceholder": "Type a command or search",
  "loading": "Loading...",
  "noresults": "No results for your search...",
  "poststagged": "View posts tagged",
  "series": "Series:",
  "episodes": "Episodes:",
  "share": "SHARE",
  "facebookshare": "facebook share button",
  "twittershare": "twitter share button",
  "linkedinshare": "linkedin share button",
  "redditshare": "reddit share button",
  "whatsappshare": "whatsapp share button",
  "telegramshare": "telegram share button",
  "pinterestshare": "pinterest share button",
  "threadsshare": "threadsshare button",
  "theme": "Theme",
  "light": "Light",
  "dark": "Dark",
  "system": "System",
  "name": "Name*",
  "title": "Contact me",
  "mail": "Email*",
  "button": "Submit",
  "error": "Oops, something went wrong!",
  "thanks": "Thank you for contacting me, I will get back to you shortly!",
  "message": "Message*",
  "copyurl": "Copy URL",
  "urlcopied": "URL copied!",
  "contact": "Contact",
  "back": "Go Back",
  "settings": "Settings",
  "language": "Language",
  "french": "French",
  "english": "English",
  "sidetoc": "On this page:"
}

================
File: app/[locale]/i18n/locales/en/footer.json
================
{
  "theme": "Tailwind Nextjs Theme"
}

================
File: app/[locale]/i18n/locales/en/home.json
================
{
  "greeting": "Latest",
  "description": "A blog created with Next.js, i18n and Tailwind.css",
  "more": "Read more",
  "all": "All posts",
  "moreaboutme": "More about me",
  "featured": "Featured",
  "morefeatured": "More featured posts",
  "morerecent": "More recent posts",
  "search": "Search articles",
  "searchposts": "Search posts",
  "comment": "Load Comments",
  "pub": "Published on",
  "authors": "Authors",
  "name": "Name",
  "nexta": "Next Article",
  "preva": "Previous Article",
  "nextp": "Next",
  "prevp": "Previous",
  "of": "of",
  "back": "Back to the blog",
  "twitter": "Discuss on Twitter",
  "github": "View on GitHub",
  "draft": "Under Construction",
  "noposts": "No posts found",
  "poststagged": "View posts tagged"
}

================
File: app/[locale]/i18n/locales/en/newsletter.json
================
{
  "mail": "Email address",
  "title": "Subscribe to the newsletter",
  "messageError": "Your e-mail adress is invalid or you are already subscribed!",
  "placeholderSuccess": "You're subscribed !  🎉",
  "placeholderDefault": "Enter your email",
  "buttonSuccess": "Thank you!"
}

================
File: app/[locale]/i18n/locales/en/notfound.json
================
{
  "title": "Sorry we couldn't find this page.",
  "description": "But dont worry, you can find plenty of other things on our homepage.",
  "back": "Back to homepage"
}

================
File: app/[locale]/i18n/locales/en/projects.json
================
{
  "title": "Company Focus: Analysis of Strategy, Organization, Culture, Technology, Product, Market, and Brand",
  "description": "In-depth analysis of global Fortune 500 and innovative companies' strategic planning, organizational transformation, cultural development, technological innovation, product development, market expansion, and brand building. Using data-driven analysis to gain insights into industry trends and inspire business decisions.",
  "read": "Read More",
  "visit": "Visit Topic",
  "subtitle": "Here you can find information about my current topics.",
  "linkto": "Link to"
}

================
File: app/[locale]/i18n/locales/en/SEO.json
================
{
  "tags": "Things I blog about",
  "author": "About me",
  "about": "About"
}

================
File: app/[locale]/i18n/locales/zh-CN/about.json
================
{
  "about": "交个朋友"
}

================
File: app/[locale]/i18n/locales/zh-CN/common.json
================
{
  "home": "首页",
  "blog": "所有文章",
  "tags": "主题导航",
  "projects": "专题栏目",
  "about": "交个朋友",
  "lang": "语言",
  "showmenu": "显示菜单",
  "scrollcomment": "滚动以评论",
  "scrolltop": "返回顶部",
  "darkmode": "切换深色模式",
  "content": "内容",
  "kbarplaceholder": "输入命令或搜索",
  "loading": "加载中...",
  "noresults": "没有搜索结果...",
  "poststagged": "查看标记的帖子",
  "series": "系列：",
  "episodes": "集数：",
  "share": "分享",
  "facebookshare": "Facebook分享按钮",
  "twittershare": "Twitter分享按钮",
  "linkedinshare": "LinkedIn分享按钮",
  "redditshare": "Reddit分享按钮",
  "whatsappshare": "WhatsApp分享按钮",
  "telegramshare": "Telegram分享按钮",
  "pinterestshare": "Pinterest分享按钮",
  "threadsshare": "Threads分享按钮",
  "theme": "主题",
  "light": "浅色",
  "dark": "深色",
  "system": "系统",
  "name": "姓名*",
  "title": "联系我",
  "mail": "电子邮箱*",
  "button": "发送",
  "error": "糟糕，出错了！",
  "thanks": "感谢您联系我，我会尽快回复！",
  "message": "消息*",
  "copyurl": "复制URL",
  "urlcopied": "URL已复制！",
  "contact": "联系",
  "back": "返回",
  "settings": "设置",
  "language": "语言",
  "french": "法语",
  "english": "英语",
  "sidetoc": "本页内容："
}

================
File: app/[locale]/i18n/locales/zh-CN/footer.json
================
{
  "theme": "Thème Tailwind Nextjs"
}

================
File: app/[locale]/i18n/locales/zh-CN/home.json
================
{
  "greeting": "最新内容",
  "description": "融合宏观经济、产业动态和公司战略的深度分析",
  "more": "阅读更多",
  "all": "所有文章",

  "moreaboutme": "关于我的更多信息",

  "featured": "重点推荐",
  "morefeatured": "更多重点推荐",
  "morerecent": "更多最新文章",

  "search": "搜索",
  "searchposts": "搜索文章",
  "comment": "加载评论",
  "pub": "发布于",
  "authors": "作者",
  "name": "姓名",
  "nexta": "下一篇文章",
  "preva": "上一篇文章",
  "nextp": "下一页",
  "prevp": "上一页",
  "of": "之",
  "back": "返回博客",
  "twitter": "在Twitter上讨论",
  "github": "在GitHub上查看",
  "draft": "草稿",
  "noposts": "未找到文章",
  "poststagged": "查看标签文章"
}

================
File: app/[locale]/i18n/locales/zh-CN/newsletter.json
================
{
  "mail": "Adresse Mail",
  "title": "Abonnez-vous à la newsletter",
  "messageError": "Votre adresse e-mail est invalide ou  déjà inscrite !",
  "placeholderSuccess": "Vous êtes inscrit ! 🎉",
  "placeholderDefault": "Entrez votre adresse mail",
  "buttonSuccess": "Merci !",
  "buttonDefault": "S'inscrire"
}

================
File: app/[locale]/i18n/locales/zh-CN/notfound.json
================
{
  "title": "抱歉，我们无法找到该页面。",
  "description": "别担心，您可以在我们的主页上找到许多其他内容。",
  "back": "返回主页"
}

================
File: app/[locale]/i18n/locales/zh-CN/projects.json
================
{
  "title": "公司专题：战略、组织、文化、技术、产品、市场、品牌分析",
  "description": "深入解析全球500强及创新企业的战略布局、组织变革、文化建设、技术创新、产品开发、市场拓展和品牌塑造。通过数据驱动的分析，洞察行业趋势，启发商业决策。",
  "read": "阅读更多",
  "visit": "访问专题",
  "subtitle": "在这里您可以找到有关我当前专题的信息。",
  "linkto": "链接到"
}

================
File: app/[locale]/i18n/locales/zh-CN/SEO.json
================
{
  "tags": "我的博客主题",
  "author": "formless",
  "about": "交个朋友"
}

================
File: app/[locale]/i18n/client.ts
================
'use client'

import { useEffect, useState } from 'react'
import i18next, { i18n } from 'i18next'
import { initReactI18next, useTranslation as useTransAlias } from 'react-i18next'
import resourcesToBackend from 'i18next-resources-to-backend'
import LanguageDetector from 'i18next-browser-languagedetector'
import { type LocaleTypes, getOptions, locales } from './settings'

const runsOnServerSide = typeof window === 'undefined'

// Initialize i18next for the client side
i18next
  .use(initReactI18next)
  .use(LanguageDetector)
  .use(
    resourcesToBackend(
      (language: LocaleTypes, namespace: string) =>
        import(`./locales/${language}/${namespace}.json`)
    )
  )
  .init({
    ...getOptions(),
    lng: undefined, // detect the language on the client
    detection: {
      order: ['path', 'htmlTag'],
    },
    preload: runsOnServerSide ? locales : [],
  })

export function useTranslation(lng: LocaleTypes, ns: string) {
  const translator = useTransAlias(ns)
  const { i18n } = translator

  // Run when content is rendered on server side
  if (runsOnServerSide && lng && i18n.resolvedLanguage !== lng) {
    i18n.changeLanguage(lng)
  } else {
    // Use our custom implementation when running on client side
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useCustomTranslationImplem(i18n, lng)
  }
  return translator
}

function useCustomTranslationImplem(i18n: i18n, lng: LocaleTypes) {
  const [activeLng, setActiveLng] = useState(i18n.resolvedLanguage)

  // This effect updates the active language state variable when the resolved language changes,
  useEffect(() => {
    if (activeLng === i18n.resolvedLanguage) return
    setActiveLng(i18n.resolvedLanguage)
  }, [activeLng, i18n.resolvedLanguage])

  // This effect changes the language of the application when the lng prop changes.
  useEffect(() => {
    if (!lng || i18n.resolvedLanguage === lng) return
    i18n.changeLanguage(lng)
  }, [lng, i18n])
}

================
File: app/[locale]/i18n/locales.js
================
const fallbackLng = 'zh-CN' // 将中文设为默认语言
const secondLng = 'en' // 英文作为备用语言

module.exports = { fallbackLng, secondLng }

================
File: app/[locale]/i18n/server.ts
================
import { createInstance } from 'i18next'
import resourcesToBackend from 'i18next-resources-to-backend'
import { initReactI18next } from 'react-i18next/initReactI18next'
import { getOptions, LocaleTypes } from './settings'

// Initialize the i18n instance
const initI18next = async (lang: LocaleTypes, ns: string) => {
  const i18nInstance = createInstance()
  await i18nInstance
    .use(initReactI18next)
    .use(
      resourcesToBackend(
        (language: string, namespace: typeof ns) =>
          // load the translation file depending on the language and namespace
          import(`./locales/${language}/${namespace}.json`)
      )
    )
    .init(getOptions(lang, ns))

  return i18nInstance
}

// It will accept the locale and namespace for i18next to know what file to load
export async function createTranslation(lang: LocaleTypes, ns: string) {
  const i18nextInstance = await initI18next(lang, ns)

  return {
    // This is the translation function we'll use in our components
    // e.g. t('greeting')
    t: i18nextInstance.getFixedT(lang, Array.isArray(ns) ? ns[0] : ns),
  }
}

================
File: app/[locale]/i18n/settings.ts
================
import type { InitOptions } from 'i18next'
import { fallbackLng, secondLng } from './locales'

export const locales = [fallbackLng, secondLng] as const
export type LocaleTypes = (typeof locales)[number]
export const defaultNS = 'common'

export function getOptions(locale = fallbackLng, ns = defaultNS): InitOptions {
  return {
    debug: false,
    supportedLngs: locales,
    fallbackLng,
    lng: locale,
    fallbackNS: defaultNS,
    defaultNS,
    ns,
  }
}

================
File: app/[locale]/projects/page.tsx
================
import { Metadata } from 'next'
import Project from './project'
import { genPageMetadata } from 'app/[locale]/seo'
import { createTranslation } from '../i18n/server'
import { LocaleTypes } from '../i18n/settings'

type ProjectsProps = {
  params: { locale: LocaleTypes }
}

export async function generateMetadata({ params: { locale } }: ProjectsProps): Promise<Metadata> {
  const { t } = await createTranslation(locale, 'projects')
  return genPageMetadata({
    title: t('title'),
    params: { locale: locale },
  })
}

export default async function Projects({ params: { locale } }: ProjectsProps) {
  const { t } = await createTranslation(locale, 'projects')
  return (
    <>
      <div className="divide-y divide-gray-200 dark:divide-gray-700">
        <div className="space-y-2 pb-8 pt-6 md:space-y-5">
          <h1 className="text-3xl font-extrabold leading-9 tracking-tight text-heading-400 dark:text-heading-400 sm:text-4xl sm:leading-10 md:text-6xl md:leading-14">
            {t('title')}
          </h1>
          <p className="text-lg leading-7 text-gray-500 dark:text-gray-400">{t('description')}</p>
        </div>
        <div className="container py-12">
          <div className="-m-4 flex flex-wrap">
            <Project locale={locale} /> {/* 传递 locale 给 Project 组件 */}
          </div>
        </div>
      </div>
    </>
  )
}

================
File: app/[locale]/projects/project.tsx
================
'use client'

import projectsData from '@/data/projectsData'
import Card from '@/components/projectcard'
import { LocaleTypes } from '../i18n/settings'

type ProjectProps = {
  locale: LocaleTypes
}

const Project = ({ locale }: ProjectProps) => {
  const projectArray = projectsData[locale] || []

  return (
    <>
      {projectArray.length > 0 ? (
        projectArray.map((project) => (
          <Card
            key={project.title}
            title={project.title}
            description={project.description}
            imgSrc={project.imgSrc}
            href={project.href}
          />
        ))
      ) : (
        <p>No projects available</p>
      )}
    </>
  )
}

export default Project

================
File: app/[locale]/tags/page.tsx
================
import { Metadata } from 'next'
import Tag from '@/components/tag'
import tagData from 'app/[locale]/tag-data.json'
import { genPageMetadata } from 'app/[locale]/seo'
import { createTranslation } from '../i18n/server'
import { LocaleTypes } from '../i18n/settings'

type TagsProps = {
  params: { locale: LocaleTypes }
}

export async function generateMetadata({ params: { locale } }: TagsProps): Promise<Metadata> {
  const { t } = await createTranslation(locale, 'SEO')
  return genPageMetadata({
    title: 'Tags',
    description: t('tags'),
    params: { locale: locale },
  })
}

export default function Page({ params: { locale } }: TagsProps) {
  const tagCounts = tagData[locale]
  const tagKeys = Object.keys(tagCounts)
  const sortedTags = tagKeys.sort((a, b) => tagCounts[b] - tagCounts[a])

  return (
    <>
      <div className="flex flex-col items-start justify-start divide-y divide-gray-200 dark:divide-gray-700 md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6 md:divide-y-0">
        <div className="space-x-2 pb-8 pt-6 md:space-y-5">
          <h1 className="text-3xl font-extrabold leading-9 tracking-tight text-heading-400 dark:text-heading-400 sm:text-4xl sm:leading-10 md:border-r-2 md:px-6 md:text-6xl md:leading-14">
            Tags
          </h1>
        </div>
        <div className="flex max-w-lg flex-wrap">
          {tagKeys.length === 0 && 'No tags found.'}
          {sortedTags.map((tag) => (
            <div key={tag} className="mb-2 mr-5 mt-2">
              <Tag text={tag} />
              <span className="-ml-2 text-sm font-semibold uppercase text-gray-600 dark:text-gray-300">
                {`(${tagCounts[tag]})`}
              </span>
            </div>
          ))}
        </div>
      </div>
    </>
  )
}

================
File: app/[locale]/layout.tsx
================
import 'css/tailwind.css'
import 'pliny/search/algolia.css'

import { Space_Grotesk } from 'next/font/google'
import { Analytics, AnalyticsConfig } from 'pliny/analytics'
import { SearchProvider } from '@/components/search/SearchProvider'
import Header from '@/components/navigation/Header'
import SectionContainer from '@/components/SectionContainer'
import Footer from '@/components/navigation/Footer'
import siteMetadata from '@/data/siteMetadata'
import { maintitle, maindescription } from '@/data/localeMetadata'
import { ThemeProvider } from '@/components/theme/ThemeContext'
import { Metadata } from 'next'
import { dir } from 'i18next'
import { LocaleTypes, locales } from './i18n/settings'
import TwSizeIndicator from '@/components/helper/TwSizeIndicator'

export async function generateStaticParams() {
  return locales.map((locale) => ({ locale }))
}

const space_grotesk = Space_Grotesk({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-space-grotesk',
})

export async function generateMetadata({ params }) {
  const locale = params.locale || 'en' // 确保 locale 有默认值

  return {
    metadataBase: new URL(siteMetadata.siteUrl),
    title: {
      default: maintitle[locale] || maintitle['en'], // 确保有默认值
      template: `%s | ${maintitle[locale] || maintitle['en']}`, // 确保有默认值
    },
    description: maindescription[locale] || maindescription['en'], // 确保有默认值
    openGraph: {
      title: maintitle[locale] || maintitle['en'],
      description: maindescription[locale] || maindescription['en'],
      url: './',
      siteName: maintitle[locale] || maintitle['en'],
      images: [siteMetadata.socialBanner],
      locale: locale,
      type: 'website',
    },
    alternates: {
      canonical: './',
      types: {
        'application/rss+xml': `${siteMetadata.siteUrl}/feed.xml`,
      },
    },
    robots: {
      index: true,
      follow: true,
      googleBot: {
        index: true,
        follow: true,
        'max-video-preview': -1,
        'max-image-preview': 'large',
        'max-snippet': -1,
      },
    },
    twitter: {
      title: maintitle[locale] || maintitle['en'],
      description: maindescription[locale] || maindescription['en'],
      site: siteMetadata.siteUrl,
      creator: siteMetadata.author,
      card: 'summary_large_image',
      images: [siteMetadata.socialBanner],
    },
  }
}

export default function RootLayout({
  children,
  params: { locale },
}: {
  children: React.ReactNode
  params: { locale: LocaleTypes }
}) {
  return (
    <html
      lang={locale}
      dir={dir(locale)}
      className={`${space_grotesk.variable} scroll-smooth`}
      suppressHydrationWarning
    >
      <link rel="apple-touch-icon" sizes="76x76" href="/static/favicons/apple-touch-icon.png" />
      <link rel="icon" type="image/png" sizes="32x32" href="/static/favicons/favicon-32x32.png" />
      <link rel="icon" type="image/png" sizes="16x16" href="/static/favicons/favicon-16x16.png" />
      <link rel="manifest" href="/static/favicons/site.webmanifest" />
      <link rel="mask-icon" href="/static/favicons/safari-pinned-tab.svg" color="#5bbad5" />
      <meta name="msapplication-TileColor" content="#000000" />
      <meta name="theme-color" media="(prefers-color-scheme: light)" content="#fff" />
      <meta name="theme-color" media="(prefers-color-scheme: dark)" content="#000" />
      <link rel="alternate" type="application/rss+xml" href="/feed.xml" />
      <body className="bg-white pl-[calc(100vw-100%)] text-black antialiased dark:bg-gray-950 dark:text-white">
        <TwSizeIndicator />
        <ThemeProvider>
          <Analytics analyticsConfig={siteMetadata.analytics as AnalyticsConfig} />
          <SectionContainer>
            <div className="flex h-screen flex-col justify-between font-sans">
              <SearchProvider>
                <Header />
                <main className="mb-auto">{children}</main>
              </SearchProvider>
              <Footer locale={locale} />
            </div>
          </SectionContainer>
        </ThemeProvider>
      </body>
    </html>
  )
}

================
File: app/[locale]/not-found.tsx
================
import NotFoundclient from '@/components/notfound/Client'

export default function NotFound() {
  return <NotFoundclient />
}

================
File: app/[locale]/page.tsx
================
import { sortPosts, allCoreContent } from 'pliny/utils/contentlayer'
import { allBlogs } from 'contentlayer/generated'
import FeaturedLayout from '@/layouts/FeaturedLayout'
import HomeLayout from '@/layouts/HomeLayout'
import { LocaleTypes } from './i18n/settings'

type HomeProps = {
  params: { locale: LocaleTypes }
}

export default async function Page({ params: { locale } }: HomeProps) {
  const sortedPosts = sortPosts(allBlogs)
  const posts = allCoreContent(sortedPosts)
  const filteredPosts = posts.filter((p) => p.language === locale)
  const hasFeaturedPosts = filteredPosts.filter((p) => p.featured === true)

  return (
    <>
      {hasFeaturedPosts && <FeaturedLayout posts={hasFeaturedPosts} params={{ locale }} />}
      <HomeLayout posts={filteredPosts} params={{ locale }} />
    </>
  )
}

================
File: app/[locale]/seo.tsx
================
import { Metadata } from 'next'
import siteMetadata from '@/data/siteMetadata'
import { maintitle, maindescription } from '@/data/localeMetadata'
import { LocaleTypes } from './i18n/settings'

interface PageSEOProps {
  title: string
  description?: string
  image?: string
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  params: { locale: LocaleTypes }
  [key: string]: any
}

export function genPageMetadata({
  title,
  description,
  image,
  params: { locale },
  ...rest
}: PageSEOProps): Metadata {
  return {
    title,
    description: description || maindescription[locale],
    openGraph: {
      title: `${title} | ${maintitle[locale]}`,
      description: description || maindescription[locale],
      url: './',
      siteName: maintitle[locale],
      images: image ? [image] : [siteMetadata.socialBanner],
      locale: locale,
      type: 'website',
    },
    twitter: {
      title: `${title} | ${maintitle[locale]}`,
      description: description ? description : maindescription[locale],
      site: siteMetadata.siteUrl,
      creator: siteMetadata.author,
      card: 'summary_large_image',
      images: image ? [image] : [siteMetadata.socialBanner],
    },
    ...rest,
  }
}

================
File: app/[locale]/sitemap.ts
================
import { MetadataRoute } from 'next'
import { allBlogs, allAuthors } from 'contentlayer/generated'
import siteMetadata from '@/data/siteMetadata'
import { fallbackLng, secondLng } from './i18n/locales'

export default function sitemap(): MetadataRoute.Sitemap {
  const siteUrl = siteMetadata.siteUrl
  const today = new Date().toISOString().split('T')[0]

  const blogRoutes = allBlogs
    .filter((post) => !post.draft)
    .flatMap((post) => {
      const mainUrl = `${siteUrl}/${fallbackLng}/blog/${post.slug}`
      const alternatepostsUrls: { url: string; lang: string }[] = []

      if (post.language !== fallbackLng) {
        const alternatepostsUrl = `${siteUrl}/${post.language}/blog/${post.slug}`
        alternatepostsUrls.push({ url: alternatepostsUrl, lang: post.language })
      }

      if (post.language !== secondLng) {
        const alternatepostsUrl = `${siteUrl}/${secondLng}/blog/${post.slug}`
        alternatepostsUrls.push({ url: alternatepostsUrl, lang: secondLng })
      }

      return [{ url: mainUrl, lastModified: post.lastmod || post.date }, ...alternatepostsUrls]
    })

  const authorsRoutes = allAuthors.flatMap((author) => {
    const mainUrl = `${siteUrl}/${fallbackLng}/about/${author.slug}`
    const alternateauthorsUrls: { url: string; lang: string }[] = []

    if (author.language !== fallbackLng) {
      const alternateauthorsUrl = `${siteUrl}/${author.language}/about/${author.slug}`
      alternateauthorsUrls.push({ url: alternateauthorsUrl, lang: author.language })
    }

    if (author.language !== secondLng) {
      const alternateauthorsUrl = `${siteUrl}/${secondLng}/about/${author.slug}`
      alternateauthorsUrls.push({ url: alternateauthorsUrl, lang: secondLng })
    }

    return [{ url: mainUrl }, ...alternateauthorsUrls]
  })

  const routes = ['', 'blog', 'projects', 'tags'].flatMap((route) => {
    const mainUrl = `${siteUrl}/${fallbackLng}/${route}`.replace(/\/$/, '')
    const alternateUrls: { url: string; lang: string }[] = []

    if (route !== fallbackLng) {
      const alternateUrl = `${siteUrl}/${fallbackLng}/${route}`.replace(/\/$/, '')
      alternateUrls.push({ url: alternateUrl, lang: fallbackLng })
    }

    if (route !== secondLng) {
      const alternateUrl = `${siteUrl}/${secondLng}/${route}`.replace(/\/$/, '')
      alternateUrls.push({ url: alternateUrl, lang: secondLng })
    }

    return [{ url: mainUrl, lastModified: today }, ...alternateUrls]
  })

  const combinedRoutes = [...routes, ...blogRoutes, ...authorsRoutes]

  // Filter out duplicate URLs and undefined values
  const uniqueRoutes = Array.from(new Set(combinedRoutes.map((route) => route.url)))
    .map((url) => {
      return combinedRoutes.find((route) => route.url === url)
    })
    .filter((route) => route !== undefined)

  return uniqueRoutes as MetadataRoute.Sitemap
}

================
File: app/[locale]/tag-data.json
================
{"zh-CN":{"中国经济":1,"宏观经济":1,"政策调控":1},"en":{"next-js":1,"math":1,"ols":1}}

================
File: app/robots.ts
================
import { MetadataRoute } from 'next'
import siteMetadata from '@/data/siteMetadata'

export default function robots(): MetadataRoute.Robots {
  return {
    rules: {
      userAgent: '*',
      allow: '/',
    },
    sitemap: `${siteMetadata.siteUrl}/sitemap.xml`,
    host: siteMetadata.siteUrl,
  }
}

================
File: components/comments/walinecomponents/walineComments.tsx
================
'use client'

import { useState, useEffect } from 'react'
import { init } from '@waline/client'
import '@waline/client/style'
import siteMetadata from '@/data/siteMetadata'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { useTranslation } from 'app/[locale]/i18n/client'
import { useParams } from 'next/navigation'

export default function WalineComments() {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'home')
  const [loadComments, setLoadComments] = useState<boolean>(false)

  useEffect(() => {
    let element: HTMLDivElement | null

    if (loadComments) {
      element = document.getElementById('waline') as HTMLDivElement
      init({
        el: '#waline',
        lang: locale,
        reaction: true,
        serverURL: siteMetadata.walineServer,
        emoji: [
          'https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo',
          'https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/alus',
        ],
        requiredMeta: ['nick'],
      })
    }

    return () => {}
  }, [loadComments, locale])

  return (
    <>
      {!loadComments && (
        <button
          className="mb-6 rounded bg-primary-500 p-2 text-white hover:opacity-80 dark:hover:opacity-80"
          onClick={() => setLoadComments(true)}
        >
          {t('comment')}
        </button>
      )}
      {loadComments && <div className="mb-6 mt-6" id="waline" />}
    </>
  )
}

================
File: components/comments/Comments.tsx
================
'use client'

import { Comments as CommentsComponent } from 'pliny/comments'
import { useState } from 'react'
import siteMetadata from '@/data/siteMetadata'
import { useParams } from 'next/navigation'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { useTranslation } from 'app/[locale]/i18n/client'

type CommentsProps = {
  slug: string
}

export default function Comments({ slug }: CommentsProps) {
  const [loadComments, setLoadComments] = useState(false)
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'home')
  return (
    <>
      {!loadComments && <button onClick={() => setLoadComments(true)}> {t('comment')}</button>}
      {siteMetadata.comments && loadComments && (
        <CommentsComponent commentsConfig={siteMetadata.comments} slug={slug} />
      )}
    </>
  )
}

================
File: components/formspree/store/index.ts
================
import { create } from 'zustand'

interface ContactModalStore {
  isOpen: boolean
  onOpen: () => void
  onClose: () => void
}

export const useContactModal = create<ContactModalStore>((set) => ({
  isOpen: false,
  onOpen: () => set({ isOpen: true }),
  onClose: () => set({ isOpen: false }),
}))

================
File: components/formspree/CBody.tsx
================
import { FormInputs } from './FormInputs'

interface ModalBodyProps {
  state: any
  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void
  name: string
  email: string
  message: string
  handleNameChange: (e: React.ChangeEvent<HTMLInputElement>) => void
  handleEmailChange: (e: React.ChangeEvent<HTMLInputElement>) => void
  handleMessageChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void
  t: (key: string) => string
}

export const ModalBody: React.FC<ModalBodyProps> = ({
  state,
  handleSubmit,
  name,
  email,
  message,
  handleNameChange,
  handleEmailChange,
  handleMessageChange,
  t,
}) => {
  return (
    <div className="flex flex-col gap-4">
      <form onSubmit={handleSubmit} autoComplete="on">
        <FormInputs
          name={name}
          email={email}
          message={message}
          handleNameChange={handleNameChange}
          handleEmailChange={handleEmailChange}
          handleMessageChange={handleMessageChange}
          state={state}
          t={t}
        />
        <button
          type="submit"
          disabled={state.submitting || !name || !email || !message}
          data-te-ripple-init
          data-te-ripple-color="light"
          className="text-md w-full rounded-full border-2 bg-primary-500 px-4 py-2 font-semibold text-white transition hover:opacity-80"
        >
          {t('button')}
        </button>
      </form>
    </div>
  )
}

================
File: components/formspree/CModal.tsx
================
import { useRef, useCallback } from 'react'
import { useOuterClick } from '../util/useOuterClick'
import { motion } from 'framer-motion'
import { MailIcon } from '../search/icons'

interface cModalProps {
  isOpen?: boolean
  onClose: () => void
  title?: string
  body?: React.ReactElement
  footer?: React.ReactElement
  disabled?: boolean
}

const variants = {
  hidden: { opacity: 0, x: 0, y: -25 },
  enter: { opacity: 1, x: 0, y: 0 },
}

export const CModal: React.FC<cModalProps> = ({
  isOpen,
  onClose,
  title,
  body,
  footer,
  disabled,
}) => {
  const modalContentRef = useRef<HTMLDivElement>(null)

  useOuterClick(modalContentRef, onClose)

  const handleClose = useCallback(() => {
    if (disabled) {
      return
    }
    onClose()
  }, [disabled, onClose])

  if (!isOpen) {
    return null
  }

  return (
    <motion.div
      variants={variants}
      initial="hidden"
      animate="enter"
      transition={{ type: 'linear' }}
      className="fixed inset-0 z-50 flex items-center justify-center bg-gray-300/50 p-4 backdrop-blur backdrop-filter dark:bg-black/50"
    >
      <div className="relative mx-auto my-3 h-full w-full sm:h-auto sm:w-2/5 sm:max-w-xl">
        <div
          ref={modalContentRef}
          className="relative flex h-full w-full flex-col rounded-lg border-0 bg-white shadow-lg outline-none focus:outline-none dark:bg-black lg:h-auto"
        >
          <div className="flex items-center justify-between p-6">
            <div className="ml-2 flex flex-row items-center text-3xl font-semibold text-heading-400">
              <span>
                <MailIcon className="mr-2 h-6 w-6" />
              </span>
              <div>{title}</div>
            </div>
            <button
              aria-label="contact"
              onClick={handleClose}
              className="ml-auto border-0 p-1 transition hover:opacity-70"
            >
              <p className="text-lg font-bold" style={{ fontSize: '1.5rem' }}>
                &times;
              </p>
            </button>
          </div>
          <div className="relative flex-auto p-6">{body}</div>
          <div className="flex flex-col gap-2 p-6">{footer}</div>
        </div>
      </div>
    </motion.div>
  )
}

================
File: components/formspree/FormInputs.tsx
================
import { ValidationError } from '@formspree/react'

interface FormInputsProps {
  name: string
  email: string
  message: string
  handleNameChange: (e: React.ChangeEvent<HTMLInputElement>) => void
  handleEmailChange: (e: React.ChangeEvent<HTMLInputElement>) => void
  handleMessageChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void
  state: any
  t: (key: string) => string
}

export const FormInputs: React.FC<FormInputsProps> = ({
  name,
  email,
  message,
  handleNameChange,
  handleEmailChange,
  handleMessageChange,
  state,
  t,
}) => {
  return (
    <>
      <input
        required
        autoComplete="name"
        id="fullName"
        type="text"
        name="fullName"
        placeholder={t('name')}
        value={name}
        onChange={handleNameChange}
        className="mb-2 w-full rounded-md border-black bg-white p-2 text-black outline-none transition disabled:cursor-not-allowed disabled:bg-neutral-900 disabled:opacity-70 dark:border-white dark:bg-black dark:text-white"
      />
      <input
        required
        autoComplete="email"
        id="email"
        type="email"
        name="email"
        placeholder={t('mail')}
        value={email}
        onChange={handleEmailChange}
        className="mb-2 w-full rounded-md border-black bg-white p-2 text-base text-black outline-none transition disabled:cursor-not-allowed disabled:bg-neutral-900 disabled:opacity-70 dark:border-white dark:bg-black dark:text-white"
      />
      <ValidationError prefix="Email" field="email" errors={state.errors} />
      <textarea
        required
        id="message"
        name="message"
        placeholder={t('message')}
        value={message}
        onChange={handleMessageChange}
        className="mb-2 w-full rounded-md border-black bg-white p-2 text-base text-black outline-none transition disabled:cursor-not-allowed disabled:bg-neutral-900 disabled:opacity-70 dark:border-white dark:bg-black dark:text-white"
      />
      <ValidationError prefix="Message" field="message" errors={state.errors} />
    </>
  )
}

================
File: components/formspree/index.tsx
================
'use client'

import { useContactModal } from './store'
import { Toaster } from 'react-hot-toast'
import { CModal } from './CModal'
import { ModalBody } from './CBody'
import { useContactForm } from './useContactForm'

export const ContactModal = (): JSX.Element => {
  const contactModal = useContactModal()
  const {
    state,
    handleSubmit,
    name,
    email,
    message,
    handleNameChange,
    handleEmailChange,
    handleMessageChange,
    t,
  } = useContactForm()

  return (
    <>
      <CModal
        title={t('title')}
        isOpen={contactModal.isOpen}
        onClose={contactModal.onClose}
        body={
          <ModalBody
            state={state}
            handleSubmit={handleSubmit}
            name={name}
            email={email}
            message={message}
            handleNameChange={handleNameChange}
            handleEmailChange={handleEmailChange}
            handleMessageChange={handleMessageChange}
            t={t}
          />
        }
      />
      <Toaster />
    </>
  )
}

================
File: components/formspree/useContactForm.ts
================
import { useState, useEffect } from 'react'
import { useForm } from '@formspree/react'
import toast from 'react-hot-toast'
import { useParams } from 'next/navigation'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { useTranslation } from 'app/[locale]/i18n/client'

export const useContactForm = () => {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'common')
  const [state, handleSubmit, reset] = useForm('xdojkndq')
  const [name, setName] = useState<string>('')
  const [email, setEmail] = useState<string>('')
  const [message, setMessage] = useState<string>('')

  useEffect(() => {
    if (state.succeeded && !state.submitting) {
      toast.success(t('thanks'), {
        position: 'bottom-right',
      })
      setTimeout(() => {
        setName('')
        setEmail('')
        setMessage('')
        reset()
      }, 2000)
    }

    if (state.errors && Object.keys(state.errors).length > 0) {
      toast.error(t('error'))
    }
  }, [state, reset, t])

  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    setName(e.target.value)
  }

  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    setEmail(e.target.value)
  }

  const handleMessageChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {
    setMessage(e.target.value)
  }

  return {
    state,
    handleSubmit,
    name,
    email,
    message,
    handleNameChange,
    handleEmailChange,
    handleMessageChange,
    t,
  }
}

================
File: components/helper/TwSizeIndicator.tsx
================
const TwSizeIndicator = () => {
  if (typeof window === 'undefined') {
    // 仅在服务器端渲染时不返回任何内容
    return null
  }

  return (
    <div className="fixed left-0 top-0 z-50 flex w-[30px] items-center justify-center bg-gray-200 py-[2.5px] text-[12px] uppercase text-black sm:bg-red-200 md:bg-yellow-200 lg:bg-green-200 xl:bg-blue-200 2xl:bg-pink-200">
      <span className="block sm:hidden">all</span>
      <span className="hidden sm:block md:hidden">sm</span>
      <span className="hidden md:block lg:hidden">md</span>
      <span className="hidden lg:block xl:hidden">lg</span>
      <span className="xl.block 2xl.hidden hidden">xl</span>
      <span className="2xl.block hidden">2xl</span>
    </div>
  )
}

export default TwSizeIndicator

================
File: components/langswitch/icon.tsx
================
import { SVGProps } from 'react'

export function ChevronDownIcon(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg {...svgProps} width="1em" height="1em" viewBox="0 0 15 15">
      <path
        fill="#3b82f6"
        fillRule="evenodd"
        d="M3.135 6.158a.5.5 0 0 1 .707-.023L7.5 9.565l3.658-3.43a.5.5 0 0 1 .684.73l-4 3.75a.5.5 0 0 1-.684 0l-4-3.75a.5.5 0 0 1-.023-.707"
        clipRule="evenodd"
      ></path>
    </svg>
  )
}

================
File: components/langswitch/index.tsx
================
import { useState, useRef, useCallback, useMemo } from 'react'
import { usePathname, useParams, useRouter } from 'next/navigation'
import { useOuterClick } from '../util/useOuterClick'
import { useTagStore } from '@/components/util/useTagStore'
import { LocaleTypes, locales } from 'app/[locale]/i18n/settings'
import {
  Menu,
  Transition,
  RadioGroup,
  MenuButton,
  MenuItems,
  Radio,
  MenuItem,
} from '@headlessui/react'
import { ChevronDownIcon } from './icon'

// 语言映射，将语言代码映射为友好的语言名称
const languageMap = {
  'zh-CN': '简体中文',
  en: 'English',
}

const LangSwitch = () => {
  const pathname = usePathname()
  const params = useParams()
  const locale = (params.locale as string) || ''
  const router = useRouter()
  const setSelectedTag = useTagStore((state) => state.setSelectedTag)
  const [isMenuOpen, setIsMenuOpen] = useState<boolean>(false)
  const menubarRef = useRef<HTMLDivElement>(null)
  useOuterClick(menubarRef, () => setIsMenuOpen(false))

  // 修改语言路径
  const handleLocaleChange = useCallback(
    (newLocale: string): string => {
      const segments = pathname!.split('/')
      const localeIndex = segments.findIndex((segment) => locales.includes(segment as LocaleTypes))
      if (localeIndex !== -1) {
        segments[localeIndex] = newLocale
      } else {
        segments.splice(1, 0, newLocale)
      }
      const newPath = segments.join('/').replace(/\/$/, '')
      return newPath
    },
    [pathname]
  )

  // 处理点击语言切换
  const handleLinkClick = useCallback(
    (newLocale: string) => {
      setSelectedTag('')
      const resolvedUrl = handleLocaleChange(newLocale)
      router.push(resolvedUrl)
      setIsMenuOpen(false)
    },
    [handleLocaleChange, router, setSelectedTag]
  )

  // 使用语言映射显示语言名称
  const currentLocale = useMemo(() => languageMap[locale] || locale, [locale])

  return (
    <div ref={menubarRef} className="relative inline-block text-left">
      <Menu>
        {({ open }) => (
          <>
            <MenuButton
              className="inline-flex rounded-md px-1 py-2 font-bold leading-5 text-gray-700 shadow-sm dark:text-white"
              aria-haspopup="true"
              aria-expanded={open}
              onClick={() => setIsMenuOpen(!isMenuOpen)}
            >
              {currentLocale} {/* 显示当前语言名称 */}
              <ChevronDownIcon
                className={`ml-1 mt-1 transform transition-transform duration-300 ${open ? 'rotate-180' : 'rotate-0'}`}
              />
            </MenuButton>
            <Transition
              show={open}
              enter="transition-all ease-out duration-300"
              enterFrom="opacity-0 scale-95 translate-y-[-10px]"
              enterTo="opacity-100 scale-100 translate-y-0"
              leave="transition-all ease-in duration-200"
              leaveFrom="opacity-100 scale-100 translate-y-0"
              leaveTo="opacity-0 scale-95 translate-y-[10px]"
            >
              <MenuItems
                className="absolute right-0 z-50 mt-2 w-24 origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800"
                aria-orientation="vertical"
                onBlur={() => setIsMenuOpen(false)}
              >
                <RadioGroup>
                  <div
                    className="py-1"
                    role="none"
                    style={{ listStyle: 'none', margin: 0, padding: 0 }}
                  >
                    {locales.map((newLocale: string) => (
                      <Radio key={newLocale} value={newLocale}>
                        <MenuItem>
                          {({ focus }) => (
                            <button
                              onClick={() => handleLinkClick(newLocale)}
                              className={`${
                                focus
                                  ? 'bg-gray-100 dark:bg-gray-600'
                                  : 'hover:bg-gray-100 dark:hover:bg-gray-600'
                              } rounded-md px-4 py-2 text-sm text-gray-700 hover:text-primary-500 dark:text-white dark:hover:text-primary-500`}
                              role="menuitem"
                              style={{ display: 'block', width: '100%', textDecoration: 'none' }}
                            >
                              {languageMap[newLocale] || newLocale} {/* 使用语言映射 */}
                            </button>
                          )}
                        </MenuItem>
                      </Radio>
                    ))}
                  </div>
                </RadioGroup>
              </MenuItems>
            </Transition>
          </>
        )}
      </Menu>
    </div>
  )
}

export default LangSwitch

================
File: components/mdxcomponents/Audioplayer.tsx
================
'use client'

import AudioPlayer from 'react-h5-audio-player'
import 'react-h5-audio-player/lib/styles.css'
// import 'react-h5-audio-player/lib/styles.less' Use LESS
// import 'react-h5-audio-player/src/styles.scss' Use SASS

type AudioplayerProps = {
  src: string
}

const Audioplayer = ({ src }: AudioplayerProps) => {
  return (
    <div>
      <AudioPlayer className="rounded-md" src={src} />
    </div>
  )
}

export default Audioplayer

================
File: components/mdxcomponents/Image.tsx
================
import NextImage, { ImageProps } from 'next/image'

const Image = ({ ...rest }: ImageProps) => <NextImage {...rest} />

export default Image

================
File: components/mdxcomponents/index.tsx
================
import TOCInline from 'pliny/ui/TOCInline'
import Pre from 'pliny/ui/Pre'
import BlogNewsletterForm from '../newletter/BlogNewsLetterForm'
import type { MDXComponents } from 'mdx/types'
import Image from './Image'
import CustomLink from './Link'
import TableWrapper from './TableWrapper'
import Audioplayer from './Audioplayer'
import WebsiteEmbed from './WebsiteEmbed'

export const components: MDXComponents = {
  Image,
  TOCInline,
  a: CustomLink,
  pre: Pre,
  table: TableWrapper,
  BlogNewsletterForm,
  Audioplayer,
  WebsiteEmbed,
}

================
File: components/mdxcomponents/Link.tsx
================
/* eslint-disable jsx-a11y/anchor-has-content */
import Link from 'next/link'
import type { LinkProps } from 'next/link'
import { AnchorHTMLAttributes } from 'react'

const CustomLink = ({ href, ...rest }: LinkProps & AnchorHTMLAttributes<HTMLAnchorElement>) => {
  const isInternalLink = href && href.startsWith('/')
  const isAnchorLink = href && href.startsWith('#')

  if (isInternalLink) {
    return <Link href={href} {...rest} />
  }

  if (isAnchorLink) {
    return <a href={href} {...rest} />
  }

  return <a target="_blank" rel="noopener noreferrer" href={href} {...rest} />
}

export default CustomLink

================
File: components/mdxcomponents/TableWrapper.tsx
================
import { ReactNode } from 'react'

interface TableWrapperProps {
  children: ReactNode
}

const TableWrapper = ({ children }: TableWrapperProps) => {
  return (
    <div className="w-full overflow-x-auto">
      <table>{children}</table>
    </div>
  )
}

export default TableWrapper

================
File: components/mdxcomponents/WebsiteEmbed.tsx
================
type EmbedPageProps = {
  website: string
}

const WebsiteEmbed = ({ website }: EmbedPageProps) => {
  return (
    <>
      <div style={{ height: '100vh', overflow: 'hidden' }}>
        <iframe
          src={`${website}`} // Replace with the URL you want to embed
          title="UniqueTitle" // 添加唯一的 title 属性
          style={{ border: 'none', width: '100%', height: '100%' }}
          allowFullScreen
        />
      </div>
    </>
  )
}

export default WebsiteEmbed

================
File: components/navigation/AuthorsMenu.tsx
================
'use client'

import Image from 'next/image'
import Link from 'next/link'
import siteMetadata from '@/data/siteMetadata'
import { Authors, allAuthors } from 'contentlayer/generated'
import { Fragment, useRef, useState, useMemo } from 'react'
import {
  Menu,
  MenuButton,
  MenuItem,
  MenuItems,
  Radio,
  RadioGroup,
  Transition,
} from '@headlessui/react'
import { useOuterClick } from '../util/useOuterClick'
import { useParams, usePathname } from 'next/navigation'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { useTranslation } from 'app/[locale]/i18n/client'
import { motion } from 'framer-motion'

type AuthorsMenuProps = {
  className: string
}

const AuthorsMenu = ({ className }: AuthorsMenuProps) => {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'common')
  const pathname = usePathname()
  const sections = pathname!.split('/')
  const lastSection = sections[sections.length - 1]
  const filterSections = pathname !== `/${locale}` && pathname !== '/'

  const authors = useMemo(
    () =>
      allAuthors
        .filter((a) => a.language === locale)
        .sort((a, b) => (a.default === b.default ? 0 : a.default ? -1 : 1)),
    [locale]
  ) as Authors[]

  const mainAuthor = useMemo(
    () => allAuthors.filter((a) => a.default === true && a.language === locale),
    [locale]
  ) as Authors[]

  const [isOpen, setIsOpen] = useState(false)

  const toggleMenu = () => {
    setIsOpen(!isOpen)
  }

  const closeMenu = () => {
    setIsOpen(false)
  }

  const menubarRef = useRef<HTMLDivElement>(null)
  useOuterClick(menubarRef, closeMenu)

  const isSelected = authors.some((author) => author.slug.includes(lastSection)) && filterSections

  const renderAuthorLink = (author: Authors) => {
    const { name, avatar, slug } = author
    return (
      <Radio key={name} value={name}>
        <MenuItem>
          {({ focus }) => (
            <div
              className={`${
                focus ? 'bg-gray-100 dark:bg-gray-600' : 'hover:bg-gray-100 dark:hover:bg-gray-600'
              } group flex w-full items-center rounded-md px-2 py-2 text-sm hover:text-primary-500 dark:hover:text-primary-500`}
            >
              <div className="mr-2">
                <Image
                  className="rounded-full"
                  src={avatar ?? ''}
                  alt="avatar"
                  title="avatar"
                  width={25}
                  height={25}
                />
              </div>
              <Link href={`/${locale}/about/${slug}`} onClick={closeMenu}>
                {name}
              </Link>
            </div>
          )}
        </MenuItem>
      </Radio>
    )
  }

  return (
    <>
      {siteMetadata.multiauthors ? (
        <div ref={menubarRef} className={className}>
          <Menu as="div" className="relative inline-block text-left font-medium leading-5">
            <div>
              <MenuButton
                className="flex transform-gpu items-center space-x-1 transition-transform duration-300"
                onClick={toggleMenu}
              >
                <div
                  className={`hidden font-medium ${
                    isSelected
                      ? 'text-heading-500'
                      : 'text-gray-500 hover:text-gray-900 dark:hover:text-gray-100'
                  } relative rounded-md px-2 py-1 font-medium transition-colors sm:block`}
                >
                  <span className="relative z-10">{t('about')}</span>
                  {isSelected && (
                    <motion.span
                      layoutId="tab"
                      transition={{ type: 'spring', duration: 0.4 }}
                      className="absolute inset-0 z-0 rounded-md bg-gray-100 dark:bg-gray-600"
                    ></motion.span>
                  )}
                </div>
              </MenuButton>
            </div>
            <Transition
              as={Fragment}
              show={isOpen}
              enter="transition-all ease-out duration-300"
              enterFrom="opacity-0 scale-95 translate-y-[-10px]"
              enterTo="opacity-100 scale-100 translate-y-0"
              leave="transition-all ease-in duration-200"
              leaveFrom="opacity-100 scale-100 translate-y-0"
              leaveTo="opacity-0 scale-95 translate-y-[10px]"
            >
              <MenuItems
                className="absolute right-0 z-50 mt-2 w-40 origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800"
                as="div"
              >
                <RadioGroup>
                  <div className="p-1">
                    {authors.map(
                      (author) => author.language === locale && renderAuthorLink(author)
                    )}
                  </div>
                </RadioGroup>
              </MenuItems>
            </Transition>
          </Menu>
        </div>
      ) : (
        <div className={className}>
          {mainAuthor.map((author) => {
            const { name, slug } = author
            return (
              <Link
                href={`/${locale}/about/${slug}`}
                key={name}
                className={`${
                  isSelected
                    ? 'text-white'
                    : 'text-gray-500 hover:text-gray-900 dark:hover:text-gray-100'
                } relative rounded-md px-2 py-1 font-medium transition-colors sm:block`}
              >
                <span className="relative z-10">{t('about')}</span>
                {isSelected && (
                  <motion.span
                    layoutId="tab"
                    transition={{ type: 'spring', duration: 0.4 }}
                    className="absolute inset-0 z-0 rounded-md bg-heading-500"
                  ></motion.span>
                )}
              </Link>
            )
          })}
        </div>
      )}
    </>
  )
}

export default AuthorsMenu

================
File: components/navigation/Footer.tsx
================
'use client'

import Link from '../mdxcomponents/Link'
import siteMetadata from '@/data/siteMetadata'
import { maintitle } from '@/data/localeMetadata'
import SocialIcon from '@/components/social-icons'

import { useParams } from 'next/navigation'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { useTranslation } from 'app/[locale]/i18n/client'

import { useContactModal } from '../formspree/store'
import { ContactModal } from '../formspree'

export default function Footer({ locale }) {
  const currentLocale = locale || 'en' // 确保 locale 有默认值

  const contactModal = useContactModal()

  const handleContactClick = (): void => {
    contactModal.onOpen()
  }
  function ContactClick(): void {
    handleContactClick()
  }

  return (
    <>
      <footer>
        <div className="mt-16 flex flex-col items-center">
          <div className="mb-3 flex space-x-4">
            <div className="flex items-center"></div>
            <div className="flex items-center">
              <SocialIcon kind="x" href={siteMetadata.x} size={6} />
            </div>
            <div className="flex items-center">
              <SocialIcon kind="threads" href={siteMetadata.threads} size={6} />
            </div>
          </div>
          <div className="mb-2 flex space-x-2 text-sm text-gray-500 dark:text-gray-400">
            <div>{siteMetadata.author}</div>
            <div>{` • `}</div>
            <div>{`© ${new Date().getFullYear()}`}</div>
            <div>{` • `}</div>
            <Link href="/">{maintitle[currentLocale] || maintitle['en']}</Link> {/* 确保有默认值 */}
            <br />
            <br />
            <br />
            <br />
          </div>
        </div>
      </footer>
      <ContactModal />
    </>
  )
}

================
File: components/navigation/Header.tsx
================
'use client'

import { useParams, usePathname } from 'next/navigation'
import siteMetadata from '@/data/siteMetadata'
import headerNavLinks from '@/data/headerNavLinks'
import Logo from '@/data/logo.svg'
import Link from '../mdxcomponents/Link'
import AuthorsMenu from './AuthorsMenu'
import MobileNav from './MobileNav'
import ThemeSwitch from '../theme/ThemeSwitch'
import LangSwitch from '../langswitch'
import SearchButton from '../search/SearchButton'
import { useTranslation } from 'app/[locale]/i18n/client'
import type { LocaleTypes } from 'app/[locale]/i18n/settings'
import { motion } from 'framer-motion'

const Header = () => {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'common')
  const pathname = usePathname()

  return (
    <header>
      <div className="flex items-center justify-between py-10">
        <div>
          <Link href={`/${locale}/`} aria-label={siteMetadata.headerTitle}>
            <div className="flex items-center justify-between">
              <div className="mr-3">
                <Logo />
              </div>
              {typeof siteMetadata.headerTitle === 'string' ? (
                <div className="hidden h-6 text-2xl font-semibold sm:block">
                  {siteMetadata.headerTitle}
                </div>
              ) : (
                siteMetadata.headerTitle
              )}
            </div>
          </Link>
        </div>
        <div className="flex items-center space-x-4 leading-5 sm:space-x-6">
          {headerNavLinks
            .filter((link) => {
              return link.href !== '/'
            })
            .map((link) => {
              const isSelected = pathname!.includes(link.href as string)
              return (
                <Link
                  key={link.title}
                  href={`/${locale}${link.href}`}
                  className="flex transform-gpu items-center space-x-1 transition-transform duration-300"
                >
                  <div
                    className={`hidden font-medium ${
                      isSelected
                        ? 'text-heading-500'
                        : 'text-gray-500 hover:text-gray-900 dark:hover:text-gray-100'
                    } relative rounded-md px-2 py-1 font-medium transition-colors sm:block`}
                  >
                    <span className="relative z-10">{t(`${link.title.toLowerCase()}`)}</span>
                    {isSelected && (
                      <motion.span
                        layoutId="tab"
                        transition={{ type: 'spring', duration: 0.4 }}
                        className="absolute inset-0 z-0 rounded-md bg-gray-100 dark:bg-gray-600"
                      ></motion.span>
                    )}
                  </div>
                </Link>
              )
            })}
          <AuthorsMenu className="hidden sm:block" />
          <SearchButton />
          <ThemeSwitch />
          <LangSwitch />
          <MobileNav />
        </div>
      </div>
    </header>
  )
}

export default Header

================
File: components/navigation/MobileNav.tsx
================
'use client'

import { SVGProps, useState } from 'react'
import Image from 'next/image'
import Link from '../mdxcomponents/Link'
import siteMetadata from '@/data/siteMetadata'
import headerNavLinks from '@/data/headerNavLinks'
import { Authors, allAuthors } from 'contentlayer/generated'
import { useParams } from 'next/navigation'
import { useTranslation } from 'app/[locale]/i18n/client'
import type { LocaleTypes } from 'app/[locale]/i18n/settings'
import { motion } from 'framer-motion'

export function ChevronDownIcon({ className, ...props }: SVGProps<SVGSVGElement>) {
  return (
    <svg {...props} className={className} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15 15">
      <path
        fill="currentColor"
        fillRule="evenodd"
        d="M3.135 6.158a.5.5 0 0 1 .707-.023L7.5 9.565l3.658-3.43a.5.5 0 0 1 .684.73l-4 3.75a.5.5 0 0 1-.684 0l-4-3.75a.5.5 0 0 1-.023-.707"
        clipRule="evenodd"
      ></path>
    </svg>
  )
}

const MobileNav = () => {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'common')
  const authors = allAuthors
    .filter((a) => a.language === locale)
    .sort((a, b) => (a.default === b.default ? 0 : a.default ? -1 : 1)) as Authors[]

  const mainAuthor = allAuthors.filter((a) => a.default === true && a.language === locale)

  const [navShow, setNavShow] = useState<boolean>(false)
  const [accordionOpen, setAccordionOpen] = useState<boolean>(false)

  const onToggleNav = () => {
    setNavShow((status) => {
      if (status) {
        document.body.style.overflow = 'auto'
      } else {
        document.body.style.overflow = 'hidden'
      }
      return !status
    })
  }

  const toggleAccordion = () => {
    setAccordionOpen(!accordionOpen)
  }

  return (
    <>
      <button aria-label={t('showmenu')} onClick={onToggleNav} className="sm:hidden">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          className="h-8 w-8 text-gray-900 dark:text-gray-100"
        >
          <path
            fillRule="evenodd"
            d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
            clipRule="evenodd"
          />
        </svg>
      </button>
      <div
        className={`fixed left-0 top-0 z-10 my-auto h-full w-full transform overflow-y-auto bg-white opacity-95 duration-300 ease-in-out dark:bg-gray-950 dark:opacity-[0.98] ${
          navShow ? 'translate-x-0' : 'translate-x-full'
        }`}
      >
        <div className="flex justify-end">
          <button className="mr-8 mt-11 h-8 w-8" aria-label="Toggle Menu" onClick={onToggleNav}>
            <svg
              viewBox="0 0 20 20"
              fill="currentColor"
              className="text-gray-900 dark:text-gray-100"
            >
              <path
                fillRule="evenodd"
                d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                clipRule="evenodd"
              />
            </svg>
          </button>
        </div>
        <nav className="fixed mt-8 h-full">
          {headerNavLinks.map((link) => (
            <div key={link.title} className="px-12 py-4">
              <Link
                href={`/${locale}${link.href}`}
                className="text-2xl font-bold tracking-widest text-gray-900 dark:text-gray-100"
                onClick={onToggleNav}
              >
                {t(`${link.title.toLowerCase()}`)}
              </Link>
            </div>
          ))}
          {siteMetadata.multiauthors && (
            <>
              <div
                className="flex cursor-pointer items-center justify-between px-12 py-4 text-2xl font-bold tracking-widest text-gray-900 dark:text-gray-100"
                onClick={toggleAccordion}
              >
                <div>{t('about')}:</div>
                <motion.div
                  animate={{ rotate: accordionOpen ? 180 : 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <ChevronDownIcon
                    className={`h-5 w-5 ${accordionOpen ? 'text-primary-500' : ''}`}
                  />
                </motion.div>
              </div>
              <motion.div
                initial={{ height: 0, opacity: 0 }}
                animate={{ height: accordionOpen ? 'auto' : 0, opacity: accordionOpen ? 1 : 0 }}
                transition={{ duration: 0.5, ease: [0.4, 0, 0.2, 1] }}
                className="overflow-hidden"
              >
                {authors.map((author) => {
                  const { name, avatar, language, slug } = author
                  if (language === locale) {
                    return (
                      <button
                        key={name}
                        className="group flex w-full items-center rounded-md px-12 py-4 text-sm"
                      >
                        <div className="mr-2">
                          <Image
                            className="h-auto w-auto rounded-full"
                            src={avatar ?? ''}
                            title="avatar"
                            alt="avatar"
                            width={25}
                            height={25}
                          />
                        </div>
                        <Link
                          href={`/${locale}/about/${slug}`}
                          onClick={onToggleNav}
                          className="text-xl font-bold tracking-widest text-gray-900 dark:text-gray-100"
                        >
                          {name}
                        </Link>
                      </button>
                    )
                  }
                  return null
                })}
              </motion.div>
            </>
          )}
          {siteMetadata.multiauthors === false && (
            <div className="px-12 py-4 text-2xl font-bold tracking-widest text-gray-900 dark:text-gray-100">
              {mainAuthor.map((author) => {
                const { name, language, slug } = author
                if (language === locale) {
                  return (
                    <Link href={`/${locale}/about/${slug}`} onClick={onToggleNav} key={name}>
                      {t('about')}
                    </Link>
                  )
                }
                return null
              })}
            </div>
          )}
        </nav>
      </div>
    </>
  )
}

export default MobileNav

================
File: components/newletter/BlogNewsLetterForm.tsx
================
import NewsletterForm, { NewsletterFormProps } from './NewsletterForm'

const BlogNewsletterForm = ({ title, apiUrl }: NewsletterFormProps) => (
  <div className="flex items-center justify-center">
    <div className="bg-gray-100 p-6 dark:bg-gray-800 sm:px-14 sm:py-8">
      <NewsletterForm title={title} apiUrl={apiUrl} />
    </div>
  </div>
)

export default BlogNewsletterForm

================
File: components/newletter/NewsletterForm.tsx
================
'use client'

import React, { useRef, useState } from 'react'
import { useTranslation } from 'app/[locale]/i18n/client'
import { useParams } from 'next/navigation'
import { LocaleTypes } from 'app/[locale]/i18n/settings'

export interface NewsletterFormProps {
  title?: string
  apiUrl?: string
}

const NewsletterForm = ({ apiUrl = '/api/newsletter' }: NewsletterFormProps) => {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'newsletter')
  const inputEl = useRef<HTMLInputElement>(null)
  const [error, setError] = useState<boolean>(false)
  const [message, setMessage] = useState<string>('')
  const [subscribed, setSubscribed] = useState<boolean>(false)

  const subscribe = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()

    const emailValue = inputEl.current?.value
    if (!emailValue) {
      setError(true)
      setMessage(t('messageError'))
      return
    }

    const res = await fetch(apiUrl, {
      body: JSON.stringify({
        email: emailValue,
      }),
      headers: {
        'Content-Type': 'application/json',
      },
      method: 'POST',
    })

    const { error } = await res.json()
    if (error) {
      setError(true)
      setMessage(t('messageError'))
    } else {
      inputEl.current!.value = ''
      setError(false)
      setSubscribed(true)
    }
  }

  return (
    <div>
      <div className="pb-1 text-lg font-semibold text-gray-800 dark:text-gray-100">
        {t('title')}
      </div>
      <form className="flex flex-col sm:flex-row" onSubmit={subscribe}>
        <div>
          <label htmlFor="email-input">
            <span className="sr-only">{t('mail')}</span>
            <input
              autoComplete="email"
              className="w-72 rounded-md px-4 focus:border-transparent focus:outline-none focus:ring-2 focus:ring-primary-600 dark:bg-black"
              id="email-input"
              name="email"
              placeholder={`${subscribed ? t('placeholderSuccess') : t('placeholderDefault')}`}
              ref={inputEl}
              required
              type="email"
              disabled={subscribed}
            />
          </label>
        </div>
        <div className="mt-2 flex w-full rounded-md shadow-sm sm:ml-3 sm:mt-0">
          <button
            className={`group relative inline-flex items-center justify-center overflow-hidden rounded-md bg-primary-500 px-4 py-1.5 text-xs font-normal text-white transition-all duration-300 ease-in-out hover:scale-105 hover:shadow-lg hover:shadow-blue-500/30 dark:bg-primary-500 dark:hover:shadow-purple-500/30 ${subscribed ? 'cursor-default' : ''}`}
            type="submit"
            disabled={subscribed}
          >
            <span className="relative z-50 text-lg text-white">
              {subscribed ? t('buttonSuccess') : t('buttonDefault')}
            </span>
            <div className="absolute inset-0 flex h-full w-full justify-center [transform:skew(-13deg)_translateX(-100%)] group-hover:duration-1000 group-hover:[transform:skew(-13deg)_translateX(100%)]">
              <div className="relative h-full w-8 bg-white/20" />
            </div>
          </button>
        </div>
      </form>
      {error && (
        <div className="w-72 pt-2 text-sm text-red-500 dark:text-red-400 sm:w-96">{message}</div>
      )}
    </div>
  )
}

export default NewsletterForm

================
File: components/notfound/Button.tsx
================
import Link from 'next/link'

type ButtonProps = {
  text: string
  href: string
  style?: string
  rel?: string
}

const Button = ({ text, href }: ButtonProps) => {
  return (
    <Link
      href={href}
      target={href.startsWith('http') ? `_blank` : ''}
      className="group relative inline-flex items-center justify-center overflow-hidden rounded-md bg-primary-500 px-4 py-1.5 text-xs font-normal text-white transition-all duration-300 ease-in-out hover:scale-105 hover:shadow-lg hover:shadow-blue-500/30 dark:bg-primary-500 dark:hover:shadow-purple-500/30"
      style={{ textDecoration: 'none' }}
    >
      <span className="relative z-50 text-lg text-white">{text}</span>
      <div className="absolute inset-0 flex h-full w-full justify-center [transform:skew(-13deg)_translateX(-100%)] group-hover:duration-1000 group-hover:[transform:skew(-13deg)_translateX(100%)]">
        <div className="relative h-full w-8 bg-white/20" />
      </div>
    </Link>
  )
}

export default Button

================
File: components/notfound/Client.tsx
================
'use client'

import Button from './Button'
import { useTranslation } from 'app/[locale]/i18n/client'
import { useParams } from 'next/navigation'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
export default function NotFoundclient() {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'notfound')
  return (
    <div className="flex flex-col items-start justify-start md:mt-24 md:flex-row md:items-center md:justify-center md:space-x-6">
      <div className="space-x-2 pb-8 pt-6 md:space-y-5">
        <h1 className="text-6xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 md:border-r-2 md:px-6 md:text-8xl md:leading-14">
          404
        </h1>
      </div>
      <div className="max-w-md">
        <p className="mb-4 text-xl font-bold leading-normal md:text-2xl">{t('title')}</p>
        <p className="mb-8">{t('description')}</p>
        <Button href={`/${locale}`} text={t('back')} />
      </div>
    </div>
  )
}

================
File: components/projectcard/index.tsx
================
import Image from '../mdxcomponents/Image'
import Link from '../mdxcomponents/Link'
import { useParams } from 'next/navigation'
import { LocaleTypes } from 'app/[locale]/i18n/settings'

import { motion } from 'framer-motion'
import { useTranslation } from 'app/[locale]/i18n/client'

const variants = {
  hidden: { opacity: 0, x: 0, y: -25 },
  enter: { opacity: 1, x: 0, y: 0 },
}

interface CardProps {
  title: string
  description: string
  imgSrc?: string
  href?: string
}

const Card: React.FC<CardProps> = ({ title, description, imgSrc, href }) => {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'projects')
  return (
    <motion.div
      variants={variants}
      initial="hidden"
      animate="enter"
      transition={{ type: 'linear' }}
      className="md max-w-[544px] p-4 md:w-1/2"
    >
      <div
        className={`${
          imgSrc && 'h-full'
        }  overflow-hidden rounded-md border-2 border-gray-200 border-opacity-60 dark:border-gray-700`}
      >
        {imgSrc &&
          (href ? (
            <Link
              href={href.startsWith('http') ? href : `/${locale}${href}`}
              aria-label={`${t('linkto')}${title}`}
            >
              <Image
                alt={title}
                title={title}
                src={imgSrc}
                className="object-cover object-center md:h-36 lg:h-48"
                width={544}
                height={306}
              />
            </Link>
          ) : (
            <Image
              alt={title}
              title={title}
              src={imgSrc}
              className="object-cover object-center md:h-36 lg:h-48"
              width={544}
              height={306}
            />
          ))}
        <div className="p-6">
          <h2 className="mb-3 text-2xl font-bold leading-8 tracking-tight">
            {href ? (
              <Link
                href={href.startsWith('http') ? href : `/${locale}${href}`}
                aria-label={`${t('linkto')}${title}`}
              >
                {title}
              </Link>
            ) : (
              title
            )}
          </h2>
          <p className="prose mb-3 max-w-none text-gray-500 dark:text-gray-400">{description}</p>
          {href && (
            <Link
              href={href.startsWith('http') ? href : `/${locale}${href}`}
              className="text-base font-medium leading-6 text-primary-500 hover:text-primary-600 dark:hover:text-primary-400"
              aria-label={`${t('linkto')}${title}`}
            >
              {href.startsWith('http') ? `${t('visit')}` : `${t('read')}`} &rarr;
            </Link>
          )}
        </div>
      </div>
    </motion.div>
  )
}
export default Card

================
File: components/scroll/icons.tsx
================
export function CommentsIcon(props) {
  return (
    <svg {...props} viewBox="0 0 20 20" fill="currentColor">
      <path
        fillRule="evenodd"
        d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z"
        clipRule="evenodd"
      />
    </svg>
  )
}

export function ArrowTopIcon(props) {
  return (
    <svg {...props} viewBox="0 0 20 20" fill="currentColor">
      <path
        fillRule="evenodd"
        d="M3.293 9.707a1 1 0 010-1.414l6-6a1 1 0 011.414 0l6 6a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L4.707 9.707a1 1 0 01-1.414 0z"
        clipRule="evenodd"
      />
    </svg>
  )
}

================
File: components/scroll/index.tsx
================
'use client'

import siteMetadata from '@/data/siteMetadata'
import { useTranslation } from 'app/[locale]/i18n/client'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { useParams } from 'next/navigation'
import { useEffect, useState } from 'react'
import { AlgoliaButton } from 'pliny/search/AlgoliaButton'
import { KBarButton } from '../search/KBarButton'
import { CommentsIcon, ArrowTopIcon } from './icons'
import { SearchIcon } from '../search/icons'

const ScrollTopAndComment = () => {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'common')
  const [show, setShow] = useState<boolean>(false)

  useEffect(() => {
    const handleWindowScroll = () => {
      if (window.scrollY > 50) setShow(true)
      else setShow(false)
    }

    window.addEventListener('scroll', handleWindowScroll)
    return () => window.removeEventListener('scroll', handleWindowScroll)
  }, [])

  const handleScrollTop = () => {
    window.scrollTo({ top: 0 })
  }
  const handleScrollToComment = () => {
    document.getElementById('comment')?.scrollIntoView()
  }

  if (
    siteMetadata.search &&
    (siteMetadata.search.provider === 'algolia' || siteMetadata.search.provider === 'kbar')
  ) {
    const SearchButtonWrapper =
      siteMetadata.search.provider === 'algolia' ? AlgoliaButton : KBarButton

    return (
      <div
        className={`fixed bottom-8 right-8 z-50 hidden flex-col gap-3 ${show ? 'md:flex' : 'md:hidden'}`}
      >
        <SearchButtonWrapper aria-label="Search">
          <div className="rounded-full bg-gray-200 p-2 text-gray-500 transition-all hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-400 dark:hover:bg-gray-600">
            <SearchIcon className="h-5 w-5" />
          </div>
        </SearchButtonWrapper>
        {siteMetadata.comments?.provider && (
          <button
            aria-label={t('scrollcomment')}
            onClick={handleScrollToComment}
            className="rounded-full bg-gray-200 p-2 text-gray-500 transition-all hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-400 dark:hover:bg-gray-600"
          >
            <CommentsIcon className="h-5 w-5" />
          </button>
        )}
        <button
          aria-label={t('scrolltop')}
          onClick={handleScrollTop}
          className="rounded-full bg-gray-200 p-2 text-gray-500 transition-all hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-400 dark:hover:bg-gray-600"
        >
          <ArrowTopIcon className="h-5 w-5" />
        </button>
      </div>
    )
  }
}

export default ScrollTopAndComment

================
File: components/search/icons/index.tsx
================
import { SVGProps } from 'react'

export function SearchIcon(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg {...svgProps} fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
      />
    </svg>
  )
}
export function MailIcon(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg {...svgProps} height="20px" viewBox="0 -960 960 960" width="20px" fill="currentColor">
      <path d="M160-160q-33 0-56.5-23.5T80-240v-480q0-33 23.5-56.5T160-800h640q33 0 56.5 23.5T880-720v480q0 33-23.5 56.5T800-160H160Zm320-280L160-640v400h640v-400L480-440Zm0-80 320-200H160l320 200ZM160-640v-80 480-400Z" />
    </svg>
  )
}

export function BackwardIcon(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg {...svgProps} height="20px" viewBox="0 -960 960 960" width="20px" fill="currentColor">
      <path d="M280-200v-80h284q63 0 109.5-40T720-420q0-60-46.5-100T564-560H312l104 104-56 56-200-200 200-200 56 56-104 104h252q97 0 166.5 63T800-420q0 94-69.5 157T564-200H280Z" />
    </svg>
  )
}

export function CopyToClipboard(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg {...svgProps} height="20px" viewBox="0 -960 960 960" width="20px" fill="currentColor">
      <path d="M360-240q-33 0-56.5-23.5T280-320v-480q0-33 23.5-56.5T360-880h360q33 0 56.5 23.5T800-800v480q0 33-23.5 56.5T720-240H360Zm0-80h360v-480H360v480ZM200-80q-33 0-56.5-23.5T120-160v-560h80v560h440v80H200Zm160-240v-480 480Z" />
    </svg>
  )
}

export function SettingsIcon(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg {...svgProps} height="20px" viewBox="0 -960 960 960" width="20px" fill="currentColor">
      <path d="m370-80-16-128q-13-5-24.5-12T307-235l-119 50L78-375l103-78q-1-7-1-13.5v-27q0-6.5 1-13.5L78-585l110-190 119 50q11-8 23-15t24-12l16-128h220l16 128q13 5 24.5 12t22.5 15l119-50 110 190-103 78q1 7 1 13.5v27q0 6.5-2 13.5l103 78-110 190-118-50q-11 8-23 15t-24 12L590-80H370Zm70-80h79l14-106q31-8 57.5-23.5T639-327l99 41 39-68-86-65q5-14 7-29.5t2-31.5q0-16-2-31.5t-7-29.5l86-65-39-68-99 42q-22-23-48.5-38.5T533-694l-13-106h-79l-14 106q-31 8-57.5 23.5T321-633l-99-41-39 68 86 64q-5 15-7 30t-2 32q0 16 2 31t7 30l-86 65 39 68 99-42q22 23 48.5 38.5T427-266l13 106Zm42-180q58 0 99-41t41-99q0-58-41-99t-99-41q-59 0-99.5 41T342-480q0 58 40.5 99t99.5 41Zm-2-140Z" />
    </svg>
  )
}

export function HomeIcon(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg {...svgProps} height="20px" viewBox="0 -960 960 960" width="20px" fill="currentColor">
      <path d="M240-200h120v-240h240v240h120v-360L480-740 240-560v360Zm-80 80v-480l320-240 320 240v480H520v-240h-80v240H160Zm320-350Z" />
    </svg>
  )
}

export function BlogIcon(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg {...svgProps} height="20px" viewBox="0 -960 960 960" width="20px" fill="currentColor">
      <path d="M120-240v-80h480v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z" />
    </svg>
  )
}

export function TagsIcon(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg {...svgProps} height="20px" viewBox="0 -960 960 960" width="20px" fill="currentColor">
      <path d="m240-160 40-160H120l20-80h160l40-160H180l20-80h160l40-160h80l-40 160h160l40-160h80l-40 160h160l-20 80H660l-40 160h160l-20 80H600l-40 160h-80l40-160H360l-40 160h-80Zm140-240h160l40-160H420l-40 160Z" />
    </svg>
  )
}

export function ProjectsIcon(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg {...svgProps} height="20px" viewBox="0 -960 960 960" width="20px" fill="currentColor">
      <path d="M240-160q-33 0-56.5-23.5T160-240q0-33 23.5-56.5T240-320q33 0 56.5 23.5T320-240q0 33-23.5 56.5T240-160Zm240 0q-33 0-56.5-23.5T400-240q0-33 23.5-56.5T480-320q33 0 56.5 23.5T560-240q0 33-23.5 56.5T480-160Zm240 0q-33 0-56.5-23.5T640-240q0-33 23.5-56.5T720-320q33 0 56.5 23.5T800-240q0 33-23.5 56.5T720-160ZM240-400q-33 0-56.5-23.5T160-480q0-33 23.5-56.5T240-560q33 0 56.5 23.5T320-480q0 33-23.5 56.5T240-400Zm240 0q-33 0-56.5-23.5T400-480q0-33 23.5-56.5T480-560q33 0 56.5 23.5T560-480q0 33-23.5 56.5T480-400Zm240 0q-33 0-56.5-23.5T640-480q0-33 23.5-56.5T720-560q33 0 56.5 23.5T800-480q0 33-23.5 56.5T720-400ZM240-640q-33 0-56.5-23.5T160-720q0-33 23.5-56.5T240-800q33 0 56.5 23.5T320-720q0 33-23.5 56.5T240-640Zm240 0q-33 0-56.5-23.5T400-720q0-33 23.5-56.5T480-800q33 0 56.5 23.5T560-720q0 33-23.5 56.5T480-640Zm240 0q-33 0-56.5-23.5T640-720q0-33 23.5-56.5T720-800q33 0 56.5 23.5T800-720q0 33-23.5 56.5T720-640Z" />
    </svg>
  )
}

export function AboutIcon(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg {...svgProps} height="20px" viewBox="0 -960 960 960" width="20px" fill="currentColor">
      <path d="M234-276q51-39 114-61.5T480-360q69 0 132 22.5T726-276q35-41 54.5-93T800-480q0-133-93.5-226.5T480-800q-133 0-226.5 93.5T160-480q0 59 19.5 111t54.5 93Zm246-164q-59 0-99.5-40.5T340-580q0-59 40.5-99.5T480-720q59 0 99.5 40.5T620-580q0 59-40.5 99.5T480-440Zm0 360q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q53 0 100-15.5t86-44.5q-39-29-86-44.5T480-280q-53 0-100 15.5T294-220q39 29 86 44.5T480-160Zm0-360q26 0 43-17t17-43q0-26-17-43t-43-17q-26 0-43 17t-17 43q0 26 17 43t43 17Zm0-60Zm0 360Z" />
    </svg>
  )
}

================
File: components/search/kbar/Button.tsx
================
import { BackwardIcon } from '../icons'

interface ButtonProps {
  onClick: () => void
  show: boolean
  icon: React.ReactNode
  label: string
  backLabel: string
}

const Button: React.FC<ButtonProps> = ({ onClick, show, icon, label, backLabel }) => (
  <button
    className="flex flex-row items-center justify-center rounded-md bg-white px-2 py-1 text-gray-700 shadow-lg ring-1 ring-black ring-opacity-5 hover:bg-gray-100 hover:text-primary-500 focus:outline-none dark:bg-gray-800 dark:text-white dark:hover:bg-gray-600 dark:hover:text-primary-500"
    onClick={onClick}
  >
    {show ? (
      <>
        <span className="mr-2">
          <BackwardIcon />
        </span>
        <div>{backLabel}</div>
      </>
    ) : (
      <>
        <span className="mr-2">{icon}</span>
        <div>{label}</div>
      </>
    )}
  </button>
)

export default Button

================
File: components/search/kbar/CopyButton.tsx
================
import { CopyToClipboard } from '../icons'

interface CopyButtonProps {
  show: boolean
  copyUrl: () => void
  showCopied: boolean
  t: (key: string) => string
}

const CopyButton: React.FC<CopyButtonProps> = ({ show, copyUrl, showCopied, t }) => (
  <div className="relative inline-block">
    {!show && (
      <button
        className="flex flex-row items-center justify-center rounded-md bg-white px-2 py-1 text-gray-700 shadow-lg ring-1 ring-black ring-opacity-5 hover:bg-gray-100 hover:text-primary-500 focus:outline-none dark:bg-gray-800 dark:text-white dark:hover:bg-gray-600 dark:hover:text-primary-500"
        onClick={copyUrl}
      >
        <span className="mr-2">
          <CopyToClipboard />
        </span>
        <div className="sm:hidden">Url</div>
        <div className="hidden sm:block">{t('copyurl')}</div>
      </button>
    )}
    {showCopied && (
      <div className="absolute right-0 top-10 z-50 rounded-md bg-white p-2 text-center shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800">
        <p className="text-primary-500 dark:text-primary-400">{t('urlcopied')}</p>
      </div>
    )}
  </div>
)

export default CopyButton

================
File: components/search/kbar/Emailform.tsx
================
import { MailIcon } from '../icons'
import { ModalBody } from '@/components/formspree/CBody'

interface EmailFormProps {
  state: any
  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void
  name: string
  email: string
  message: string
  handleNameChange: (e: React.ChangeEvent<HTMLInputElement>) => void
  handleEmailChange: (e: React.ChangeEvent<HTMLInputElement>) => void
  handleMessageChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void
  t: (key: string) => string
}

const EmailForm: React.FC<EmailFormProps> = ({
  state,
  handleSubmit,
  name,
  email,
  message,
  handleNameChange,
  handleEmailChange,
  handleMessageChange,
  t,
}) => (
  <>
    <div className="ml-2 mt-5 flex flex-row items-center text-3xl font-semibold text-heading-400">
      <span>
        <MailIcon className="mr-1 h-6 w-6" />
      </span>
      <div>{t('title')}</div>
    </div>
    <div className="mb-16 ml-2 mr-2 mt-16">
      <ModalBody
        handleSubmit={handleSubmit}
        name={name}
        email={email}
        message={message}
        handleNameChange={handleNameChange}
        handleEmailChange={handleEmailChange}
        handleMessageChange={handleMessageChange}
        state={state}
        t={t}
      />
    </div>
  </>
)

export default EmailForm

================
File: components/search/kbar/index.tsx
================
import { useState, useEffect, FC, ReactNode } from 'react'
import type { Action } from 'kbar'
import { KBarProvider } from 'kbar'
import { useRouter } from 'next/navigation.js'
import { KBarModal } from './KBarModal'
import { CoreContent, MDXDocument } from 'pliny/utils/contentlayer'
import { formatDate } from 'pliny/utils/formatDate'

export interface KBarSearchProps {
  searchDocumentsPath: string | false
  defaultActions?: Action[]
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  onSearchDocumentsLoad?: (json: any) => Action[]
}

export interface KBarConfig {
  provider: 'kbar'
  kbarConfig: KBarSearchProps
}

/**
 * Command palette like search component with kbar - `ctrl-k` to open the palette.
 *
 * Default actions can be overridden by passing in an array of actions to `defaultActions`.
 * To load actions dynamically, pass in a `searchDocumentsPath` to a JSON file.
 * `onSearchDocumentsLoad` can be used to transform the JSON into actions.
 *
 * To toggle the modal or search from child components, use the search context:
 * ```
 * import { useKBar } from 'kbar'
 * const { query } = useKBar()
 * ```
 * See https://github.com/timc1/kbar/blob/main/src/types.ts#L98-L106 for typings.
 *
 * @param {*} { kbarConfig, children }
 * @return {*}
 */
export const KBarSearchProvider: FC<{
  children: ReactNode
  kbarConfig: KBarSearchProps
}> = ({ kbarConfig, children }) => {
  const router = useRouter()
  const { searchDocumentsPath, defaultActions, onSearchDocumentsLoad } = kbarConfig
  const [searchActions, setSearchActions] = useState<Action[]>([])
  const [dataLoaded, setDataLoaded] = useState(false)

  useEffect(() => {
    const mapPosts = (posts: CoreContent<MDXDocument>[]) => {
      const actions: Action[] = []
      for (const post of posts) {
        actions.push({
          id: post.path,
          name: post.title,
          keywords: post?.summary || '',
          section: 'Content',
          subtitle: formatDate(post.date, post.language),
          perform: () => router.push('/' + post.path),
        })
      }
      return actions
    }
    async function fetchData() {
      if (searchDocumentsPath) {
        const url =
          searchDocumentsPath.indexOf('://') > 0 || searchDocumentsPath.indexOf('//') === 0
            ? searchDocumentsPath
            : new URL(searchDocumentsPath, window.location.origin)
        const res = await fetch(url)
        const json = await res.json()
        const actions = onSearchDocumentsLoad ? onSearchDocumentsLoad(json) : mapPosts(json)
        setSearchActions(actions)
        setDataLoaded(true)
      }
    }
    if (!dataLoaded && searchDocumentsPath) {
      fetchData()
    } else {
      setDataLoaded(true)
    }
  }, [defaultActions, dataLoaded, router, searchDocumentsPath, onSearchDocumentsLoad])

  return (
    <KBarProvider actions={defaultActions}>
      <KBarModal actions={searchActions} isLoading={!dataLoaded} />
      {children}
    </KBarProvider>
  )
}

================
File: components/search/kbar/KBarModal.tsx
================
import { useState } from 'react'
import { useParams, usePathname, useRouter } from 'next/navigation'
import { useTranslation } from 'app/[locale]/i18n/client'
import { useTheme } from '@/components/theme/ThemeContext'
import { useTagStore } from '@/components/util/useTagStore'
import { useContactForm } from '@/components/formspree/useContactForm'
import { useRegisterActions } from 'kbar'
import siteMetadata from '@/data/siteMetadata'
import EmailForm from './Emailform'
import Settings from './Settings'
import Button from './Button'
import CopyButton from './CopyButton'
import RenderResults from './RenderResults'
import { KBarPortal, KBarAnimator, KBarPositioner, KBarSearch } from 'kbar'
import { Toaster } from 'react-hot-toast'
import { SearchIcon, MailIcon, SettingsIcon } from '../icons'
import { LocaleTypes, locales } from 'app/[locale]/i18n/settings'

interface KBarModalProps {
  actions: any
  isLoading: boolean
}

export const KBarModal: React.FC<KBarModalProps> = ({ actions, isLoading }) => {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'common')
  const pathname = usePathname()
  const router = useRouter()
  const setSelectedTag = useTagStore((state) => state.setSelectedTag)

  useRegisterActions(actions, [actions])

  const {
    state,
    handleSubmit,
    name,
    email,
    message,
    handleNameChange,
    handleEmailChange,
    handleMessageChange,
  } = useContactForm()

  const { setTheme, mounted } = useTheme()
  const [showEmailForm, setShowEmailForm] = useState<boolean>(false)
  const [showSettings, setShowSettings] = useState<boolean>(false)
  const [showCopied, setShowCopied] = useState<boolean>(false)

  const toggleShowEmail = () => {
    if (siteMetadata.formspree) {
      setShowEmailForm(!showEmailForm)
    } else {
      window.location.href = `mailto:${siteMetadata.email}`
    }
  }

  const toggleSettings = () => setShowSettings(!showSettings)

  const copyUrl = () => {
    navigator.clipboard.writeText(window.location.href)
    setShowCopied(true)
    setTimeout(() => setShowCopied(false), 1000)
  }

  const handleLocaleChange = (newLocale: string) => {
    const segments = pathname.split('/')
    const localeIndex = segments.findIndex((segment) => locales.includes(segment as LocaleTypes))
    if (localeIndex !== -1) {
      segments[localeIndex] = newLocale
    } else {
      segments.splice(1, 0, newLocale)
    }
    return segments.join('/')
  }

  const handleLinkClick = (newLocale: string) => {
    setSelectedTag('')
    const resolvedUrl = handleLocaleChange(newLocale)
    router.push(resolvedUrl)
  }

  const handleThemeChange = (newTheme: string) => setTheme(newTheme)

  if (!mounted) return null

  return (
    <>
      <KBarPortal>
        <KBarPositioner className="bg-gray-300/50 p-4 backdrop-blur backdrop-filter dark:bg-black/50">
          <KBarAnimator className="w-full max-w-xl">
            <div
              style={{ zIndex: '100' }}
              className="overflow-hidden rounded-2xl border border-gray-100 bg-gray-50 dark:border-gray-800 dark:bg-[#1c1c1c]"
            >
              <div className="flex items-center space-x-4 p-4">
                <span className="block w-5">
                  <SearchIcon className="text-gray-400 dark:text-gray-300" />
                </span>
                {showEmailForm || showSettings ? (
                  <div className="h-8 w-full bg-transparent" />
                ) : (
                  <KBarSearch
                    defaultPlaceholder={t('kbarplaceholder')}
                    className="h-8 w-full bg-transparent text-gray-600 placeholder-gray-400 focus:outline-none dark:text-gray-200 dark:placeholder-gray-500"
                  />
                )}
                <kbd className="inline-block whitespace-nowrap rounded border border-gray-400 px-1.5 align-middle text-xs font-medium leading-4 tracking-wide text-gray-400">
                  ESC
                </kbd>
              </div>
              <div className="mb-1 ml-2 flex items-center space-x-2">
                {!showSettings && (
                  <Button
                    onClick={toggleShowEmail}
                    show={showEmailForm}
                    icon={<MailIcon />}
                    label={t('contact')}
                    backLabel={t('back')}
                  />
                )}
                {!showEmailForm && (
                  <Button
                    onClick={toggleSettings}
                    show={showSettings}
                    icon={<SettingsIcon />}
                    label={t('settings')}
                    backLabel={t('back')}
                  />
                )}
                <CopyButton
                  show={showEmailForm || showSettings}
                  copyUrl={copyUrl}
                  showCopied={showCopied}
                  t={t}
                />
              </div>
              {showEmailForm && (
                <EmailForm
                  state={state}
                  handleSubmit={handleSubmit}
                  name={name}
                  email={email}
                  message={message}
                  handleNameChange={handleNameChange}
                  handleEmailChange={handleEmailChange}
                  handleMessageChange={handleMessageChange}
                  t={t}
                />
              )}
              {showSettings && (
                <Settings
                  t={t}
                  handleThemeChange={handleThemeChange}
                  handleLinkClick={handleLinkClick}
                />
              )}
              {!isLoading && !showEmailForm && !showSettings && <RenderResults />}
              {isLoading && (
                <div className="block border-t border-gray-100 px-4 py-8 text-center text-gray-400 dark:border-gray-800 dark:text-gray-600">
                  {t('loading')}
                </div>
              )}
            </div>
          </KBarAnimator>
        </KBarPositioner>
      </KBarPortal>
      <Toaster />
    </>
  )
}

================
File: components/search/kbar/LangButton.tsx
================
interface LangButtonProps {
  t: (key: string) => string
  handleLinkClick: (locale: string) => void
  locale: string
  lang: string
}

const LangButton: React.FC<LangButtonProps> = ({ t, handleLinkClick, locale, lang }) => (
  <button
    className="group flex flex-row items-center py-2 hover:bg-primary-600 hover:text-white"
    onClick={() => handleLinkClick(locale)}
  >
    <span className="ml-4 mr-2 w-8 rounded-md bg-black px-1 text-white group-hover:bg-white group-hover:text-primary-500 dark:bg-white dark:text-black">
      {locale}
    </span>
    <div>{t(lang)}</div>
  </button>
)

export default LangButton

================
File: components/search/kbar/RenderResults.tsx
================
import { KBarResults, useMatches } from 'kbar'
import { useParams } from 'next/navigation'
import { useTranslation } from 'app/[locale]/i18n/client'
import ResultItem from './ResultItem'
import { LocaleTypes } from 'app/[locale]/i18n/settings'

const RenderResults = () => {
  const { results } = useMatches()
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'common')

  return results.length ? (
    <KBarResults
      items={results}
      onRender={({ item, active }) => (
        <div>
          {typeof item === 'string' ? (
            <div className="pt-3">
              <div className="block border-t border-gray-100 px-4 pb-2 pt-6 text-xs font-semibold uppercase text-primary-600 dark:border-gray-800">
                {item}
              </div>
            </div>
          ) : (
            <ResultItem item={item} active={active} />
          )}
        </div>
      )}
    />
  ) : (
    <div className="block border-t border-gray-100 px-4 py-8 text-center text-gray-400 dark:border-gray-800 dark:text-gray-600">
      {t('noresults')}
    </div>
  )
}

export default RenderResults

================
File: components/search/kbar/ResultItem.tsx
================
interface ResultItemProps {
  item: {
    name: string
    subtitle?: string
    icon?: React.ReactNode
    shortcut?: string[]
  }
  active: boolean
}

const ResultItem: React.FC<ResultItemProps> = ({ item, active }) => (
  <div
    className={`flex cursor-pointer justify-between px-4 py-2 ${
      active ? 'bg-primary-600 text-gray-100' : 'bg-transparent text-gray-700 dark:text-gray-100'
    }`}
  >
    <div className="flex space-x-2">
      {item.icon && <div className="mb-1 self-center">{item.icon}</div>}
      <div className="block">
        {item.subtitle && (
          <div className={`${active ? 'text-gray-200' : 'text-gray-400'} text-xs`}>
            {item.subtitle}
          </div>
        )}
        <div>{item.name}</div>
      </div>
    </div>
    {item.shortcut?.length ? (
      <div aria-hidden className="flex flex-row items-center justify-center gap-x-2">
        {item.shortcut.map((sc) => (
          <kbd
            key={sc}
            className={`flex h-7 w-6 items-center justify-center rounded border text-xs font-medium ${
              active ? 'border-gray-200 text-gray-200' : 'border-gray-400 text-gray-400'
            }`}
          >
            {sc}
          </kbd>
        ))}
      </div>
    ) : null}
  </div>
)

export default ResultItem

================
File: components/search/kbar/Settings.tsx
================
import { SettingsIcon } from '../icons'
import { Sun, Moon, Monitor } from '@/components/theme/icons'
import LangButton from './LangButton'
import ThemeButton from './ThemeButton'
import { fallbackLng, secondLng } from 'app/[locale]/i18n/locales'

interface SettingsProps {
  t: (key: string) => string
  handleThemeChange: (theme: string) => void
  handleLinkClick: (locale: string) => void
}

const Settings: React.FC<SettingsProps> = ({ t, handleThemeChange, handleLinkClick }) => (
  <>
    <div className="mb-5 ml-4 mt-5 flex flex-row items-center text-3xl font-semibold text-heading-400">
      <span>
        <SettingsIcon className="mr-1 h-6 w-6" />
      </span>
      <div>{t('settings')}</div>
    </div>
    <div className="my-auto mb-20 mt-10 flex max-h-[230px] flex-col space-y-4 overflow-y-auto">
      <div className="ml-4 text-3xl font-semibold text-primary-400">{t('language')}</div>
      <LangButton t={t} handleLinkClick={handleLinkClick} locale={fallbackLng} lang="english" />
      <LangButton t={t} handleLinkClick={handleLinkClick} locale={secondLng} lang="french" />
      <div className="ml-4 text-3xl font-semibold text-primary-400">{t('theme')}</div>
      <ThemeButton t={t} handleThemeChange={handleThemeChange} theme="light" Icon={Sun} />
      <ThemeButton t={t} handleThemeChange={handleThemeChange} theme="dark" Icon={Moon} />
      <ThemeButton t={t} handleThemeChange={handleThemeChange} theme="system" Icon={Monitor} />
    </div>
  </>
)

export default Settings

================
File: components/search/kbar/ThemeButton.tsx
================
interface ThemeButtonProps {
  t: (key: string) => string
  handleThemeChange: (theme: string) => void
  theme: string
  Icon: React.FC<React.SVGProps<SVGSVGElement>>
}

const ThemeButton: React.FC<ThemeButtonProps> = ({ t, handleThemeChange, theme, Icon }) => (
  <button
    className="flex flex-row py-2 hover:bg-primary-600 hover:text-white"
    onClick={() => handleThemeChange(theme)}
  >
    <span className="ml-4 mr-2">
      <Icon className="h-6 w-6" />
    </span>
    <div>{t(theme)}</div>
  </button>
)

export default ThemeButton

================
File: components/search/KBarButton.tsx
================
import React, { DetailedHTMLProps, HTMLAttributes, ReactNode } from 'react'
import { useKBar } from 'kbar'

interface KbarButtonProps {
  children: ReactNode
  [key: string]: any
}

/**
 * Button wrapper component that triggers the KBar modal on click.
 *
 * @return {*}
 */
export const KBarButton: React.FC<
  DetailedHTMLProps<HTMLAttributes<HTMLButtonElement>, HTMLButtonElement>
> = ({ children, ...rest }: KbarButtonProps) => {
  const { query } = useKBar()

  return (
    <button {...rest} onClick={() => query.toggle()}>
      {children}
    </button>
  )
}

================
File: components/search/SearchButton.tsx
================
import { AlgoliaButton } from 'pliny/search/AlgoliaButton'
import { KBarButton } from './KBarButton'
import siteMetadata from '@/data/siteMetadata'
import { SearchIcon } from './icons'

const SearchButton = () => {
  if (
    siteMetadata.search &&
    (siteMetadata.search.provider === 'algolia' || siteMetadata.search.provider === 'kbar')
  ) {
    const SearchButtonWrapper =
      siteMetadata.search.provider === 'algolia' ? AlgoliaButton : KBarButton

    return (
      <SearchButtonWrapper aria-label="Search">
        <SearchIcon className="h-6 w-6 text-gray-900 dark:text-gray-100" />
      </SearchButtonWrapper>
    )
  }
}

export default SearchButton

================
File: components/search/SearchProvider.tsx
================
'use client'

import { ReactNode } from 'react'
import { KBarSearchProvider } from './kbar'
import { useParams, useRouter } from 'next/navigation'
import siteMetadata from '@/data/siteMetadata'
import { Authors, allAuthors } from 'contentlayer/generated'
import { CoreContent } from 'pliny/utils/contentlayer'
import { Blog } from 'contentlayer/generated'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { useTranslation } from 'app/[locale]/i18n/client'
import { fallbackLng } from 'app/[locale]/i18n/locales'
import { HomeIcon, BlogIcon, TagsIcon, ProjectsIcon, AboutIcon } from './icons'

interface SearchProviderProps {
  children: ReactNode
}

export const SearchProvider = ({ children }: SearchProviderProps) => {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'common')
  const router = useRouter()
  const authors = allAuthors
    .filter((a) => a.language === locale)
    .sort((a, b) => (a.default === b.default ? 0 : a.default ? -1 : 1)) as Authors[]

  const authorSearchItems = authors.map((author) => {
    const { name, slug } = author
    return {
      id: slug,
      name: name,
      keywords: '',
      shortcut: [],
      section: locale === fallbackLng ? 'Authors' : 'Auteurs',
      perform: () => router.push(`/${locale}/about/${slug}`),
      icon: (
        <i>
          <AboutIcon />
        </i>
      ),
    }
  })

  const showAuthorsSearch = siteMetadata.multiauthors
  const authorsActions = [
    ...(showAuthorsSearch ? authorSearchItems : []),
    ...(showAuthorsSearch
      ? []
      : [
          {
            id: 'about',
            name: locale === fallbackLng ? 'About' : 'À propos',
            keywords: '',
            shortcut: ['a'],
            section: locale === fallbackLng ? 'Navigate' : 'Naviguer',
            perform: () => router.push(`/${locale}/about`),
            icon: (
              <i>
                <AboutIcon />
              </i>
            ),
          },
        ]),
  ]
  /* issue when using regular translations, this is a workaround to show how to implement section titles */
  const navigationSection = locale === fallbackLng ? 'Navigate' : 'Naviguer'
  return (
    <KBarSearchProvider
      kbarConfig={{
        searchDocumentsPath: 'search.json',
        /* issue when using regular translations, this is a workaround to show how to implement translated menu titles */
        defaultActions: [
          {
            id: 'home',
            name: locale === fallbackLng ? 'Home' : 'Accueil',
            keywords: '',
            shortcut: ['h'],
            section: navigationSection,
            perform: () => router.push(`/${locale}`),
            icon: (
              <i>
                <HomeIcon />
              </i>
            ),
          },
          {
            id: 'blog',
            name: locale === fallbackLng ? 'Blog' : 'Blog',
            keywords: '',
            shortcut: ['b'],
            section: navigationSection,
            perform: () => router.push(`/${locale}/blog`),
            icon: (
              <i>
                <BlogIcon />
              </i>
            ),
          },
          {
            id: 'tags',
            name: locale === fallbackLng ? 'Tags' : 'Tags',
            keywords: '',
            shortcut: ['t'],
            section: navigationSection,
            perform: () => router.push(`/${locale}/tags`),
            icon: (
              <i>
                <TagsIcon />
              </i>
            ),
          },
          {
            id: 'projects',
            name: locale === fallbackLng ? 'Projects' : 'Projets',
            keywords: '',
            shortcut: ['p'],
            section: navigationSection,
            perform: () => router.push(`/${locale}/projects`),
            icon: (
              <i>
                <ProjectsIcon />
              </i>
            ),
          },
          ...authorsActions,
        ],
        onSearchDocumentsLoad(json) {
          return json
            .filter((post: CoreContent<Blog>) => post.language === locale)
            .map((post: CoreContent<Blog>) => ({
              id: post.path,
              name: post.title,
              keywords: post?.summary || '',
              section: t('content'),
              subtitle: post.tags.join(', '),
              perform: () => router.push(`/${locale}/blog/${post.slug}`),
            }))
        },
      }}
    >
      {children}
    </KBarSearchProvider>
  )
}

================
File: components/seriescard/index.tsx
================
'use client'

import Link from 'next/link'
import { Card, CardHeader, CardTitle, CardContent } from './seriesCard'
import { useTranslation } from 'app/[locale]/i18n/client'
import { useParams } from 'next/navigation'
import { LocaleTypes } from 'app/[locale]/i18n/settings'

export type PostSeriesProps = {
  data: any
}

export const PostSeriesBox = ({ data }: PostSeriesProps) => {
  const currentIndex = data.posts.findIndex((post: { isCurrent: any }) => post.isCurrent) + 1
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'common')

  return (
    <Card className="mb-4">
      <CardHeader>
        <CardTitle>
          {t('series')} {data.title}
        </CardTitle>
      </CardHeader>
      <CardContent>
        {t('episodes')} ({currentIndex}/{data.posts.length})
        <ul>
          {data.posts.map((p) => (
            <li
              key={p.slug}
              className={`relative my-3 list-none pl-7 text-sm before:absolute before:left-1 before:top-[9px] before:h-1.5 before:w-1.5 before:rounded-full
              ${
                p.isCurrent
                  ? 'before:bg-accent-foreground/90 before:ring-[3px] before:ring-purple-400/20 before:ring-offset-1 before:ring-offset-black/10'
                  : 'hover:before:bg-accent-foreground/90 font-bold before:bg-primary-500/30 hover:before:ring-[3px] hover:before:ring-primary-500 hover:before:ring-offset-1 hover:before:ring-offset-black/10 dark:hover:before:ring-primary-500'
              }`}
            >
              {p.isCurrent ? (
                <span>{p.title}</span>
              ) : (
                <Link
                  className="transition-colors duration-200 ease-in-out hover:text-primary-500 dark:hover:text-primary-500"
                  href={`/${locale}/blog/${p.slug}`}
                >
                  {p.title}
                </Link>
              )}
            </li>
          ))}
        </ul>
      </CardContent>
    </Card>
  )
}

================
File: components/seriescard/seriesCard.tsx
================
/* eslint-disable jsx-a11y/heading-has-content */
import * as React from 'react'

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      className={`bg-card text-card-foreground rounded-lg border lg:w-auto ${className}`}
      {...props}
    />
  )
)
Card.displayName = 'Card'

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={`flex flex-col space-y-1.5 p-6 ${className}`} {...props} />
  )
)
CardHeader.displayName = 'CardHeader'

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      className={`text-lg font-semibold leading-none tracking-tight ${className}`}
      {...props}
    />
  )
)
CardTitle.displayName = 'CardTitle'

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => <div ref={ref} className={`p-6 pt-0 ${className}`} {...props} />
)
CardContent.displayName = 'CardContent'

export { Card, CardHeader, CardTitle, CardContent }

================
File: components/share/index.tsx
================
'use client'

import siteMetadata from '@/data/siteMetadata'
import SocialIcon from '@/components/social-icons'
import { useState } from 'react'
import { useParams, usePathname } from 'next/navigation'
import { useTranslation } from 'app/[locale]/i18n/client'
import { fallbackLng, secondLng } from 'app/[locale]/i18n/locales'
import { LocaleTypes } from 'app/[locale]/i18n/settings'

type ShareProps = { title: string; description?: string; slug: string; className?: string }

const Share = ({ title, description, slug, className }: ShareProps) => {
  const [showMenu, setShowMenu] = useState<boolean>(false)
  const [copied, setCopied] = useState<boolean>(false)

  const handleCopy = () => {
    navigator.clipboard.writeText(window.location.href)
    setCopied(true)
    setTimeout(() => setCopied(false), 10 * 60 * 1000) // Reset copied state after 10 minutes
  }

  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'common')
  const pathname = usePathname()
  const pathSegments = pathname!.split('/')

  // Choose the appropriate segment based on the locale
  let targetSegment = pathSegments.length >= 2 ? pathSegments[1] : ''

  if (locale === fallbackLng) {
    // If locale is fallbackLng, use the second segment
    targetSegment = pathSegments.length >= 2 ? pathSegments[1] : ''
  } else if (locale === secondLng) {
    // If locale is secondLng, use the third segment
    targetSegment = pathSegments.length >= 3 ? pathSegments[2] : ''
  }

  return (
    <div className="m-4 mt-8 flex flex-col items-center justify-center pt-4 sm:flex-row">
      <div className="mb-4 sm:mb-0">
        <p className="text-highlighted dark:text-darkmode-highlighted mr-3 px-4 font-bold text-primary-500 sm:border-r-2">
          {t('share')}
        </p>
      </div>
      <div>
        <ul className={`grid grid-cols-4 gap-4 ${className}`}>
          <li className="ml-4 inline-block">
            <SocialIcon
              kind="facebook"
              size={5}
              aria-label={t('facebookshare')}
              href={`https://facebook.com/sharer/sharer.php?u=${siteMetadata.siteUrl}/${locale}/${targetSegment}/${slug}`}
            />
          </li>
          <li className="ml-4 inline-block">
            <SocialIcon
              kind="twitter"
              size={5}
              aria-label={t('twittershare')}
              href={`https://twitter.com/intent/tweet/?url=${siteMetadata.siteUrl}/${locale}/${targetSegment}/${slug}&text=${title}`}
            />
          </li>
          <li className="ml-4 inline-block">
            <SocialIcon
              kind="threads"
              size={5}
              aria-label={t('threadsshare')}
              href={`https://threads.net/intent/post?text=${siteMetadata.siteUrl}/${locale}/${targetSegment}/${slug}`}
            />
          </li>
          <li className="ml-4 inline-block">
            <SocialIcon
              kind="linkedin"
              size={5}
              aria-label={t('linkedinshare')}
              href={`https://www.linkedin.com/shareArticle?mini=true&url=${siteMetadata.siteUrl}/${locale}/${targetSegment}/${slug}&title=${title}&summary=${description}&source=${siteMetadata.siteUrl}`}
            />
          </li>
          <li className="ml-4 inline-block">
            <SocialIcon
              kind="reddit"
              size={5}
              aria-label={t('redditshare')}
              href={`https://www.reddit.com/submit?url=${siteMetadata.siteUrl}/${locale}/${targetSegment}/${slug}&title=${title}`}
            />
          </li>
          <li className="ml-4 inline-block">
            <SocialIcon
              kind="whatsapp"
              size={5}
              aria-label={t('whatsappshare')}
              href={`https://wa.me/?text=${siteMetadata.siteUrl}/${locale}/${targetSegment}/${slug}&text=${title}`}
            />
          </li>
          <li className="ml-4 inline-block">
            <SocialIcon
              kind="telegram"
              size={5}
              aria-label={t('telegramshare')}
              href={`https://telegram.me/share/url?url=${siteMetadata.siteUrl}/${locale}/${targetSegment}/${slug}&text=${title}`}
            />
          </li>
          <li className="relative ml-4 inline-block">
            <button
              onMouseEnter={() => setShowMenu(true)}
              onMouseLeave={() => setShowMenu(false)}
              onClick={handleCopy}
              className="fill-current text-gray-700 outline-none hover:text-primary-500 focus:outline-none dark:text-gray-200 dark:hover:text-primary-400"
            >
              <svg height="24" viewBox="0 0 24 24" width="24">
                <path d="M0 0h24v24H0z" fill="none" />
                <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z" />
              </svg>
            </button>
            {showMenu && (
              <div className="absolute right-0 top-8 w-32 rounded-md bg-white p-2 text-center shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800">
                <p className={`${copied ? 'text-primary-500 dark:text-primary-400' : ''}`}>
                  {copied ? t('urlcopied') : t('copyurl')}
                </p>
              </div>
            )}
          </li>
        </ul>
      </div>
    </div>
  )
}

export default Share

================
File: components/sidetoc/Button.tsx
================
import { ArrowRightIcon } from './icon'
import useSidebarStore from './store'

const Button = () => {
  const { sidebarOpen, toggleSidebar } = useSidebarStore()

  return (
    <div className="fixed bottom-8 left-6 z-50">
      <button
        onClick={toggleSidebar}
        className="rounded-full bg-gray-200 p-2 text-gray-500 opacity-100 transition-colors hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-400 dark:hover:bg-gray-600"
      >
        <ArrowRightIcon
          className={`h-5 w-5 transform transition-transform ${sidebarOpen ? 'rotate-180' : ''}`}
        />
      </button>
    </div>
  )
}

export default Button

================
File: components/sidetoc/icon.tsx
================
import { SVGProps } from 'react'

export function ArrowRightIcon(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...svgProps}
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="m12 5 7 7-7 7" />
    </svg>
  )
}

================
File: components/sidetoc/index.tsx
================
'use client'

import { useRef } from 'react'
import { useOuterClick } from '../util/useOuterClick'
import useSidebarStore from './store'
import { Toc } from 'pliny/mdx-plugins'
import TocBody from './TocBody'
import Button from './Button'

interface SidetocProps {
  toc: Toc
}

const Sidetoc = ({ toc }: SidetocProps) => {
  const { closeSidebar } = useSidebarStore()
  const menubarRef = useRef<HTMLDivElement>(null)

  useOuterClick(menubarRef, closeSidebar)

  return (
    <div ref={menubarRef}>
      <TocBody toc={toc} />
      <Button />
    </div>
  )
}

export default Sidetoc

================
File: components/sidetoc/store.ts
================
import { create } from 'zustand'

interface SidebarState {
  sidebarOpen: boolean
  toggleSidebar: () => void
  closeSidebar: () => void
}

const useSidebarStore = create<SidebarState>((set) => ({
  sidebarOpen: false,
  toggleSidebar: () => set((state) => ({ sidebarOpen: !state.sidebarOpen })),
  closeSidebar: () => set({ sidebarOpen: false }),
}))

export default useSidebarStore

================
File: components/sidetoc/TocBody.tsx
================
'use client'

import TOCInline from 'pliny/ui/TOCInline'
import { useTranslation } from 'app/[locale]/i18n/client'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { useParams } from 'next/navigation'
import useSidebarStore from './store'
import { Toc, TocItem as OriginalTocItem } from 'pliny/mdx-plugins/remark-toc-headings'

interface TocBodyProps {
  toc: Toc
}

interface TocItem extends OriginalTocItem {
  children?: TocItem[]
}

const filterToc = (toc: TocItem[]): TocItem[] => {
  return toc.map((item) => {
    const modifiedValue = item.url.replace(/-\d+$/, '')

    return {
      ...item,
      url: modifiedValue,
    }
  })
}

const TocBody = ({ toc }: TocBodyProps) => {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'common')
  const { sidebarOpen } = useSidebarStore()

  if (!sidebarOpen) {
    return null
  }

  const filteredToc = filterToc(toc as TocItem[])

  return (
    <div className="fixed left-0 top-0 z-50 h-screen md:flex">
      <div className="sticky left-0 top-0 z-50 flex h-screen w-64 flex-col overflow-y-auto bg-gray-100 px-2 py-4 dark:bg-gray-800">
        <div className="mb-20 mt-20">
          <div className="text-xl font-bold text-heading-400">{t('sidetoc')}</div>
          <div className="my-auto mt-5 overflow-y-auto">
            <TOCInline
              toc={filteredToc}
              ulClassName="space-y-2 overflow-y-auto my-auto text-primary-500"
              liClassName="pl-3 hover:text-heading-400"
            />
          </div>
        </div>
      </div>
    </div>
  )
}

export default TocBody

================
File: components/social-icons/icons.tsx
================
import { SVGProps } from 'react'

// Icons taken from: https://simpleicons.org/
// To add a new icon, add a new function here and add it to components in social-icons/index.tsx

export function Facebook(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg viewBox="0 0 24 24" {...svgProps}>
      <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"></path>
    </svg>
  )
}

export function Github(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg viewBox="0 0 24 24" {...svgProps}>
      <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"></path>
    </svg>
  )
}

export function Linkedin(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg viewBox="0 0 24 24" {...svgProps}>
      <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433a2.062 2.062 0 01-2.063-2.065 2.064 2.064 0 112.063 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"></path>
    </svg>
  )
}

export function Mail(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg viewBox="0 0 20 20" {...svgProps}>
      <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"></path>
      <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
    </svg>
  )
}

export function Twitter(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg viewBox="0 0 24 24" {...svgProps}>
      <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"></path>
    </svg>
  )
}

export function X(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg viewBox="0 0 24 24" {...svgProps}>
      <title>X</title>
      <path d="M18.901 1.153h3.68l-8.04 9.19L24 22.846h-7.406l-5.8-7.584-6.638 7.584H.474l8.6-9.83L0 1.154h7.594l5.243 6.932ZM17.61 20.644h2.039L6.486 3.24H4.298Z" />
    </svg>
  )
}

export function Youtube(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg viewBox="0 0 24 24" {...svgProps}>
      <path d="M23.499 6.203a3.008 3.008 0 00-2.089-2.089c-1.87-.501-9.4-.501-9.4-.501s-7.509-.01-9.399.501a3.008 3.008 0 00-2.088 2.09A31.258 31.26 0 000 12.01a31.258 31.26 0 00.523 5.785 3.008 3.008 0 002.088 2.089c1.869.502 9.4.502 9.4.502s7.508 0 9.399-.502a3.008 3.008 0 002.089-2.09 31.258 31.26 0 00.5-5.784 31.258 31.26 0 00-.5-5.808zm-13.891 9.4V8.407l6.266 3.604z"></path>
    </svg>
  )
}

export function Mastodon(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg viewBox="0 0 24 24" {...svgProps}>
      <path d="M23.268 5.313c-.35-2.578-2.617-4.61-5.304-5.004C17.51.242 15.792 0 11.813 0h-.03c-3.98 0-4.835.242-5.288.309C3.882.692 1.496 2.518.917 5.127.64 6.412.61 7.837.661 9.143c.074 1.874.088 3.745.26 5.611.118 1.24.325 2.47.62 3.68.55 2.237 2.777 4.098 4.96 4.857 2.336.792 4.849.923 7.256.38.265-.061.527-.132.786-.213.585-.184 1.27-.39 1.774-.753a.057.057 0 0 0 .023-.043v-1.809a.052.052 0 0 0-.02-.041.053.053 0 0 0-.046-.01 20.282 20.282 0 0 1-4.709.545c-2.73 0-3.463-1.284-3.674-1.818a5.593 5.593 0 0 1-.319-1.433.053.053 0 0 1 .066-.054c1.517.363 3.072.546 4.632.546.376 0 .75 0 1.125-.01 1.57-.044 3.224-.124 4.768-.422.038-.008.077-.015.11-.024 2.435-.464 4.753-1.92 4.989-5.604.008-.145.03-1.52.03-1.67.002-.512.167-3.63-.024-5.545zm-3.748 9.195h-2.561V8.29c0-1.309-.55-1.976-1.67-1.976-1.23 0-1.846.79-1.846 2.35v3.403h-2.546V8.663c0-1.56-.617-2.35-1.848-2.35-1.112 0-1.668.668-1.67 1.977v6.218H4.822V8.102c0-1.31.337-2.35 1.011-3.12.696-.77 1.608-1.164 2.74-1.164 1.311 0 2.302.5 2.962 1.498l.638 1.06.638-1.06c.66-.999 1.65-1.498 2.96-1.498 1.13 0 2.043.395 2.74 1.164.675.77 1.012 1.81 1.012 3.12z" />
    </svg>
  )
}

export function Whatsapp(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg viewBox="0 0 24 24" {...svgProps}>
      <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z" />
    </svg>
  )
}

export function Telegram(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg viewBox="0 0 24 24" {...svgProps}>
      <path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z" />
    </svg>
  )
}

export function Threads(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg viewBox="0 0 24 24" {...svgProps}>
      <path d="M12.186 24h-.007c-3.581-.024-6.334-1.205-8.184-3.509C2.35 18.44 1.5 15.586 1.472 12.01v-.017c.03-3.579.879-6.43 2.525-8.482C5.845 1.205 8.6.024 12.18 0h.014c2.746.02 5.043.725 6.826 2.098 1.677 1.29 2.858 3.13 3.509 5.467l-2.04.569c-1.104-3.96-3.898-5.984-8.304-6.015-2.91.022-5.11.936-6.54 2.717C4.307 6.504 3.616 8.914 3.589 12c.027 3.086.718 5.496 2.057 7.164 1.43 1.783 3.631 2.698 6.54 2.717 2.623-.02 4.358-.631 5.8-2.045 1.647-1.613 1.618-3.593 1.09-4.798-.31-.71-.873-1.3-1.634-1.75-.192 1.352-.622 2.446-1.284 3.272-.886 1.102-2.14 1.704-3.73 1.79-1.202.065-2.361-.218-3.259-.801-1.063-.689-1.685-1.74-1.752-2.964-.065-1.19.408-2.285 1.33-3.082.88-.76 2.119-1.207 3.583-1.291a13.853 13.853 0 0 1 3.02.142c-.126-.742-.375-1.332-.75-1.757-.513-.586-1.308-.883-2.359-.89h-.029c-.844 0-1.992.232-2.721 1.32L7.734 7.847c.98-1.454 2.568-2.256 4.478-2.256h.044c3.194.02 5.097 1.975 5.287 5.388.108.046.216.094.321.142 1.49.7 2.58 1.761 3.154 3.07.797 1.82.871 4.79-1.548 7.158-1.85 1.81-4.094 2.628-7.277 2.65Zm1.003-11.69c-.242 0-.487.007-.739.021-1.836.103-2.98.946-2.916 2.143.067 1.256 1.452 1.839 2.784 1.767 1.224-.065 2.818-.543 3.086-3.71a10.5 10.5 0 0 0-2.215-.221z" />
    </svg>
  )
}

export function Instagram(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg viewBox="0 0 24 24" {...svgProps}>
      <path d="M12 0C8.74 0 8.333.015 7.053.072 5.775.132 4.905.333 4.14.63c-.789.306-1.459.717-2.126 1.384S.935 3.35.63 4.14C.333 4.905.131 5.775.072 7.053.012 8.333 0 8.74 0 12s.015 3.667.072 4.947c.06 1.277.261 2.148.558 2.913.306.788.717 1.459 1.384 2.126.667.666 1.336 1.079 2.126 1.384.766.296 1.636.499 2.913.558C8.333 23.988 8.74 24 12 24s3.667-.015 4.947-.072c1.277-.06 2.148-.262 2.913-.558.788-.306 1.459-.718 2.126-1.384.666-.667 1.079-1.335 1.384-2.126.296-.765.499-1.636.558-2.913.06-1.28.072-1.687.072-4.947s-.015-3.667-.072-4.947c-.06-1.277-.262-2.149-.558-2.913-.306-.789-.718-1.459-1.384-2.126C21.319 1.347 20.651.935 19.86.63c-.765-.297-1.636-.499-2.913-.558C15.667.012 15.26 0 12 0zm0 2.16c3.203 0 3.585.016 4.85.071 1.17.055 1.805.249 2.227.415.562.217.96.477 1.382.896.419.42.679.819.896 1.381.164.422.36 1.057.413 2.227.057 1.266.07 1.646.07 4.85s-.015 3.585-.074 4.85c-.061 1.17-.256 1.805-.421 2.227-.224.562-.479.96-.899 1.382-.419.419-.824.679-1.38.896-.42.164-1.065.36-2.235.413-1.274.057-1.649.07-4.859.07-3.211 0-3.586-.015-4.859-.074-1.171-.061-1.816-.256-2.236-.421-.569-.224-.96-.479-1.379-.899-.421-.419-.69-.824-.9-1.38-.165-.42-.359-1.065-.42-2.235-.045-1.26-.061-1.649-.061-4.844 0-3.196.016-3.586.061-4.861.061-1.17.255-1.814.42-2.234.21-.57.479-.96.9-1.381.419-.419.81-.689 1.379-.898.42-.166 1.051-.361 2.221-.421 1.275-.045 1.65-.06 4.859-.06l.045.03zm0 3.678c-3.405 0-6.162 2.76-6.162 6.162 0 3.405 2.76 6.162 6.162 6.162 3.405 0 6.162-2.76 6.162-6.162 0-3.405-2.76-6.162-6.162-6.162zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm7.846-10.405c0 .795-.646 1.44-1.44 1.44-.795 0-1.44-.646-1.44-1.44 0-.794.646-1.439 1.44-1.439.793-.001 1.44.645 1.44 1.439z" />
    </svg>
  )
}

export function Reddit(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg viewBox="0 0 24 24" {...svgProps}>
      <path d="M12 0C5.373 0 0 5.373 0 12c0 3.314 1.343 6.314 3.515 8.485l-2.286 2.286C.775 23.225 1.097 24 1.738 24H12c6.627 0 12-5.373 12-12S18.627 0 12 0Zm4.388 3.199c1.104 0 1.999.895 1.999 1.999 0 1.105-.895 2-1.999 2-.946 0-1.739-.657-1.947-1.539v.002c-1.147.162-2.032 1.15-2.032 2.341v.007c1.776.067 3.4.567 4.686 1.363.473-.363 1.064-.58 1.707-.58 1.547 0 2.802 1.254 2.802 2.802 0 1.117-.655 2.081-1.601 2.531-.088 3.256-3.637 5.876-7.997 5.876-4.361 0-7.905-2.617-7.998-5.87-.954-.447-1.614-1.415-1.614-2.538 0-1.548 1.255-2.802 2.803-2.802.645 0 1.239.218 1.712.585 1.275-.79 2.881-1.291 4.64-1.365v-.01c0-1.663 1.263-3.034 2.88-3.207.188-.911.993-1.595 1.959-1.595Zm-8.085 8.376c-.784 0-1.459.78-1.506 1.797-.047 1.016.64 1.429 1.426 1.429.786 0 1.371-.369 1.418-1.385.047-1.017-.553-1.841-1.338-1.841Zm7.406 0c-.786 0-1.385.824-1.338 1.841.047 1.017.634 1.385 1.418 1.385.785 0 1.473-.413 1.426-1.429-.046-1.017-.721-1.797-1.506-1.797Zm-3.703 4.013c-.974 0-1.907.048-2.77.135-.147.015-.241.168-.183.305.483 1.154 1.622 1.964 2.953 1.964 1.33 0 2.47-.81 2.953-1.964.057-.137-.037-.29-.184-.305-.863-.087-1.795-.135-2.769-.135Z" />
    </svg>
  )
}

================
File: components/social-icons/index.tsx
================
import {
  Mail,
  Github,
  Facebook,
  Youtube,
  Linkedin,
  Twitter,
  X,
  Mastodon,
  Whatsapp,
  Telegram,
  Threads,
  Instagram,
  Reddit,
} from './icons'
import siteMetadata from '@/data/siteMetadata'

const components = {
  mail: Mail,
  github: Github,
  facebook: Facebook,
  youtube: Youtube,
  linkedin: Linkedin,
  twitter: Twitter,
  x: X,
  mastodon: Mastodon,
  whatsapp: Whatsapp,
  telegram: Telegram,
  threads: Threads,
  instagram: Instagram,
  reddit: Reddit,
}

type SocialIconProps = {
  kind: keyof typeof components
  href?: string | undefined
  size?: number
}

const SocialIcon = ({ kind, href, size = 8 }: SocialIconProps) => {
  const SocialSvg = components[kind]

  return (
    <>
      {kind === 'mail' && !href && siteMetadata.formspree === true ? (
        <>
          <span className="sr-only">{kind}</span>
          <SocialSvg
            className={`cursor-pointer fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-${size} w-${size}`}
          />
        </>
      ) : (
        <a
          className="text-sm text-gray-500 transition hover:text-gray-600"
          target="_blank"
          rel="noopener noreferrer"
          href={href}
        >
          <span className="sr-only">{kind}</span>
          <SocialSvg
            className={`fill-current text-gray-700 hover:text-primary-500 dark:text-gray-200 dark:hover:text-primary-400 h-${size} w-${size}`}
          />
        </a>
      )}
    </>
  )
}

export default SocialIcon

================
File: components/tag/index.tsx
================
'use client'

import { useCallback } from 'react'
import { useParams } from 'next/navigation'
import Link from 'next/link'
import { useTagStore } from '../util/useTagStore'
import { LocaleTypes } from 'app/[locale]/i18n/settings'

interface Props {
  text: string
}

const Tag = ({ text }: Props) => {
  const locale = useParams()?.locale as LocaleTypes
  const { setSelectedTag } = useTagStore()

  const handleClick = useCallback(
    (e) => {
      e.preventDefault() // Prevent immediate navigation
      setSelectedTag(text) // Set the tag first

      // Navigate after a slight delay to ensure state updates
      setTimeout(() => {
        window.location.href = `/${locale}/blog` // Manually navigate
      }, 100) // Adjust the delay as needed
    },
    [text, setSelectedTag, locale]
  )

  return (
    <span
      onClick={handleClick}
      className="mr-3 cursor-pointer text-sm font-medium uppercase text-primary-500 hover:text-primary-600 dark:hover:text-primary-400"
    >
      {text.split(' ').join('-')}
    </span>
  )
}

export default Tag

================
File: components/theme/icons/index.tsx
================
import { SVGProps } from 'react'
export function Sun(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg {...svgProps} viewBox="0 0 20 20" fill="currentColor">
      <path
        fillRule="evenodd"
        d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
        clipRule="evenodd"
      />
    </svg>
  )
}

export function Moon(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg {...svgProps} viewBox="0 0 20 20" fill="currentColor">
      <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
    </svg>
  )
}

export function Monitor(svgProps: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...svgProps}
      viewBox="0 0 20 20"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect x="3" y="3" width="14" height="10" rx="2" ry="2"></rect>
      <line x1="7" y1="17" x2="13" y2="17"></line>
      <line x1="10" y1="13" x2="10" y2="17"></line>
    </svg>
  )
}

================
File: components/theme/DarkModeSwitch.tsx
================
import * as React from 'react'
import { useSpring, animated } from 'react-spring'

export const defaultProperties = {
  dark: {
    circle: {
      r: 9,
    },
    mask: {
      cx: '50%',
      cy: '23%',
    },
    svg: {
      transform: 'rotate(40deg)',
    },
    lines: {
      opacity: 0,
    },
  },
  light: {
    circle: {
      r: 5,
    },
    mask: {
      cx: '100%',
      cy: '0%',
    },
    svg: {
      transform: 'rotate(90deg)',
    },
    lines: {
      opacity: 1,
    },
  },
  springConfig: { mass: 4, tension: 250, friction: 35 },
}

let REACT_TOGGLE_DARK_MODE_GLOBAL_ID = 0

type SVGProps = Omit<React.HTMLAttributes<HTMLOrSVGElement>, 'onChange'>
export interface Props extends SVGProps {
  onChange: (checked: boolean) => void
  checked: boolean
  style?: React.CSSProperties
  size?: number | string
  animationProperties?: typeof defaultProperties
  moonColor?: string
  sunColor?: string
}

export const DarkModeSwitch: React.FC<Props> = ({
  onChange,
  checked = false,
  size = 24,
  animationProperties = defaultProperties,
  moonColor = 'white',
  sunColor = 'black',
  style,
  ...rest
}) => {
  const [id, setId] = React.useState(0)

  React.useEffect(() => {
    REACT_TOGGLE_DARK_MODE_GLOBAL_ID += 1
    setId(REACT_TOGGLE_DARK_MODE_GLOBAL_ID)
  }, [setId])

  const properties = React.useMemo(() => {
    if (animationProperties !== defaultProperties) {
      return Object.assign(defaultProperties, animationProperties)
    }

    return animationProperties
  }, [animationProperties])

  const { circle, svg, lines, mask } = properties[checked ? 'dark' : 'light']

  const svgContainerProps = useSpring({
    ...svg,
    config: animationProperties.springConfig,
  })
  const centerCircleProps = useSpring({
    ...circle,
    config: animationProperties.springConfig,
  })
  const maskedCircleProps = useSpring({
    ...mask,
    config: animationProperties.springConfig,
  })
  const linesProps = useSpring({
    ...lines,
    config: animationProperties.springConfig,
  })

  const toggle = () => onChange(!checked)

  const uniqueMaskId = `circle-mask-${id}`

  return (
    <animated.div style={{ display: 'flex' }}>
      <animated.svg
        xmlns="http://www.w3.org/2000/svg"
        width={size}
        height={size}
        viewBox="0 0 24 24"
        color={checked ? moonColor : sunColor}
        fill="none"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
        stroke="currentColor"
        onClick={toggle}
        style={{
          cursor: 'pointer',
          ...svgContainerProps,
          ...style,
        }}
        {...rest}
      >
        <mask id={uniqueMaskId}>
          <rect x="0" y="0" width="100%" height="100%" fill="white" />
          <animated.circle
            // @ts-ignore
            style={maskedCircleProps}
            r="9"
            fill="black"
          />
        </mask>

        <animated.circle
          cx="12"
          cy="12"
          fill={checked ? moonColor : sunColor}
          // @ts-ignore
          style={centerCircleProps}
          mask={`url(#${uniqueMaskId})`}
        />
        <animated.g stroke="currentColor" style={linesProps}>
          <line x1="12" y1="1" x2="12" y2="3" />
          <line x1="12" y1="21" x2="12" y2="23" />
          <line x1="4.22" y1="4.22" x2="5.64" y2="5.64" />
          <line x1="18.36" y1="18.36" x2="19.78" y2="19.78" />
          <line x1="1" y1="12" x2="3" y2="12" />
          <line x1="21" y1="12" x2="23" y2="12" />
          <line x1="4.22" y1="19.78" x2="5.64" y2="18.36" />
          <line x1="18.36" y1="5.64" x2="19.78" y2="4.22" />
        </animated.g>
      </animated.svg>
    </animated.div>
  )
}

================
File: components/theme/ThemeContext.tsx
================
'use client'

import React, { createContext, useState, useContext, useEffect } from 'react'

interface ThemeContextProps {
  theme: string
  setTheme: (theme: string) => void
  mounted: boolean
}

const ThemeContext = createContext<ThemeContextProps | undefined>(undefined)

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [theme, setTheme] = useState<string>('system')
  const [mounted, setMounted] = useState<boolean>(false)

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme') || 'system'
    setTheme(savedTheme)
    setMounted(true)
  }, [])

  useEffect(() => {
    localStorage.setItem('theme', theme)
    if (
      theme === 'dark' ||
      (theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
  }, [theme])

  return (
    <ThemeContext.Provider value={{ theme, setTheme, mounted }}>{children}</ThemeContext.Provider>
  )
}

export const useTheme = (): ThemeContextProps => {
  const context = useContext(ThemeContext)
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider')
  }
  return context
}

================
File: components/theme/ThemeSwitch.tsx
================
'use client'

import { Fragment, useEffect, useRef, useState } from 'react'
import {
  Menu,
  MenuButton,
  MenuItem,
  MenuItems,
  Radio,
  RadioGroup,
  Transition,
} from '@headlessui/react'
import { DarkModeSwitch } from './DarkModeSwitch'
import { Monitor, Moon, Sun } from './icons'
import { useTheme } from './ThemeContext'
import { useOuterClick } from '../util/useOuterClick'
import { useParams } from 'next/navigation'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { useTranslation } from 'app/[locale]/i18n/client'

const ThemeSwitch = () => {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, 'common')
  const { theme, setTheme, mounted } = useTheme()
  const [menuOpen, setMenuOpen] = useState<boolean>(false)
  const [darkModeChecked, setDarkModeChecked] = useState<boolean>(theme === 'dark')
  const menubarRef = useRef<HTMLDivElement>(null)

  useOuterClick(menubarRef, () => setMenuOpen(false))

  useEffect(() => {
    setDarkModeChecked(theme === 'dark')
  }, [theme])

  const handleThemeChange = (newTheme: string) => {
    setTheme(newTheme)
    setMenuOpen(false)
  }

  if (!mounted) return null

  return (
    <div ref={menubarRef} className="mr-5">
      <Menu as="div" className="relative mt-1 inline-block text-left">
        <MenuButton aria-label={t('theme')}>
          <DarkModeSwitch
            checked={darkModeChecked}
            onChange={(isChecked) => setDarkModeChecked(isChecked)}
            onClick={() => setMenuOpen(!menuOpen)}
            size={24}
          />
        </MenuButton>
        <Transition
          show={menuOpen}
          as={Fragment}
          enter="transition-all ease-out duration-300"
          enterFrom="opacity-0 scale-95 translate-y-[-10px]"
          enterTo="opacity-100 scale-100 translate-y-0"
          leave="transition-all ease-in duration-200"
          leaveFrom="opacity-100 scale-100 translate-y-0"
          leaveTo="opacity-0 scale-95 translate-y-[10px]"
        >
          <MenuItems className="absolute right-0 z-50 mt-2 w-32 origin-top-right divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800">
            <RadioGroup value={theme} onChange={handleThemeChange}>
              <div className="p-1">
                <Radio value="light">
                  <MenuItem>
                    {({ focus }) => (
                      <button
                        onClick={() => handleThemeChange('light')}
                        className={`${
                          focus
                            ? 'bg-gray-100 dark:bg-gray-600'
                            : 'hover:bg-gray-100 dark:hover:bg-gray-600'
                        } group flex w-full items-center rounded-md px-2 py-2 text-sm hover:text-primary-500 dark:hover:text-primary-500`}
                      >
                        <Sun className="h-6 w-6" />
                        <span className="ml-2">{t('light')}</span>
                      </button>
                    )}
                  </MenuItem>
                </Radio>
                <Radio value="dark">
                  <MenuItem>
                    {({ focus }) => (
                      <button
                        onClick={() => handleThemeChange('dark')}
                        className={`${
                          focus
                            ? 'bg-gray-100 dark:bg-gray-600'
                            : 'hover:bg-gray-100 dark:hover:bg-gray-600'
                        } group flex w-full items-center rounded-md px-2 py-2 text-sm hover:text-primary-500 dark:hover:text-primary-500`}
                      >
                        <Moon className="h-6 w-6" />
                        <span className="ml-2">{t('dark')}</span>
                      </button>
                    )}
                  </MenuItem>
                </Radio>
                <Radio value="system">
                  <MenuItem>
                    {({ focus }) => (
                      <button
                        onClick={() => handleThemeChange('system')}
                        className={`${
                          focus
                            ? 'bg-gray-100 dark:bg-gray-600'
                            : 'hover:bg-gray-100 dark:hover:bg-gray-600'
                        } group flex w-full items-center rounded-md px-2 py-2 text-sm hover:text-primary-500 dark:hover:text-primary-500`}
                      >
                        <Monitor className="h-6 w-6" />
                        <span className="ml-2">{t('system')}</span>
                      </button>
                    )}
                  </MenuItem>
                </Radio>
              </div>
            </RadioGroup>
          </MenuItems>
        </Transition>
      </Menu>
    </div>
  )
}

export default ThemeSwitch

================
File: components/util/capitalizeFirstLetter.ts
================
export function capitalizeFirstLetter(str: string): string {
  return str.charAt(0).toUpperCase() + str.slice(1)
}

================
File: components/util/sortByDate.ts
================
export const sortByDate = (posts) => {
  if (!Array.isArray(posts)) {
    console.error('sortByDate: posts is not an array')
    return []
  }

  return posts.sort((a, b) => {
    if (!a.date && !b.date) {
      return 0
    }
    if (!a.date) {
      return 1
    }
    if (!b.date) {
      return -1
    }

    return new Date(b.date).getTime() - new Date(a.date).getTime()
  })
}

================
File: components/util/useOuterClick.ts
================
import { RefObject, useEffect } from 'react'

export function useOuterClick(dom: RefObject<HTMLElement>, cb: () => void): void {
  useEffect(() => {
    function handleClickOutside(event: MouseEvent): void {
      if (dom.current && !dom.current.contains(event.target as Node)) {
        cb()
      }
    }

    window.addEventListener('mousedown', handleClickOutside)

    return () => {
      window.removeEventListener('mousedown', handleClickOutside)
    }
  }, [dom, cb])
}

================
File: components/util/useTagStore.ts
================
import { create } from 'zustand'

interface TagStore {
  selectedTag: string
  setSelectedTag: (tag: string) => void
}

export const useTagStore = create<TagStore>((set) => ({
  selectedTag: '',
  setSelectedTag: (tag) => set({ selectedTag: tag }),
}))

================
File: components/LayoutWrapper.tsx
================
import { Inter } from 'next/font/google'
import SectionContainer from './SectionContainer'
import Footer from './navigation/Footer'
import { ReactNode } from 'react'
import Header from './navigation/Header'
import { useRouter } from 'next/router'

interface LayoutWrapperProps {
  children: ReactNode
}

const inter = Inter({
  subsets: ['latin'],
})

const LayoutWrapper = ({ children }: LayoutWrapperProps) => {
  const { locale } = useRouter() // 确保 locale 被定义

  return (
    <SectionContainer>
      <div className={`${inter.className} flex h-screen flex-col justify-between font-sans`}>
        <Header />
        <main className="mb-auto">{children}</main>
        <Footer locale={locale} /> // 使用 locale
      </div>
    </SectionContainer>
  )
}

export default LayoutWrapper

================
File: components/PageTitle.tsx
================
import { ReactNode } from 'react'

interface PageTitleProps {
  children: ReactNode
}

export default function PageTitle({ children }: PageTitleProps) {
  return (
    <h1 className="text-3xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 sm:text-4xl sm:leading-10 md:text-5xl md:leading-14">
      {children}
    </h1>
  )
}

================
File: components/SectionContainer.tsx
================
import { ReactNode } from 'react'

interface SectionContainerProps {
  children: ReactNode
}

export default function SectionContainer({ children }: SectionContainerProps) {
  return (
    <section className="mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-5xl xl:px-0">{children}</section>
  )
}

================
File: css/prism.css
================
/**
 * CSS Styles for code highlighting.
 * Feel free to customize token styles 
 * by copying from a prismjs compatible theme:
 * https://github.com/PrismJS/prism-themes
 */

/* Code title styles */
.remark-code-title {
  @apply rounded-t bg-gray-700 dark:bg-gray-800 px-5 py-3 font-mono text-sm font-bold text-gray-200;
}

.remark-code-title + div > pre {
  @apply mt-0 rounded-t-none;
}

/* Code block styles */
.code-highlight {
  @apply float-left min-w-full;
}

.code-line {
  @apply -mx-4 block border-l-4 border-transparent pl-4 pr-4;
}

.code-line.inserted {
  @apply bg-green-500 bg-opacity-20;
}

.code-line.deleted {
  @apply bg-red-500 bg-opacity-20;
}

.highlight-line {
  @apply -mx-4 border-l-4 border-primary-500 bg-gray-700 bg-opacity-50;
}

.line-number::before {
  @apply mr-4 -ml-2 inline-block w-4 text-right text-gray-400;
  content: attr(line);
}

/* Token styles */
/**
 * MIT License
 * Copyright (c) 2018 Sarah Drasner
 * Sarah Drasner's[@sdras] Night Owl
 * Ported by Sara vieria [@SaraVieira]
 * Added by Souvik Mandal [@SimpleIndian]
 */
.token.comment,
.token.prolog,
.token.cdata {
  color: rgb(99, 119, 119);
  font-style: italic;
}

.token.punctuation {
  color: rgb(199, 146, 234);
}

.namespace {
  color: rgb(178, 204, 214);
}

.token.deleted {
  color: rgba(239, 83, 80, 0.56);
  font-style: italic;
}

.token.symbol,
.token.property {
  color: rgb(128, 203, 196);
}

.token.tag,
.token.operator,
.token.keyword {
  color: rgb(127, 219, 202);
}

.token.boolean {
  color: rgb(255, 88, 116);
}

.token.number {
  color: rgb(247, 140, 108);
}

.token.constant,
.token.function,
.token.builtin,
.token.char {
  color: rgb(130, 170, 255);
}

.token.selector,
.token.doctype {
  color: rgb(199, 146, 234);
  font-style: italic;
}

.token.attr-name,
.token.inserted {
  color: rgb(173, 219, 103);
  font-style: italic;
}

.token.string,
.token.url,
.token.entity,
.language-css .token.string,
.style .token.string {
  color: rgb(173, 219, 103);
}

.token.class-name,
.token.atrule,
.token.attr-value {
  color: rgb(255, 203, 139);
}

.token.regex,
.token.important,
.token.variable {
  color: rgb(214, 222, 235);
}

.token.important,
.token.bold {
  font-weight: bold;
}

.token.italic {
  font-style: italic;
}

.token.table {
  display: inline;
}

.token.table {
  display: inline;
}

================
File: css/tailwind.css
================
@import 'waline.css';

@tailwind base;
@tailwind components;
@tailwind utilities;

.right-2 {
  right: 0.5rem;
}

.top-2 {
  top: .5rem;
}

.bg-gray-700 {
  --tw-bg-opacity: 1;
  background-color: rgb(55 65 81/var(--tw-bg-opacity));
}

.text-gray-300 {
  --tw-text-opacity: 1;
  color: rgb(209 213 219/var(--tw-text-opacity));
}

.border-green-400 {
  --tw-border-opacity: 1;
  border-color: rgb(74 222 128 / var(--tw-border-opacity));
}

.text-green-400 {
  --tw-text-opacity: 1;
  color: rgb(74 222 128 / var(--tw-text-opacity));
}

.task-list-item::before {
  @apply hidden;
}

.task-list-item {
  @apply list-none;
}

.footnotes {
  @apply mt-12 border-t border-gray-200 pt-8 dark:border-gray-700;
}

.data-footnote-backref {
  @apply no-underline;
}

.csl-entry {
  @apply my-5;
}

.overflow-y-auto::-webkit-scrollbar {
  width: 2px;
}

.overflow-y-auto::-webkit-scrollbar-track {
  background-color: #f1f1f1;
}

.overflow-y-auto::-webkit-scrollbar-thumb {
  background-color: #9c9c9c;
  border-radius: 5px;
}

/* https://stackoverflow.com/questions/61083813/how-to-avoid-internal-autofill-selected-style-to-be-applied */
input:-webkit-autofill,
input:-webkit-autofill:focus {
  transition:
    background-color 600000s 0s,
    color 600000s 0s;
}

.katex-display {
  overflow: auto hidden;
}

.content-header-link {
  opacity: 0;
  margin-left: -24px;
  padding-right: 4px;
}

.content-header:hover .content-header-link,
.content-header-link:hover {
  opacity: 1;
}

.linkicon {
  display: inline-block;
  vertical-align: middle;
}

================
File: css/waline.css
================
#waline {
    --waline-theme-color: theme('colors.primary.500');
    --waline-active-color: theme('colors.primary.600');
}

#waline .wl-comment {
    @apply gap-x-4;
}

#waline .wl-panel {
    margin: 0;
}

#waline .wl-editor {
    width: calc(100% - 2.4rem);
}

================
File: data/authors/en/formless.mdx
================
---
default: true
name: formless
twitter: https://twitter.com/formlesswufeng
language: en
---

## About Me

I am formless, a seasoned market observer focused on analyzing global market trends and economic patterns. Over the years, I have been sharing my insights and observations with a growing audience of followers who are interested in understanding the complexities of the modern business environment. My goal is to help people better grasp market dynamics through in-depth analysis and unique perspectives.

## My Approach

I employ a data-driven and comprehensive analytical approach, covering a wide range of topics including:

- Macroeconomic trends
- Industry competitive landscapes
- Corporate strategies
- Organizational dynamics
- Marketing strategies
- Brand development
- Channel management
- Retail evolution
- Product innovation

I firmly believe in the power of interdisciplinary analysis to uncover hidden patterns and predict market changes. Through this method, I strive to provide decision-makers with unique perspectives to help them seize opportunities and make informed decisions in rapidly changing markets.

## Connect with Me

I am always eager to engage in thoughtful discussions and exchange ideas with market enthusiasts, industry professionals, and decision-makers. Feel free to connect with me through:

- 📧 Email: [wuxiaofengchn@gmail.com](mailto:wuxiaofengchn@gmail.com)
- 🐦 Twitter: [@formlesswufeng](https://twitter.com/formlesswufeng)

Whether you're seeking market insights, strategic perspectives, or just want to have an inspiring conversation about the future of business, I'm happy to share my observations and look forward to learning from your insights as well. Let's explore the endless possibilities of the market together and grow collectively.

================
File: data/authors/zh-CN/formless.mdx
================
---
default: true
name: formless
twitter: https://twitter.com/formlesswufeng
language: 'zh-CN'
---

## 关于我

我是formless，一位资深市场观察者，专注于分析全球市场趋势和经济模式。多年来，我一直与不断增长的关注者群体分享我的见解和观察，这些关注者都对理解现代商业环境的复杂性充满兴趣。我的目标是通过深入的分析和独特的视角，帮助人们更好地把握市场脉搏。

## 我的方法

我采用数据驱动和全面的分析方法，涵盖广泛的主题，包括：

- 宏观经济趋势
- 行业竞争格局
- 企业战略
- 组织动态
- 营销策略
- 品牌发展
- 渠道管理
- 零售演变
- 产品创新

我坚信跨学科分析的力量，能够揭示隐藏的模式并预测市场变化。通过这种方法，我致力于为决策者提供独特的视角，帮助他们在瞬息万变的市场中把握机遇，制定明智决策。

## 与我联系

我始终热衷于与市场爱好者、行业专业人士和决策者进行深思熟虑的讨论和交流想法。欢迎通过以下方式与我联系：

- 📧 邮箱：wuxiaofengchn@gmail.com
- 🐦 Twitter：[@formlesswufeng](https://twitter.com/formlesswufeng)

无论您是寻求市场洞察、战略观点，还是只想就商业未来进行一场激发灵感的对话，我都乐意分享我的观察，同时也期待学习您的见解。让我们一起探讨市场的无限可能，共同成长。

================
File: data/blog/en/China Economy Advancing Steadily.mdx
================
---
title: 'China Economy Advancing Steadily'
date: '2023-10-04'
language: en
tags: ['next-js', 'math', 'ols']
authors: ['formlesss']
draft: false
featured: true
summary: 'Facing new challenges, the Chinese government has taken a series of measures to maintain steady economic development, including strengthening macro-control, preventing risks in key areas, and promoting high-quality development. This article details these measures and their effects.'
---

## Abstract

In the face of new challenges, the Chinese government has implemented a series of measures to maintain steady economic development, including strengthening macro-control, preventing risks in key areas, and promoting high-quality development. This article details these measures and their effects.

## Main Content

### Stable Economic Fundamentals

China's economic fundamentals remain stable, with enormous market potential and strong economic resilience. The current economic operation is generally stable, with new productive forces developing steadily.

### Increased Macro-control Efforts

The government has intensified macro-control efforts, deepened reform and opening-up, expanded domestic demand, and optimized the economic structure to promote sustainable and healthy economic development.

### Preventing Risks in Key Areas

To address new situations and problems in economic operations, the government has taken active measures to prevent and resolve risks in key areas, ensuring economic security.

### Advancing High-quality Development

High-quality development is being solidly promoted, and social stability is maintained. Despite facing some new challenges, the overall economic situation is improving.

### Calm Perspective on Economic Situation

It's necessary to view the current economic situation comprehensively, objectively, and calmly, recognizing difficulties while maintaining confidence. Government and businesses should work together to address challenges.

### Focusing on Key Tasks

The government has clearly pointed out the need to focus on key tasks, effectively implement existing policies, intensify the introduction of new policies, and improve the targeting and effectiveness of policies.

### Coordination of Fiscal and Monetary Policies

Strengthening counter-cyclical adjustments, ensuring necessary fiscal expenditures, and doing a good job in maintaining basic needs at the grassroots level to ensure stable economic operation.

### Leveraging Government Investment

Leveraging government investment through the issuance and use of ultra-long-term special treasury bonds and local government special bonds to promote economic growth.

### Employment Protection Measures

Strengthening employment protection for key groups, especially fresh college graduates and migrant workers, to ensure social stability.

### Improving Social Security System

Enhancing assistance measures for low-income populations to ensure social equity and justice and improve people's living standards.

### Market Management and Material Supply

Ensuring stable supply of important materials, maintaining price stability, preserving market order, and boosting public confidence.

### Agricultural Production and Farmers' Income

Strengthening grain and agricultural production, focusing on increasing farmers' income, ensuring national food security, and promoting rural economic development.

### Policy Implementation and Organizational Building

Strictly implementing the central government's directives, promoting high-quality development; encouraging party members and cadres to take responsibility and innovate, contributing to economic and social development.

### Correct Personnel Selection and Appointment Orientation

Implementing correct personnel selection and appointment orientations, providing support and protection for those who take responsibility and work hard, motivating cadres to be proactive.

In conclusion, the Chinese government is addressing new situations and problems in the current economic operation through a series of policies and measures to maintain stable economic growth and social stability. China's economy is steadily advancing towards high-quality development.

================
File: data/blog/zh-CN/China Economy Advancing Steadily.mdx
================
---
title: '中国经济稳健前行：多举措应对新挑战'
date: '2023-10-04'
language: zh-CN
tags: ['中国经济', '宏观经济', '政策调控']
authors: ['formlesss']
draft: false
featured: true
summary: '面对新挑战，中国政府采取了一系列措施来保持经济的稳健发展，包括加大宏观调控力度、防范重点领域风险、推进高质量发展等。本文详细介绍了这些措施及其效果。'
---

## 摘要

面对新挑战，中国政府采取了一系列措施来保持经济的稳健发展，包括加大宏观调控力度、防范重点领域风险、推进高质量发展等。本文详细介绍了这些措施及其效果。

## 正文

### 经济基本面稳健

中国的经济基本面依然稳健，市场潜力巨大，经济韧性较强。当前经济运行总体平稳，新质生产力稳步发展。

### 宏观调控力度加大

政府加大了宏观调控力度，深化改革开放，扩大国内需求，并优化经济结构，以促进经济持续健康发展。

### 防范重点领域风险

为应对经济运行中的新情况和问题，政府已采取积极措施防范化解重点领域风险，确保经济安全。

### 推进高质量发展

高质量发展正在扎实推进，社会大局保持稳定。尽管面临一些新的挑战，但总体上经济形势向好。

### 冷静看待经济形势

需要全面客观冷静看待当前经济形势，正视困难，坚定信心。政府和企业应共同努力，应对挑战。

### 抓住重点任务

政府明确指出要抓住重点任务，有效落实存量政策，加力推出增量政策，提高政策的针对性和有效性。

### 财政货币政策协调

加大逆周期调节力度，保证必要的财政支出，做好基层“三保”工作，确保经济平稳运行。

### 政府投资带动作用

通过发行使用超长期特别国债和地方政府专项债，发挥政府投资带动作用，促进经济增长。

### 就业保障措施

加强重点人群的就业保障，特别是应届高校毕业生和农民工等群体，确保社会稳定。

### 社会保障体系完善

加强低收入人口救助帮扶措施，确保社会公平正义，提升人民生活水平。

### 市场管理与物资供应

确保重要物资供应稳定，维持价格平稳，维护市场秩序，增强民众信心。

### 农业生产与农民增收

强化粮食和农业生产，关注农民收入增长，确保国家粮食安全，促进农村经济发展。

### 政策执行与组织建设

严格执行党中央部署，推动高质量发展；鼓励党员干部勇担责任、勇于创新，为经济社会发展贡献力量。

### 正确的选人用人导向

实施正确的选人用人导向，为有担当、干事的人提供支持和保护，激励广大干部积极作为。

综合来看，中国政府正通过一系列政策和措施来应对当前经济运行中的新情况和问题，以保持经济的稳定增长和社会的稳定。中国经济正朝着高质量发展方向稳步前进。

================
File: data/headerNavLinks.ts
================
const headerNavLinks: { href?: string; title: string }[] = [
  { href: '/', title: 'Home' },
  { href: '/blog', title: 'Blog' },
  { href: '/tags', title: 'Tags' },
  { href: '/projects', title: 'Projects' },
]

export default headerNavLinks

================
File: data/localeMetadata.ts
================
import { Metadata as NextMetadata } from 'next'
import siteMetadata from '@/data/siteMetadata'

type LocaleMetadata = {
  [locale: string]: string
}

export const maintitle: LocaleMetadata = {
  en: 'Formless Insights | Macro · Industry · Company Analysis Without Limits',
  'zh-CN': '无垠智域 | 宏观·产业·公司的无界洞察',
}

export const maindescription: LocaleMetadata = {
  en: 'Comprehensive analysis integrating macroeconomics, industry dynamics, and corporate strategy. Through boundless insights, we uncover market trends and provide expansive business intelligence for decision-makers.',
  'zh-CN':
    '融合宏观经济、产业动态和公司战略的全面分析。通过无垠智域，揭示市场趋势，为决策者提供广阔的商业智慧。',
}

// 定义支持的语言类型
export type LocaleTypes = keyof typeof maintitle

// 辅助函数来安全地获取本地化字符串
function getLocalizedString(obj: LocaleMetadata, locale: LocaleTypes): string {
  return obj[locale] || obj['en'] // 默认使用英语
}

interface PageSEOProps {
  title: string
  description?: string
  image?: string
  params: { locale: LocaleTypes }
  [key: string]: any
}

export function genPageMetadata({
  title,
  description,
  image,
  params: { locale },
  ...rest
}: PageSEOProps): NextMetadata {
  const localizedTitle = getLocalizedString(maintitle, locale)
  const localizedDescription = description || getLocalizedString(maindescription, locale)

  return {
    title,
    description: localizedDescription,
    openGraph: {
      title: `${title} | ${localizedTitle}`,
      description: localizedDescription,
      url: './',
      siteName: localizedTitle,
      images: image ? [image] : [siteMetadata.socialBanner],
      locale: typeof locale === 'string' ? locale : undefined, // 修改此行
      type: 'website',
    },
    twitter: {
      title: `${title} | ${localizedTitle}`,
      card: 'summary_large_image',
      images: image ? [image] : [siteMetadata.socialBanner],
    },
    ...rest,
  }
}

================
File: data/logo.svg
================
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid meet" viewBox="344.5639097744361 330.27819548872174 111.73684210526318 91.21804511278197" width="53.87" height="43.61"><defs><path d="M453.3 331.28L453.3 359.85L388.64 418.5L388.64 388.42L453.3 331.28Z" id="aFZf6T5ED"></path><linearGradient id="gradientb2ThqnP5Op" gradientUnits="userSpaceOnUse" x1="420.97" y1="331.28" x2="420.97" y2="418.5"><stop style="stop-color: #06b6d4;stop-opacity: 1" offset="0%"></stop><stop style="stop-color: #67e8f9;stop-opacity: 1" offset="100%"></stop></linearGradient><path d="M410.23 331.28L410.23 359.85L345.56 418.5L345.56 388.42L410.23 331.28Z" id="a9fehgwfM"></path><linearGradient id="gradientk1wNV9Ostb" gradientUnits="userSpaceOnUse" x1="377.89" y1="331.28" x2="377.89" y2="418.5"><stop style="stop-color: #06b6d4;stop-opacity: 1" offset="0%"></stop><stop style="stop-color: #67e8f9;stop-opacity: 1" offset="100%"></stop></linearGradient></defs><g><g><use xlink:href="#aFZf6T5ED" opacity="1" fill="url(#gradientb2ThqnP5Op)"></use></g><g><use xlink:href="#a9fehgwfM" opacity="1" fill="url(#gradientk1wNV9Ostb)"></use></g></g></svg>

================
File: data/postsPerPage.ts
================
export const POSTS_PER_PAGE = 5

================
File: data/projectsData.ts
================
type Project = {
  title: string
  description: string
  imgSrc: string
  href: string
}

type ProjectsData = {
  [locale: string]: Project[]
}

const projectsData: ProjectsData = {
  en: [
    {
      title: 'China Economy Advancing Steadily: Multiple Measures to Address New Challenges',
      description: `Facing new challenges, the Chinese government has taken a series of measures to maintain steady economic development, including strengthening macro-control, preventing risks in key areas, and promoting high-quality development. This article details these measures and their effects.`,
      imgSrc: '/static/images/canada/mountains.jpg',
      href: '/blog/china-economy-advancing-steadily', // 确保路径正确
    },
    {
      title: 'China Economy Advancing Steadily: Multiple Measures to Address New Challenges',
      description: `Facing new challenges, the Chinese government has taken a series of measures to maintain steady economic development, including strengthening macro-control, preventing risks in key areas, and promoting high-quality development. This article details these measures and their effects.`,
      imgSrc: '/static/images/time-machine.jpg',
      href: '/blog/china-economy-advancing-steadily', // 确保路径一致
    },
  ],

  'zh-CN': [
    {
      title: '中国经济稳健前行：多举措应对新挑战',
      description: `面对新挑战，中国政府采取了一系列措施来保持经济的稳健发展，包括加大宏观调控力度、防范重点领域风险、推进高质量发展等。本文详细介绍了这些措施及其效果。`,
      imgSrc: '/static/images/canada/mountains.jpg',
      href: '/blog/china-economy-advancing-steadily', // 确保路径正确
    },
    {
      title: '中国经济稳健前行：多举措应对新挑战',
      description: `面对新挑战，中国政府采取了一系列措施来保持经济的稳健发展，包括加大宏观调控力度、防范重点领域风险、推进高质量发展等。本文详细介绍了这些措施及其效果。`,
      imgSrc: '/static/images/time-machine.jpg',
      href: '/blog/china-economy-advancing-steadily', // 确保路径一致
    },
  ],
}

export default projectsData

================
File: data/references-data.bib
================
@article{Nash1950,
  title={Equilibrium points in n-person games},
  author={Nash, John},
  journal={Proceedings of the national academy of sciences},
  volume={36},
  number={1},
  pages={48--49},
  year={1950},
  publisher={USA}
}

@article{Nash1951,
  title={Non-cooperative games},
  author={Nash, John},
  journal={Annals of mathematics},
  pages={286--295},
  year={1951},
  publisher={JSTOR}
}

@Manual{Macfarlane2006,
  url={https://pandoc.org/},
  title={Pandoc: a universal document converter},
  author={MacFarlane, John},
  year={2006}
}

@book{Xie2016,
  title={Bookdown: authoring books and technical documents with R markdown},
  author={Xie, Yihui},
  year={2016},
  publisher={CRC Press}
}

================
File: data/siteMetadata.js
================
/** @type {import("pliny/config").PlinyConfig } */
const siteMetadata = {
  title: 'Formless Insights | 宏观·产业·公司的无界洞察',
  author: 'formless',
  headerTitle: 'Formless Insights',
  description:
    '融合宏观经济、产业动态和公司战略的深度分析。通过跨维度洞察，揭示市场趋势，为决策者提供全方位的商业智慧。',
  keywords:
    'formless insights,宏观经济,产业分析,公司战略,市场趋势,跨维度研究,商业洞察,决策支持,全球视野',
  language: 'en',
  theme: 'system', // system, dark or light
  siteUrl: 'https://tailwind-nextjs-starter-blog-i18n.vercel.app',
  siteRepo: 'https://github.com/PxlSyl/tailwind-nextjs-starter-blog-i18n',
  siteLogo: '/static/images/logo.png',
  socialBanner: '/static/images/twitter-card.png',
  //mastodon: 'https://mastodon.social/@mastodonuser',
  //email: 'address@yoursite.com',
  //github: 'https://github.com',
  x: 'https://x.com/formlesswufeng',
  // twitter: 'https://twitter.com/Twitter',
  //facebook: 'https://facebook.com',
  //youtube: 'https://youtube.com',
  //linkedin: 'https://www.linkedin.com',
  threads: 'https://www.threads.net/@formlesswu',
  //instagram: 'https://www.instagram.com',
  locale: 'en',
  multiauthors: false,
  analytics: {
    // If you want to use an analytics provider you have to add it to the
    // content security policy in the `next.config.js` file.
    // supports Plausible, Simple Analytics, Umami, Posthog or Google Analytics.
    /*umamiAnalytics: {
      // We use an env variable for this site to avoid other users cloning our analytics ID
      umamiWebsiteId: process.env.NEXT_UMAMI_ID, // e.g. 123e4567-e89b-12d3-a456-426614174000
    },*/
    // plausibleAnalytics: {
    //   plausibleDataDomain: '', // e.g. tailwind-nextjs-starter-blog.vercel.app
    // },
    // simpleAnalytics: {},
    // posthogAnalytics: {
    //   posthogProjectApiKey: '', // e.g. 123e4567-e89b-12d3-a456-426614174000
    // },
    // googleAnalytics: {
    //   googleAnalyticsId: '', // e.g. G-XXXXXXX
    // },
  },
  newsletter: {
    // supports mailchimp, buttondown, convertkit, klaviyo, revue, emailoctopus
    // Please add your .env file and modify it according to your selection
    provider: 'buttondown',
  },
  iscomments: false,
  comments: {
    // If you want to use an analytics provider you have to add it to the
    // content security policy in the `next.config.js` file.
    // Select a provider and use the environment variables associated to it
    // https://vercel.com/docs/environment-variables
    provider: 'giscus', // supported providers: giscus, utterances, disqus
    giscusConfig: {
      // Visit the link below, and follow the steps in the 'configuration' section
      // https://giscus.app/
      repo: process.env.NEXT_PUBLIC_GISCUS_REPO,
      repositoryId: process.env.NEXT_PUBLIC_GISCUS_REPOSITORY_ID,
      category: process.env.NEXT_PUBLIC_GISCUS_CATEGORY,
      categoryId: process.env.NEXT_PUBLIC_GISCUS_CATEGORY_ID,
      mapping: 'pathname', // supported options: pathname, url, title
      reactions: '1', // Emoji reactions: 1 = enable / 0 = disable
      // Send discussion metadata periodically to the parent window: 1 = enable / 0 = disable
      metadata: '0',
      // theme example: light, dark, dark_dimmed, dark_high_contrast
      // transparent_dark, preferred_color_scheme, custom
      theme: 'light',
      // theme when dark mode
      darkTheme: 'transparent_dark',
      // If the theme option above is set to 'custom`
      // please provide a link below to your custom theme css file.
      // example: https://giscus.app/themes/custom_example.css
      themeURL: '',
      // This corresponds to the `data-lang="en"` in giscus's configurations
      lang: 'en',
    },
  },
  search: {
    provider: 'kbar', // kbar or algolia
    kbarConfig: {
      searchDocumentsPath: 'search.json', // path to load documents to search
    },
    // provider: 'algolia',
    // algoliaConfig: {
    //   // The application ID provided by Algolia
    //   appId: 'R2IYF7ETH7',
    //   // Public API key: it is safe to commit it
    //   apiKey: '599cec31baffa4868cae4e79f180729b',
    //   indexName: 'docsearch',
    // },
  },
  // formspree support :
  //if set to false, simple "mailto"
  // if set to true, get a free account there : https://formspree.io/ and go to read.me doc
  formspree: false,
  // waline support
  iswaline: false,
  walineServer: '',
}

module.exports = siteMetadata

================
File: layouts/home/LayoutHeader.tsx
================
import React from 'react'

interface LayoutHeaderProps {
  title: string
  description?: string
}

const LayoutHeader: React.FC<LayoutHeaderProps> = ({ title, description }) => {
  return (
    <div className="space-y-2 pb-8 pt-6 md:space-y-5">
      <h1 className="text-3xl font-extrabold leading-9 tracking-tight text-heading-400 dark:text-heading-400 sm:text-4xl sm:leading-10 md:text-6xl md:leading-14">
        {title}
      </h1>
      {description && (
        <p className="text-lg leading-7 text-gray-500 dark:text-gray-400">{description}</p>
      )}
    </div>
  )
}

export default LayoutHeader

================
File: layouts/home/PostList.tsx
================
import React from 'react'
import Link from '@/components/mdxcomponents/Link'
import Tag from '@/components/tag'
import { formatDate } from 'pliny/utils/formatDate'
import { LocaleTypes } from 'app/[locale]/i18n/settings'

interface Post {
  slug: string
  date: string
  title: string
  summary?: string | undefined
  tags: string[]
  language: string
  draft?: boolean
}

interface PostListProps {
  posts: Post[]
  locale: LocaleTypes
  t: (key: string) => string
  maxDisplay: number
}

const PostList: React.FC<PostListProps> = ({ posts, locale, t, maxDisplay }) => {
  return (
    <ul className="divide-y divide-gray-200 dark:divide-gray-700">
      {!posts.length && <li>{t('noposts')}</li>}
      {posts.slice(0, maxDisplay).map((post) => {
        const { slug, date, title, summary, tags } = post
        return (
          <li key={slug} className="py-12">
            <article>
              <div className="space-y-2 xl:grid xl:grid-cols-4 xl:items-baseline xl:space-y-0">
                <dl>
                  <dt className="sr-only">{t('pub')}</dt>
                  <dd className="text-base font-medium leading-6 text-gray-500 dark:text-gray-400">
                    <time dateTime={date}>{formatDate(date, locale)}</time>
                  </dd>
                </dl>
                <div className="space-y-5 xl:col-span-3">
                  <div className="space-y-6">
                    <div>
                      <h2 className="text-2xl font-bold leading-8 tracking-tight">
                        <Link
                          href={`/${locale}/blog/${slug}`}
                          className="text-gray-900 dark:text-gray-100"
                        >
                          {title}
                        </Link>
                      </h2>
                      <ul className="flex flex-wrap">
                        {tags.map((tag: string) => (
                          <li key={tag}>
                            <Tag text={tag} />
                          </li>
                        ))}
                      </ul>
                    </div>
                    <div className="prose max-w-none text-gray-500 dark:text-gray-400">
                      {summary!.length > 149 ? `${summary!.substring(0, 149)}...` : summary}
                    </div>
                  </div>
                  <div className="text-base font-medium leading-6">
                    <Link
                      href={`/${locale}/blog/${slug}`}
                      className="text-primary-500 hover:text-primary-600 dark:hover:text-primary-400"
                      aria-label={`${t('more')}"${title}"`}
                    >
                      {t('more')} &rarr;
                    </Link>
                  </div>
                </div>
              </div>
            </article>
          </li>
        )
      })}
    </ul>
  )
}

export default PostList

================
File: layouts/AuthorLayout.tsx
================
import { ReactNode } from 'react'
import type { Authors } from 'contentlayer/generated'
import SocialIcon from '@/components/social-icons'
import Image from '@/components/mdxcomponents/Image'

import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { createTranslation } from 'app/[locale]/i18n/server'

interface AuthorLayoutProps {
  children: ReactNode
  content: Omit<Authors, '_id' | '_raw' | 'body'>
  params: { locale: LocaleTypes }
}

export default async function AuthorLayout({
  children,
  content,
  params: { locale },
}: AuthorLayoutProps) {
  const { name, avatar, occupation, company, twitter, github } = content
  // Removed 'threads' from destructuring assignment
  const { t } = await createTranslation(locale, 'about')

  return (
    <>
      <div className="divide-y divide-gray-200 dark:divide-gray-700">
        <div className="space-y-2 pb-8 pt-6 md:space-y-5">
          <h1 className="text-3xl font-extrabold leading-9 tracking-tight text-heading-400 dark:text-heading-400 sm:text-4xl sm:leading-10 md:text-6xl md:leading-14">
            {t('about')}
          </h1>
        </div>
        <div className="items-start space-y-2 xl:grid xl:grid-cols-3 xl:gap-x-8 xl:space-y-0">
          <div className="flex flex-col items-center space-x-2 pt-8">
            {avatar && (
              <Image
                src={avatar}
                alt="avatar"
                title="avatar"
                width={192}
                height={192}
                className="h-48 w-48 rounded-full"
              />
            )}
            <h2 className="pb-2 pt-4 text-2xl font-bold leading-8 tracking-tight">{name}</h2>
            <div className="text-gray-500 dark:text-gray-400">{occupation}</div>
            <div className="text-gray-500 dark:text-gray-400">{company}</div>
            <div className="flex space-x-3 pt-6">
              <SocialIcon kind="x" href={twitter} />
            </div>
          </div>
          <div className="prose max-w-none pb-8 pt-8 dark:prose-invert xl:col-span-2">
            {children}
          </div>
        </div>
      </div>
    </>
  )
}

================
File: layouts/FeaturedLayout.tsx
================
import { createTranslation } from 'app/[locale]/i18n/server'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import PostList from './home/PostList'
import LayoutHeader from './home/LayoutHeader'

interface Post {
  slug: string
  date: string
  title: string
  summary?: string | undefined
  tags: string[]
  language: string
  draft?: boolean
  featured?: boolean
}

interface HomeProps {
  posts: Post[]
  params: { locale: LocaleTypes }
}

const MAX_DISPLAY = 2

export default async function FeaturedLayout({ posts, params: { locale } }: HomeProps) {
  const { t } = await createTranslation(locale, 'home')
  return (
    <>
      <div className="divide-y divide-gray-200 dark:divide-gray-700">
        <LayoutHeader title={t('featured')} />
        <PostList posts={posts} locale={locale} t={t} maxDisplay={MAX_DISPLAY} />
      </div>
    </>
  )
}

================
File: layouts/HomeLayout.tsx
================
import Link from '@/components/mdxcomponents/Link'
import siteMetadata from '@/data/siteMetadata'
// import NewsletterForm from '@/components/newletter/NewsletterForm' // 注释掉这行
import { createTranslation } from '../app/[locale]/i18n/server'
import { LocaleTypes } from '../app/[locale]/i18n/settings'
import PostList from './home/PostList'
import LayoutHeader from './home/LayoutHeader'

interface Post {
  slug: string
  date: string
  title: string
  summary?: string | undefined
  tags: string[]
  language: string
  draft?: boolean
}

interface HomeProps {
  posts: Post[]
  params: { locale: LocaleTypes }
}

const MAX_DISPLAY = 5

export default async function HomeLayout({ posts, params: { locale } }: HomeProps) {
  const { t } = await createTranslation(locale, 'home')
  return (
    <>
      <div className="divide-y divide-gray-200 dark:divide-gray-700">
        <LayoutHeader title={t('greeting')} description={t('description')} />
        <PostList posts={posts} locale={locale} t={t} maxDisplay={MAX_DISPLAY} />
      </div>
      {posts.length > MAX_DISPLAY && (
        <div className="flex justify-end text-base font-medium leading-6">
          <Link
            href={`/${locale}/blog`}
            className="text-primary-500 hover:text-primary-600 dark:hover:text-primary-400"
            aria-label={t('all')}
          >
            {t('all')} &rarr;
          </Link>
        </div>
      )}
      {/* 注释掉与 NewsletterForm 相关的代码 */}
      {/* {siteMetadata.newsletter?.provider && (
        <div className="flex items-center justify-center pt-4">
          <NewsletterForm />
        </div>
      )} */}
    </>
  )
}

================
File: layouts/ListLayout.tsx
================
'use client'

import { useState } from 'react'
import { useTagStore } from '@/components/util/useTagStore'
import { motion } from 'framer-motion'
import { formatDate } from 'pliny/utils/formatDate'
import { CoreContent } from 'pliny/utils/contentlayer'
import type { Blog } from 'contentlayer/generated'
import Link from '@/components/mdxcomponents/Link'
import { sortByDate } from '@/components/util/sortByDate'
import Pagination from './Pagination'
import tagData from 'app/[locale]/tag-data.json'
import { POSTS_PER_PAGE } from '@/data/postsPerPage'
import { useTranslation } from 'app/[locale]/i18n/client'
import { LocaleTypes } from 'app/[locale]/i18n/settings'

interface PaginationProps {
  totalPages: number
  currentPage: number
  params: { locale: LocaleTypes }
}

interface ListLayoutProps {
  params: { locale: LocaleTypes }
  posts: CoreContent<Blog>[]
  title: string
  initialDisplayPosts?: CoreContent<Blog>[]
  pagination?: PaginationProps
}

const container = {
  hidden: { opacity: 0 },
  show: {
    opacity: 1,
    transition: {
      staggerChildren: 0.2,
    },
  },
}

const item = {
  hidden: { opacity: 0, x: -25, y: 0 },
  show: { opacity: 1, x: 0, y: 0 },
}

export default function ListLayoutWithTags({ params: { locale }, posts, title }: ListLayoutProps) {
  const { t } = useTranslation(locale, 'home')
  const [currentPage, setCurrentPage] = useState(1)
  const postsPerPage = POSTS_PER_PAGE
  const sortedPosts = sortByDate(posts)
  const setSelectedTag = useTagStore((state) => state.setSelectedTag)

  const filteredPosts = useTagStore((state) => {
    if (state.selectedTag) {
      return sortedPosts.filter((post) => post.tags.includes(state.selectedTag))
    } else {
      return sortedPosts
    }
  })

  const totalPages = Math.ceil(filteredPosts.length / postsPerPage)
  const startIndex = (currentPage - 1) * postsPerPage
  const endIndex = startIndex + postsPerPage
  const displayPosts = filteredPosts.slice(startIndex, endIndex)

  const onPageChange = (page: number) => {
    setCurrentPage(page)
  }

  const handleTagClick = (tag: string) => {
    setSelectedTag(tag === useTagStore.getState().selectedTag ? '' : tag)
    setCurrentPage(1)
  }

  const tagCountMap = tagData[locale]

  const filteredTags = Object.keys(tagCountMap).map((postTag) => {
    return (
      <li key={postTag} className="my-3">
        <button
          onClick={() => handleTagClick(postTag)}
          aria-labelledby={`${t('poststagged')} ${postTag}`}
        >
          <h3
            className={`inline px-3 py-2 text-sm font-medium uppercase ${
              useTagStore.getState().selectedTag === postTag
                ? 'text-primary-500'
                : 'text-gray-500 hover:text-primary-500 dark:text-gray-300 dark:hover:text-primary-500'
            }`}
          >
            {' '}
            {postTag} ({tagCountMap[postTag]})
          </h3>
        </button>
      </li>
    )
  })

  return (
    <>
      <div>
        <div className="pb-6 pt-6">
          <h1 className="text-3xl font-extrabold leading-9 tracking-tight text-gray-900 dark:text-gray-100 sm:hidden sm:text-4xl sm:leading-10 md:text-6xl md:leading-14">
            {title}
          </h1>
        </div>
        <div className="flex sm:space-x-24">
          <div className="hidden h-full max-h-screen min-w-[280px] max-w-[280px] flex-wrap overflow-auto rounded bg-gray-50 pt-5 shadow-md dark:bg-gray-900/70 dark:shadow-gray-800/40 sm:flex">
            <div className="px-6 py-4">
              <button
                onClick={() => setSelectedTag('')}
                className={`${useTagStore.getState().selectedTag === '' ? 'text-heading-500 dark:text-heading-400' : 'text-gray-500 dark:text-gray-400'} font-bold uppercase`}
              >
                {t('all')}
              </button>
              <ul>{filteredTags}</ul>
            </div>
          </div>
          <div>
            <motion.ul variants={container} initial="hidden" animate="show">
              {displayPosts.map((post) => {
                const { slug, date, title, summary, tags, language } = post
                if (language === locale) {
                  return (
                    <motion.li variants={item} key={slug} className="py-5">
                      <article className="flex flex-col space-y-2 xl:space-y-0">
                        <dl>
                          <dt className="sr-only">{t('pub')}</dt>
                          <dd className="text-base font-medium leading-6 text-gray-500 dark:text-gray-400">
                            <time dateTime={date}>{formatDate(date, language)}</time>
                          </dd>
                        </dl>
                        <div className="space-y-3">
                          <div>
                            <div className="text-2xl font-bold leading-8 tracking-tight">
                              <Link
                                href={`/${locale}/blog/${slug}`}
                                className="text-gray-900 dark:text-gray-100"
                                aria-labelledby={title}
                              >
                                <h2>{title}</h2>
                              </Link>
                            </div>
                            <ul className="flex flex-wrap">
                              {tags.map((t) => (
                                <li key={t} className="my-3">
                                  <button
                                    onClick={() => handleTagClick(t)}
                                    className={`${
                                      useTagStore.getState().selectedTag === t
                                        ? 'text-heading-500 dark:text-heading-400'
                                        : 'text-primary-500 hover:text-primary-600 dark:text-primary-400 dark:hover:text-primary-500'
                                    } mr-3 text-sm font-medium uppercase`}
                                    aria-label={`View posts tagged ${t}`}
                                  >
                                    {`${t}`}
                                  </button>
                                </li>
                              ))}
                            </ul>
                          </div>
                          <div className="prose max-w-none text-gray-500 dark:text-gray-400">
                            {summary!.length > 149 ? `${summary!.substring(0, 149)}...` : summary}
                          </div>
                        </div>
                      </article>
                    </motion.li>
                  )
                }
              })}
            </motion.ul>
            {totalPages > 1 && (
              <Pagination
                totalPages={totalPages}
                currentPage={currentPage}
                onPageChange={onPageChange}
                params={{ locale: locale }}
              />
            )}
          </div>
        </div>
      </div>
    </>
  )
}

================
File: layouts/Pagination.tsx
================
import { useTranslation } from 'app/[locale]/i18n/client'
import { LocaleTypes } from 'app/[locale]/i18n/settings'

interface PaginationProps {
  totalPages: number
  currentPage: number
  onPageChange: (page: number) => void
  params: { locale: LocaleTypes }
}
export default function Pagination({
  totalPages,
  currentPage,
  onPageChange,
  params: { locale },
}: PaginationProps) {
  const { t } = useTranslation(locale, 'home')
  const prevPage = currentPage - 1 > 0
  const nextPage = currentPage + 1 <= totalPages

  const handlePrevPage = () => {
    if (prevPage) {
      onPageChange(currentPage - 1)
    }
  }

  const handleNextPage = () => {
    if (nextPage) {
      onPageChange(currentPage + 1)
    }
  }

  return (
    <div className="space-y-2 pb-8 pt-6 md:space-y-5">
      <nav className="flex justify-between">
        {!prevPage && (
          <button className="cursor-auto disabled:opacity-50" disabled={!prevPage}>
            {t('prevp')}
          </button>
        )}
        {prevPage && <button onClick={handlePrevPage}> {t('prevp')}</button>}
        <span>
          {currentPage} of {totalPages}
        </span>
        {!nextPage && (
          <button className="cursor-auto disabled:opacity-50" disabled={!nextPage}>
            {t('nextp')}
          </button>
        )}
        {nextPage && <button onClick={handleNextPage}>{t('nextp')}</button>}
      </nav>
    </div>
  )
}

================
File: layouts/PostBanner.tsx
================
import { ReactNode } from 'react'
import Image from '@/components/mdxcomponents/Image'
import Bleed from 'pliny/ui/Bleed'
import { CoreContent } from 'pliny/utils/contentlayer'
import type { Blog } from 'contentlayer/generated'
import Comments from '@/components/comments/Comments'
import WalineComments from '@/components/comments/walinecomponents/walineComments'
import Link from '@/components/mdxcomponents/Link'
import PageTitle from '@/components/PageTitle'
import SectionContainer from '@/components/SectionContainer'
import siteMetadata from '@/data/siteMetadata'
import ScrollTopAndComment from '@/components/scroll'
import { PostSeriesBox } from '@/components/seriescard'
import Share from '@/components/share'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { Toc } from 'pliny/mdx-plugins'
import Sidetoc from '@/components/sidetoc'

interface PostBannerProps {
  content: CoreContent<Blog>
  children: ReactNode
  next?: { slug: string; title: string }
  prev?: { slug: string; title: string }
  params: { locale: LocaleTypes }
}

export default function PostMinimal({
  content,
  next,
  prev,
  children,
  params: { locale },
}: PostBannerProps) {
  const { slug, title, images, series, toc } = content
  const tableOfContents: Toc = toc as unknown as Toc
  const displayImage =
    images && images.length > 0 ? images[0] : 'https://picsum.photos/seed/picsum/800/400'

  return (
    <>
      <ScrollTopAndComment />
      <Sidetoc toc={tableOfContents} />
      <SectionContainer>
        <article>
          <div>
            <div className="space-y-1 pb-10 text-center dark:border-gray-700">
              <div className="w-full">
                <Bleed>
                  <div className="relative aspect-[2/1] w-full">
                    <Image src={displayImage} alt={title} fill className="object-cover" />
                  </div>
                </Bleed>
              </div>
              <div className="relative pt-10">
                <PageTitle>{title}</PageTitle>
              </div>
            </div>
            {series && (
              <div className="not-prose mt-4">
                <PostSeriesBox data={series} />
              </div>
            )}
            <div className="prose max-w-none py-4 dark:prose-invert">{children}</div>
            <Share title={title} slug={slug} />
            <div className="pb-6 pt-6 text-center text-gray-700 dark:text-gray-300" id="comment">
              {siteMetadata.iswaline === true && <WalineComments />}
              {siteMetadata.comments && siteMetadata.iscomments === true && (
                <Comments slug={slug} />
              )}
            </div>
            <footer>
              <div className="flex flex-col text-sm font-medium sm:flex-row sm:justify-between sm:text-base">
                {prev && prev.slug && (
                  <div className="pt-4 xl:pt-8">
                    <Link
                      href={`/${locale}/blog/${prev.slug}`}
                      className="text-primary-500 hover:text-primary-600 dark:hover:text-primary-400"
                      aria-label={`Previous post: ${prev.title}`}
                    >
                      &larr; {prev.title}
                    </Link>
                  </div>
                )}
                {next && next.slug && (
                  <div className="pt-4 xl:pt-8">
                    <Link
                      href={`/${locale}/blog/${next.slug}`}
                      className="text-primary-500 hover:text-primary-600 dark:hover:text-primary-400"
                      aria-label={`Next post: ${next.title}`}
                    >
                      {next.title} &rarr;
                    </Link>
                  </div>
                )}
              </div>
            </footer>
          </div>
        </article>
      </SectionContainer>
    </>
  )
}

================
File: layouts/PostLayout.tsx
================
import { ReactNode } from 'react'
import { CoreContent } from 'pliny/utils/contentlayer'
import type { Blog, Authors } from 'contentlayer/generated'
import Comments from '@/components/comments/Comments'
import WalineComments from '@/components/comments/walinecomponents/walineComments'
import Link from '@/components/mdxcomponents/Link'
import PageTitle from '@/components/PageTitle'
import SectionContainer from '@/components/SectionContainer'
import Image from '@/components/mdxcomponents/Image'
import Tag from '@/components/tag'
import siteMetadata from '@/data/siteMetadata'
import ScrollTopAndComment from '@/components/scroll'
import { createTranslation } from 'app/[locale]/i18n/server'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { PostSeriesBox } from '@/components/seriescard'
import Share from '@/components/share'
import { Toc } from 'pliny/mdx-plugins'
import Sidetoc from '@/components/sidetoc'

const editUrl = (path) => `${siteMetadata.siteRepo}/blob/main/data/${path}`
const discussUrl = (path) =>
  `https://mobile.twitter.com/search?q=${encodeURIComponent(`${siteMetadata.siteUrl}/${path}`)}`

const postDateTemplate: Intl.DateTimeFormatOptions = {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric',
}

interface LayoutProps {
  content: CoreContent<Blog>
  authorDetails: CoreContent<Authors>[]
  next?: { slug: string; title: string }
  prev?: { slug: string; title: string }
  children: ReactNode
  params: { locale: LocaleTypes }
}

export default async function PostLayout({
  content,
  authorDetails,
  next,
  prev,
  children,
  params: { locale },
}: LayoutProps) {
  const { filePath, path, slug, date, title, tags, language, series, toc } = content
  const basePath = path.split('/')[0]
  const { t } = await createTranslation(locale, 'home')
  const tableOfContents: Toc = toc as unknown as Toc
  return (
    <>
      <ScrollTopAndComment />
      <Sidetoc toc={tableOfContents} />
      <article>
        <div className="xl:divide-y xl:divide-gray-200 xl:dark:divide-gray-700">
          <header className="pt-6 xl:pb-6">
            <div className="space-y-1 text-center">
              <dl className="space-y-10">
                <div>
                  <dt className="sr-only">{t('pub')}</dt>
                  <dd className="text-base font-medium leading-6 text-gray-500 dark:text-gray-400">
                    <time dateTime={date}>
                      {new Date(date).toLocaleDateString(language, postDateTemplate)}
                    </time>
                  </dd>
                </div>
              </dl>
              <div>
                <PageTitle>{title}</PageTitle>
              </div>
            </div>
          </header>
          <div className="grid-rows-[auto_1fr] divide-y divide-gray-200 pb-8 dark:divide-gray-700 xl:grid xl:grid-cols-4 xl:gap-x-6 xl:divide-y-0">
            <dl className="pb-10 pt-6 xl:border-b xl:border-gray-200 xl:pt-11 xl:dark:border-gray-700">
              <dt className="sr-only">{t('authors')}</dt>
              <dd>
                <ul className="flex flex-wrap justify-center gap-4 sm:space-x-12 xl:block xl:space-x-0 xl:space-y-8">
                  {authorDetails.map((author) => (
                    <li className="flex items-center space-x-2" key={author.name}>
                      {author.avatar && (
                        <Link href={`/${locale}/about/${author.slug}`}>
                          <Image
                            src={author.avatar}
                            width={38}
                            height={38}
                            alt="avatar"
                            title="avatar"
                            className="h-10 w-10 rounded-full"
                          />
                        </Link>
                      )}
                      <dl className="whitespace-nowrap text-sm font-medium leading-5">
                        <dt className="sr-only">{t('name')}</dt>
                        <dd className="text-gray-900 dark:text-gray-100">{author.name}</dd>
                        <dt className="sr-only">Twitter</dt>
                        <dd>
                          {author.twitter && (
                            <Link
                              href={author.twitter}
                              className="text-primary-500 hover:text-primary-600 dark:hover:text-primary-400"
                            >
                              {author.twitter.replace('https://twitter.com/', '@')}
                            </Link>
                          )}
                        </dd>
                      </dl>
                    </li>
                  ))}
                </ul>
              </dd>
            </dl>
            <div className="divide-y divide-gray-200 dark:divide-gray-700 xl:col-span-3 xl:row-span-2 xl:pb-0">
              {series && (
                <div className="not-prose mt-4">
                  <PostSeriesBox data={series} />
                </div>
              )}
              <div className="prose max-w-none pb-8 pt-10 dark:prose-invert">{children}</div>
              <Share title={title} slug={slug} />
              <div
                className="mt-10 pb-6 pt-6 text-center text-gray-700 dark:text-gray-300"
                id="comment"
              >
                {siteMetadata.iswaline === true && <WalineComments />}
                {siteMetadata.comments && siteMetadata.iscomments === true && (
                  <Comments slug={slug} />
                )}
              </div>
            </div>
            <footer>
              <div className="divide-gray-200 text-sm font-medium leading-5 dark:divide-gray-700 xl:col-start-1 xl:row-start-2 xl:divide-y">
                {tags && (
                  <div className="py-4 xl:py-8">
                    <p className="text-xs uppercase tracking-wide text-gray-500 dark:text-gray-400">
                      Tags
                    </p>
                    <div className="flex flex-wrap">
                      {tags.map((tag) => (
                        <Tag key={tag} text={tag} />
                      ))}
                    </div>
                  </div>
                )}
                {(next || prev) && (
                  <div className="flex justify-between py-4 xl:block xl:space-y-8 xl:py-8">
                    {prev && prev.slug && (
                      <div>
                        <p className="text-xs uppercase tracking-wide text-gray-500 dark:text-gray-400">
                          {t('preva')}
                        </p>
                        <div className="text-primary-500 hover:text-primary-600 dark:hover:text-primary-400">
                          <Link href={`/${locale}/blog/${prev.slug}`}>{prev.title}</Link>
                        </div>
                      </div>
                    )}
                    {next && next.slug && (
                      <div>
                        <p className="text-xs uppercase tracking-wide text-gray-500 dark:text-gray-400">
                          {t('nexta')}
                        </p>
                        <div className="text-primary-500 hover:text-primary-600 dark:hover:text-primary-400">
                          <Link href={`/${locale}/blog/${next.slug}`}>{next.title}</Link>
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
              <div className="pt-4 xl:pt-8">
                <Link
                  href={`/${locale}/${basePath}`}
                  className="text-primary-500 hover:text-primary-600 dark:hover:text-primary-400"
                  aria-label="Back to the blog"
                >
                  &larr;{t('back')}
                </Link>
              </div>
            </footer>
          </div>
        </div>
      </article>
    </>
  )
}

================
File: layouts/PostSimple.tsx
================
import { ReactNode } from 'react'
import { formatDate } from 'pliny/utils/formatDate'
import { CoreContent } from 'pliny/utils/contentlayer'
import type { Blog } from 'contentlayer/generated'
import WalineComments from '@/components/comments/walinecomponents/walineComments'
import Comments from '@/components/comments/Comments'
import Link from '@/components/mdxcomponents/Link'
import PageTitle from '@/components/PageTitle'
import SectionContainer from '@/components/SectionContainer'
import siteMetadata from '@/data/siteMetadata'
import ScrollTopAndComment from '@/components/scroll'
import { createTranslation } from 'app/[locale]/i18n/server'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { PostSeriesBox } from '@/components/seriescard'
import Share from '@/components/share'
import { Toc } from 'pliny/mdx-plugins'
import Sidetoc from '@/components/sidetoc'

interface PostSimpleProps {
  content: CoreContent<Blog>
  children: ReactNode
  next?: { slug: string; title: string }
  prev?: { slug: string; title: string }
  params: { locale: LocaleTypes }
}

export default async function PostLayout({
  content,
  next,
  prev,
  children,
  params: { locale },
}: PostSimpleProps) {
  const { slug, date, title, language, series, toc } = content
  const tableOfContents: Toc = toc as unknown as Toc
  const { t } = await createTranslation(locale, 'home')
  return (
    <>
      <ScrollTopAndComment />
      <Sidetoc toc={tableOfContents} />
      <SectionContainer>
        <article>
          <div>
            <header>
              <div className="space-y-1 border-b border-gray-200 pb-10 text-center dark:border-gray-700">
                <dl>
                  <div>
                    <dt className="sr-only">{t('pub')}</dt>
                    <dd className="text-base font-medium leading-6 text-gray-500 dark:text-gray-400">
                      <time dateTime={date}>{formatDate(date, language)}</time>
                    </dd>
                  </div>
                </dl>
                <div>
                  <PageTitle>{title}</PageTitle>
                </div>
              </div>
            </header>
            <div className="grid-rows-[auto_1fr] divide-y divide-gray-200 pb-8 dark:divide-gray-700 xl:divide-y-0">
              <div className="divide-y divide-gray-200 dark:divide-gray-700 xl:col-span-3 xl:row-span-2 xl:pb-0">
                {series && (
                  <div className="not-prose mt-4">
                    <PostSeriesBox data={series} />
                  </div>
                )}
                <div className="prose max-w-none pb-8 pt-10 dark:prose-invert">{children}</div>
              </div>
              <Share title={title} slug={slug} />
              <div className="pb-6 pt-6 text-center text-gray-700 dark:text-gray-300" id="comment">
                {siteMetadata.iswaline === true && <WalineComments />}
                {siteMetadata.comments && siteMetadata.iscomments === true && (
                  <Comments slug={slug} />
                )}
              </div>
              <footer>
                <div className="flex flex-col text-sm font-medium sm:flex-row sm:justify-between sm:text-base">
                  {prev && prev.slug && (
                    <div className="pt-4 xl:pt-8">
                      <Link
                        href={`/${locale}/blog/${prev.slug}`}
                        className="text-primary-500 hover:text-primary-600 dark:hover:text-primary-400"
                        aria-label={`Previous post: ${prev.title}`}
                      >
                        &larr; {prev.title}
                      </Link>
                    </div>
                  )}
                  {next && next.slug && (
                    <div className="pt-4 xl:pt-8">
                      <Link
                        href={`/${locale}/blog/${next.slug}`}
                        className="text-primary-500 hover:text-primary-600 dark:hover:text-primary-400"
                        aria-label={`Next post: ${next.title}`}
                      >
                        {next.title} &rarr;
                      </Link>
                    </div>
                  )}
                </div>
              </footer>
            </div>
          </div>
        </article>
      </SectionContainer>
    </>
  )
}

================
File: public/static/favicons/safari-pinned-tab.svg
================
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="107.000000pt" height="107.000000pt" viewBox="0 0 107.000000 107.000000"
 preserveAspectRatio="xMidYMid meet">
<metadata>
Created by potrace 1.11, written by Peter Selinger 2001-2013
</metadata>
<g transform="translate(0.000000,107.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
<path d="M609 942 c-17 -18 -95 -88 -289 -258 -117 -102 -177 -155 -204 -179
-6 -5 -31 -28 -56 -50 l-45 -39 -1 -144 -1 -143 21 18 c11 10 25 23 31 28 7 6
46 41 88 79 86 77 86 77 216 196 52 47 103 93 115 103 11 10 50 45 86 77 l65
59 -1 131 c0 71 -3 132 -5 135 -3 2 -12 -3 -20 -13z"/>
<path d="M929 857 c-64 -56 -145 -128 -180 -159 -35 -31 -75 -66 -89 -78 -55
-47 -68 -59 -150 -131 l-85 -76 2 -129 c1 -71 2 -135 2 -143 1 -11 5 -10 19 5
10 10 54 51 98 89 43 39 92 83 109 99 26 24 63 58 189 171 12 11 47 43 77 70
30 28 70 63 89 79 l35 29 1 138 c1 77 1 139 0 139 0 -1 -53 -47 -117 -103z"/>
</g>
</svg>

================
File: public/static/favicons/site.webmanifest
================
{
  "name": "",
  "short_name": "",
  "icons": [
    {
      "src": "/android-chrome-96x96.png",
      "sizes": "96x96",
      "type": "image/png"
    }
  ],
  "theme_color": "#000000",
  "background_color": "#000000",
  "display": "standalone"
}

================
File: scripts/postbuild.mjs
================
import rss from './rss.mjs'

async function postbuild() {
  await rss()
}

postbuild()

================
File: scripts/rss.mjs
================
import { writeFileSync, mkdirSync } from 'fs'
import path from 'path'
import { slug } from 'github-slugger'
import { escape } from 'pliny/utils/htmlEscaper.js'
import siteMetadata from '../data/siteMetadata.js'
import tagData from '../app/[locale]/tag-data.json' assert { type: 'json' }
import { allBlogs } from '../.contentlayer/generated/index.mjs'
import { sortPosts } from 'pliny/utils/contentlayer.js'

const defaultLocale = 'en'

const generateRssItem = (config, post, locale) => `
  <item>
    <guid>${config.siteUrl}${defaultLocale === locale ? '' : '/' + locale}/blog/${post.slug}</guid>
    <title>${escape(post.title)}</title>
    <link>${config.siteUrl}${defaultLocale === locale ? '' : '/' + locale}/blog/${post.slug}</link>
    ${post.summary ? `<description>${escape(post.summary)}</description>` : ''}
    ${post.date ? `<pubDate>${new Date(post.date).toUTCString()}</pubDate>` : ''}
    <author>${config.email} (${config.author})</author>
    ${post.tags ? post.tags.map((t) => `<category>${t}</category>`).join('') : ''}
  </item>
`

const generateRss = (config, posts, locale, page = 'feed.xml') => `
  <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>${escape(config.title)}</title>
      <link>${config.siteUrl}${defaultLocale === locale ? '' : '/' + locale}/blog</link>
      <description>${escape(config.description)}</description>
      <language>${locale}</language>
      <managingEditor>${config.email} (${config.author})</managingEditor>
      <webMaster>${config.email} (${config.author})</webMaster>
      ${posts.length > 0 ? `<lastBuildDate>${new Date(posts[0].date).toUTCString()}</lastBuildDate>` : ''}
      <atom:link href="${config.siteUrl}/${defaultLocale === locale ? '' : locale + '/'}${page}" rel="self" type="application/rss+xml"/>
      ${posts.map((post) => generateRssItem(config, post, locale)).join('')}
    </channel>
  </rss>
`

async function generateRSS(config, allBlogs, locale, page = 'feed.xml') {
  const filteredPosts = allBlogs.filter((post) => post.language === locale)
  const publishPosts = filteredPosts.filter((post) => post.draft !== true)

  // RSS for blog posts
  if (publishPosts.length > 0) {
    const rss = generateRss(config, sortPosts(publishPosts), locale)
    const directoryPath = path.join('public', locale)
    mkdirSync(directoryPath, { recursive: true }) // Create the directory if it doesn't exist
    writeFileSync(path.join(directoryPath, page), rss)
  }

  // RSS for tag-specific posts
  for (const tag of Object.keys(tagData)) {
    const filteredTagPosts = publishPosts.filter((post) =>
      post.tags.map((t) => slug(t)).includes(tag)
    )
    if (filteredTagPosts.length > 0) {
      const rss = generateRss(config, sortPosts(filteredTagPosts), locale, `tags/${tag}/${page}`)
      const rssPath = path.join('public', locale, 'tags', tag)
      mkdirSync(rssPath, { recursive: true }) // Create the directory if it doesn't exist
      writeFileSync(path.join(rssPath, page), rss)
    }
  }
}

const rss = async () => {
  const locales = ['en', 'zh-CN']
  for (const locale of locales) {
    await generateRSS(siteMetadata, allBlogs, locale)
  }
  console.log('RSS feeds generated...')
}

export default rss

================
File: .env.example
================
# visit https://giscus.app to get your Giscus ids
NEXT_PUBLIC_GISCUS_REPO=
NEXT_PUBLIC_GISCUS_REPOSITORY_ID=
NEXT_PUBLIC_GISCUS_CATEGORY=
NEXT_PUBLIC_GISCUS_CATEGORY_ID=
NEXT_PUBLIC_UTTERANCES_REPO=
NEXT_PUBLIC_DISQUS_SHORTNAME=

NEXT_UMAMI_ID=

MAILCHIMP_API_KEY=
MAILCHIMP_API_SERVER=
MAILCHIMP_AUDIENCE_ID=

BUTTONDOWN_API_KEY=

CONVERTKIT_API_KEY=
# curl https://api.convertkit.com/v3/forms?api_key=<your_public_api_key> to get your form ID
CONVERTKIT_FORM_ID=

KLAVIYO_API_KEY=
KLAVIYO_LIST_ID=

REVUE_API_KEY=

EMAILOCTOPUS_API_KEY=
EMAILOCTOPUS_LIST_ID=

================
File: .eslintignore
================
node_modules
.eslintrc.js

================
File: .eslintrc.js
================
module.exports = {
  root: true,
  parser: '@typescript-eslint/parser',
  env: {
    browser: true,
    amd: true,
    node: true,
    es6: true,
  },
  plugins: ['@typescript-eslint'],
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:jsx-a11y/recommended',
    'plugin:prettier/recommended',
    'next',
    'next/core-web-vitals',
  ],
  parserOptions: {
    project: true,
    tsconfigRootDir: __dirname,
    sourceType: 'module',
  },
  rules: {
    'prettier/prettier': [
      'error',
      {
        endOfLine: 'auto',
      },
    ],
    'react/react-in-jsx-scope': 'off',
    'jsx-a11y/anchor-is-valid': [
      'error',
      {
        components: ['Link'],
        specialLink: ['hrefLeft', 'hrefRight'],
        aspects: ['invalidHref', 'preferButton'],
      },
    ],
    'react/prop-types': 0,
    '@typescript-eslint/no-unused-vars': 0,
    'react/no-unescaped-entities': 0,
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    'jsx-a11y/no-noninteractive-element-to-interactive-role': 2,
    '@typescript-eslint/no-var-requires': 'off',
    '@typescript-eslint/ban-ts-comment': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    'jsx-a11y/click-events-have-key-events': 'off',
    'jsx-a11y/no-static-element-interactions': 'off',
    // 新添加的规则
    'react/jsx-no-comment-textnodes': 'off', // 禁用注释文本节点规则
  },
}

================
File: .gitattributes
================
## Source: https://github.com/alexkaratarakis/gitattributes
## Modified * text=auto to * text=auto eol=lf eol=lf to force LF endings.

## GITATTRIBUTES FOR WEB PROJECTS
#
# These settings are for any web project.
#
# Details per file setting:
#   text    These files should be normalized (i.e. convert CRLF to LF).
#   binary  These files are binary and should be left untouched.
#
# Note that binary is a macro for -text -diff.
######################################################################

# Auto detect
##   Force LF line endings automatically for files detected as
##   text and leave all files detected as binary untouched.
##   This will handle all files NOT defined below.
*                 text=auto eol=lf

# Source code
*.bash            text eol=lf
*.bat             text eol=crlf
*.cmd             text eol=crlf
*.coffee          text
*.css             text
*.htm             text diff=html
*.html            text diff=html
*.inc             text
*.ini             text
*.js              text
*.json            text
*.jsx             text
*.less            text
*.ls              text
*.map             text -diff
*.od              text
*.onlydata        text
*.php             text diff=php
*.pl              text
*.ps1             text eol=crlf
*.py              text diff=python
*.rb              text diff=ruby
*.sass            text
*.scm             text
*.scss            text diff=css
*.sh              text eol=lf
*.sql             text
*.styl            text
*.tag             text
*.ts              text
*.tsx             text
*.xml             text
*.xhtml           text diff=html

# Docker
Dockerfile        text

# Documentation
*.ipynb           text
*.markdown        text
*.md              text
*.mdwn            text
*.mdown           text
*.mkd             text
*.mkdn            text
*.mdtxt           text
*.mdtext          text
*.txt             text
AUTHORS           text
CHANGELOG         text
CHANGES           text
CONTRIBUTING      text
COPYING           text
copyright         text
*COPYRIGHT*       text
INSTALL           text
license           text
LICENSE           text
NEWS              text
readme            text
*README*          text
TODO              text

# Templates
*.dot             text
*.ejs             text
*.haml            text
*.handlebars      text
*.hbs             text
*.hbt             text
*.jade            text
*.latte           text
*.mustache        text
*.njk             text
*.phtml           text
*.tmpl            text
*.tpl             text
*.twig            text
*.vue             text

# Configs
*.cnf             text
*.conf            text
*.config          text
.editorconfig     text
.env              text
.gitattributes    text
.gitconfig        text
.htaccess         text
*.lock            text -diff
package-lock.json text -diff
*.toml            text
*.yaml            text
*.yml             text
browserslist      text
Makefile          text
makefile          text

# Heroku
Procfile          text

# Graphics
*.ai              binary
*.bmp             binary
*.eps             binary
*.gif             binary
*.gifv            binary
*.ico             binary
*.jng             binary
*.jp2             binary
*.jpg             binary
*.jpeg            binary
*.jpx             binary
*.jxr             binary
*.pdf             binary
*.png             binary
*.psb             binary
*.psd             binary
# SVG treated as an asset (binary) by default.
*.svg             text
# If you want to treat it as binary,
# use the following line instead.
# *.svg           binary
*.svgz            binary
*.tif             binary
*.tiff            binary
*.wbmp            binary
*.webp            binary

# Audio
*.kar             binary
*.m4a             binary
*.mid             binary
*.midi            binary
*.mp3             binary
*.ogg             binary
*.ra              binary

# Video
*.3gpp            binary
*.3gp             binary
*.as              binary
*.asf             binary
*.asx             binary
*.fla             binary
*.flv             binary
*.m4v             binary
*.mng             binary
*.mov             binary
*.mp4             binary
*.mpeg            binary
*.mpg             binary
*.ogv             binary
*.swc             binary
*.swf             binary
*.webm            binary

# Archives
*.7z              binary
*.gz              binary
*.jar             binary
*.rar             binary
*.tar             binary
*.zip             binary

# Fonts
*.ttf             binary
*.eot             binary
*.otf             binary
*.woff            binary
*.woff2           binary

# Executables
*.exe             binary
*.pyc             binary

# RC files (like .babelrc or .eslintrc)
*.*rc             text

# Ignore files (like .npmignore or .gitignore)
*.*ignore         text

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
/.yarn/*
!/.yarn/releases
!/.yarn/plugins
!/.yarn/sdks

# testing
/coverage

# next.js
/.next/
/out/
public/sitemap.xml
.vercel

# production
/build
*.xml

# rss feed
/public/feed.xml

# search
/public/search.json

# misc
.DS_Store

# debug
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Contentlayer
.contentlayer

================
File: .yarnrc.yml
================
compressionLevel: mixed

enableGlobalCache: false

nodeLinker: node-modules

yarnPath: .yarn/releases/yarn-4.0.2.cjs

================
File: contentlayer.config.ts
================
import {
  defineDocumentType,
  ComputedFields,
  makeSource,
  defineNestedType,
} from 'contentlayer2/source-files'
import { writeFileSync } from 'fs'
import readingTime from 'reading-time'
import { slug } from 'github-slugger'
import path from 'path'
import { fromHtmlIsomorphic } from 'hast-util-from-html-isomorphic'
// Remark packages
import remarkGfm from 'remark-gfm'
import remarkMath from 'remark-math'
import { remarkAlert } from 'remark-github-blockquote-alert'
import {
  remarkExtractFrontmatter,
  remarkCodeTitles,
  remarkImgToJsx,
  extractTocHeadings,
} from 'pliny/mdx-plugins/index.js'
// Rehype packages
import rehypeSlug from 'rehype-slug'
import rehypeAutolinkHeadings from 'rehype-autolink-headings'
import rehypeKatex from 'rehype-katex'
import rehypeCitation from 'rehype-citation'
import rehypePrismPlus from 'rehype-prism-plus'
import rehypePresetMinify from 'rehype-preset-minify'
import siteMetadata from './data/siteMetadata'
import { allCoreContent, sortPosts } from 'pliny/utils/contentlayer.js'
import { fallbackLng, secondLng } from './app/[locale]/i18n/locales'

const root = process.cwd()
const isProduction = process.env.NODE_ENV === 'production'

// heroicon mini link
const icon = fromHtmlIsomorphic(
  `
  <span class="content-header-link">
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5 linkicon">
  <path d="M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z" />
  <path d="M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z" />
  </svg>
  </span>
`,
  { fragment: true }
)

const computedFields: ComputedFields = {
  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },
  slug: {
    type: 'string',
    resolve: (doc) => {
      // Split the flattenedPath by '/' and take the last part
      const pathParts = doc._raw.flattenedPath.split('/')
      const slug = pathParts.slice(2).join('/')

      // 新增部分: 将空格和特殊字符转换为短横线
      return slug
        .replace(/\s+/g, '-')
        .toLowerCase()
        .replace(/[^\w-]+/g, '')
    },
  },
  path: {
    type: 'string',
    resolve: (doc) => doc._raw.flattenedPath,
  },
  filePath: {
    type: 'string',
    resolve: (doc) => doc._raw.sourceFilePath,
  },
  toc: { type: 'string', resolve: (doc) => extractTocHeadings(doc.body.raw) },
}

/**
 * Count the occurrences of all tags across blog posts and write to json file
 * Add logic to your own locales and project
 */

function createTagCount(allBlogs) {
  const tagCount = {
    [fallbackLng]: {},
    [secondLng]: {},
  }

  allBlogs.forEach((file) => {
    if (file.tags && (!isProduction || file.draft !== true)) {
      file.tags.forEach((tag: string) => {
        const formattedTag = slug(tag)
        if (file.language === fallbackLng) {
          // tags for default language
          tagCount[fallbackLng][formattedTag] = (tagCount[fallbackLng][formattedTag] || 0) + 1
        } else if (file.language === secondLng) {
          // tags for the second language
          tagCount[secondLng][formattedTag] = (tagCount[secondLng][formattedTag] || 0) + 1
        } else {
          // 新增部分: 处理其他语言的标签
          if (!tagCount[file.language]) {
            tagCount[file.language] = {}
          }
          tagCount[file.language][formattedTag] = (tagCount[file.language][formattedTag] || 0) + 1
        }
      })
    }
  })

  writeFileSync('./app/[locale]/tag-data.json', JSON.stringify(tagCount))
}

function createSearchIndex(allBlogs) {
  if (
    siteMetadata?.search?.provider === 'kbar' &&
    siteMetadata.search.kbarConfig.searchDocumentsPath
  ) {
    writeFileSync(
      `public/${siteMetadata.search.kbarConfig.searchDocumentsPath}`,
      JSON.stringify(allCoreContent(sortPosts(allBlogs)))
    )
    console.log('Local search index generated...')
  }
}

export const Series = defineNestedType(() => ({
  name: 'Series',
  fields: {
    title: {
      type: 'string',
      required: true,
    },
    order: {
      type: 'number',
      required: true,
    },
  },
}))

export const Blog = defineDocumentType(() => ({
  name: 'Blog',
  filePathPattern: `blog/**/*.mdx`,
  contentType: 'mdx',
  fields: {
    title: { type: 'string', required: true },
    series: { type: 'nested', of: Series },
    date: { type: 'date', required: true },
    language: { type: 'string', required: true },
    tags: { type: 'list', of: { type: 'string' }, default: [] },
    lastmod: { type: 'date' },
    featured: { type: 'boolean' },
    draft: { type: 'boolean' },
    summary: { type: 'string' },
    images: { type: 'json' },
    authors: { type: 'list', of: { type: 'string' }, required: true },
    layout: { type: 'string' },
    bibliography: { type: 'string' },
    canonicalUrl: { type: 'string' },
  },
  computedFields: {
    ...computedFields,

    structuredData: {
      type: 'json',
      resolve: (doc) => ({
        '@context': 'https://schema.org',
        '@type': 'BlogPosting',
        headline: doc.title,
        datePublished: doc.date,
        dateModified: doc.lastmod || doc.date,
        description: doc.summary,
        image: doc.images ? doc.images[0] : siteMetadata.socialBanner,
        url: `${siteMetadata.siteUrl}/${doc.language}/blog/${doc.slug}`,
      }),
    },
  },
}))

export const Authors = defineDocumentType(() => ({
  name: 'Authors',
  filePathPattern: 'authors/**/*.mdx',
  contentType: 'mdx',
  fields: {
    name: { type: 'string', required: true },
    language: { type: 'string', required: true },
    default: { type: 'boolean' },
    avatar: { type: 'string' },
    occupation: { type: 'string' },
    company: { type: 'string' },
    email: { type: 'string' },
    twitter: { type: 'string' },
    linkedin: { type: 'string' },
    github: { type: 'string' },
    layout: { type: 'string' },
  },
  computedFields,
}))

export default makeSource({
  contentDirPath: 'data',
  documentTypes: [Blog, Authors],
  mdx: {
    cwd: process.cwd(),
    remarkPlugins: [
      remarkExtractFrontmatter,
      remarkGfm,
      remarkCodeTitles,
      remarkMath,
      remarkImgToJsx,
      remarkAlert,
    ],
    rehypePlugins: [
      rehypeSlug,
      [
        rehypeAutolinkHeadings,
        {
          behavior: 'prepend',
          headingProperties: {
            className: ['content-header'],
          },
          content: icon,
        },
      ],
      rehypeKatex,
      [rehypeCitation, { path: path.join(root, 'data') }],
      [rehypePrismPlus, { defaultLanguage: 'js', ignoreMissing: true }],
      rehypePresetMinify,
    ],
  },
  onSuccess: async (importData) => {
    const { allBlogs } = await importData()
    createTagCount(allBlogs)
    createSearchIndex(allBlogs)
  },
})

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/components/*": ["components/*"],
      "@/data/*": ["data/*"],
      "@/layouts/*": ["layouts/*"],
      "@/css/*": ["css/*"],
      "contentlayer/generated": ["./.contentlayer/generated"]
    }
  }
}

================
File: LICENSE
================
MIT License

Copyright (c) 2021 Timothy Lin

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: middleware.ts
================
import { NextResponse, NextRequest } from 'next/server'
import { locales } from 'app/[locale]/i18n/settings'
import { fallbackLng } from 'app/[locale]/i18n/locales'

export function middleware(request: NextRequest) {
  // Check if there is any supported locale in the pathname
  const pathname = request.nextUrl.pathname

  // Check if the default locale is in the pathname
  if (pathname.startsWith(`/${fallbackLng}/`) || pathname === `/${fallbackLng}`) {
    // e.g. incoming request is /en/about
    // The new URL is now /about
    return NextResponse.redirect(
      new URL(
        pathname.replace(`/${fallbackLng}`, pathname === `/${fallbackLng}` ? '/' : ''),
        request.url
      )
    )
  }

  const pathnameIsMissingLocale = locales.every(
    (locale) => !pathname.startsWith(`/${locale}/`) && pathname !== `/${locale}`
  )

  if (pathnameIsMissingLocale) {
    // We are on the default locale
    // Rewrite so Next.js understands

    // e.g. incoming request is /about
    // Tell Next.js it should pretend it's /en/about
    return NextResponse.rewrite(new URL(`/${fallbackLng}${pathname}`, request.url))
  }
}

export const config = {
  // Do not run the middleware on the following paths
  // prettier-ignore
  matcher:
  '/((?!api|static|track|data|css|scripts|.*\\..*|_next).*|sitemap.xml)',
}

================
File: next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.

================
File: next.config.js
================
const { withContentlayer } = require('next-contentlayer2')

const withBundleAnalyzer = require('@next/bundle-analyzer')({
  enabled: process.env.ANALYZE === 'true',
})

// You might need to insert additional domains in script-src if you are using external services
const ContentSecurityPolicy = `
  default-src 'self';
  script-src 'self' 'unsafe-eval' 'unsafe-inline' giscus.app analytics.umami.is statichunt.com http://www.youtube.com;
  style-src 'self' 'unsafe-inline';
  img-src * blob: data: statichunt.com;
  media-src 'self' *.s3.amazonaws.com;
  connect-src * statichunt.com;
  font-src 'self';
  frame-src giscus.app https://www.youtube.com/ https://www.youtube-nocookie.com/
`;

const securityHeaders = [
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
  {
    key: 'Content-Security-Policy',
    value: ContentSecurityPolicy.replace(/\n/g, ''),
  },
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
  {
    key: 'Referrer-Policy',
    value: 'strict-origin-when-cross-origin',
  },
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
  {
    key: 'X-Content-Type-Options',
    value: 'nosniff',
  },
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control
  {
    key: 'X-DNS-Prefetch-Control',
    value: 'on',
  },
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
  {
    key: 'Strict-Transport-Security',
    value: 'max-age=31536000; includeSubDomains',
  },
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy
  {
    key: 'Permissions-Policy',
    value: 'camera=(), microphone=(), geolocation=()',
  },
];

/**
 * @type {import('next/dist/next-server/server/config').NextConfig}
 **/
module.exports = () => {
  const plugins = [withContentlayer, withBundleAnalyzer]
  return plugins.reduce((acc, next) => next(acc), {
    reactStrictMode: true,
    pageExtensions: ['ts', 'tsx', 'js', 'jsx', 'md', 'mdx'],
    eslint: {
      dirs: ['app', 'components', 'layouts', 'scripts'],
    },
    images: {
      remotePatterns: [
        {
          protocol: 'https',
          hostname: 'picsum.photos',
          pathname: '**',
        },
      ],
    },
    async headers() {
      return [
        {
          source: '/(.*)',
          headers: securityHeaders,
        },
      ]
    },
    webpack: (config, options) => {
      config.module.rules.push({
        test: /\.svg$/,
        use: ['@svgr/webpack'],
      })

      return config
    },
  })
}

================
File: package.json
================
{
  "name": "tailwind-nextjs-starter-blog-i18n",
  "version": "2.2.0",
  "private": true,
  "scripts": {
    "start": "next dev",
    "dev": "next dev",
    "build": " next build && cross-env NODE_OPTIONS='--experimental-json-modules'  node ./scripts/postbuild.mjs",
    "serve": "next start",
    "analyze": "cross-env ANALYZE=true next build",
    "lint": "next lint --fix --dir pages --dir app --dir components --dir lib --dir layouts --dir scripts",
    "format": "prettier -w ./app ./components ./layouts"
  },
  "dependencies": {
    "@emotion/is-prop-valid": "^1.3.0",
    "@formspree/react": "^2.5.1",
    "@headlessui/react": "v2.0.4",
    "@next/bundle-analyzer": "14.2.3",
    "@tailwindcss/forms": "^0.5.7",
    "@tailwindcss/typography": "^0.5.12",
    "@waline/client": "^3.1.3",
    "autoprefixer": "^10.4.17",
    "contentlayer2": "0.4.6",
    "esbuild": "0.20.2",
    "framer-motion": "^11.3.19",
    "github-slugger": "^2.0.0",
    "gray-matter": "^4.0.3",
    "hast-util-from-html-isomorphic": "^2.0.0",
    "i18next": "^23.7.18",
    "i18next-browser-languagedetector": "^7.2.0",
    "i18next-resources-to-backend": "^1.2.0",
    "image-size": "1.1.1",
    "next": "^14.2.10",
    "next-contentlayer2": "0.4.6",
    "next-themes": "^0.3.0",
    "pliny": "0.2.0",
    "postcss": "^8.4.33",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-h5-audio-player": "^3.9.1",
    "react-hot-toast": "^2.4.1",
    "react-i18next": "^14.0.1",
    "react-spring": "^9.7.3",
    "reading-time": "1.5.0",
    "rehype-autolink-headings": "^7.1.0",
    "rehype-citation": "^2.0.0",
    "rehype-katex": "^7.0.0",
    "rehype-preset-minify": "7.0.0",
    "rehype-prism-plus": "^2.0.0",
    "rehype-slug": "^6.0.0",
    "remark": "^15.0.1",
    "remark-gfm": "^4.0.0",
    "remark-github-blockquote-alert": "^1.2.1",
    "remark-math": "^6.0.0",
    "tailwindcss": "^3.4.3",
    "unist-util-visit": "^5.0.0",
    "zustand": "^4.5.0"
  },
  "devDependencies": {
    "@svgr/webpack": "^8.1.0",
    "@types/mdx": "^2.0.12",
    "@types/react": "^18.3",
    "@typescript-eslint/eslint-plugin": "^7.18.0",
    "@typescript-eslint/parser": "^7.18.0",
    "cross-env": "^7.0.3",
    "eslint": "^8.56.0",
    "eslint-config-next": "14.2.3",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "husky": "^9.0.0",
    "lint-staged": "^15.2.0",
    "prettier": "^3.2.4",
    "prettier-plugin-tailwindcss": "^0.5.11",
    "typescript": "^5.3.3"
  },
  "lint-staged": {
    "*.+(js|jsx|ts|tsx)": [
      "eslint --fix"
    ],
    "*.+(js|jsx|ts|tsx|json|css|md|mdx)": [
      "prettier --write"
    ]
  },
  "packageManager": "yarn@4.0.2"
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: prettier.config.js
================
module.exports = {
  semi: false,
  singleQuote: true,
  printWidth: 100,
  tabWidth: 2,
  useTabs: false,
  trailingComma: 'es5',
  bracketSpacing: true,
  plugins: ['prettier-plugin-tailwindcss'],
}

================
File: README.md
================
🙋‍♂️ I'm open for freelance offers.

💫If you don't need a freelancer, a small tip will still be appreciated, so I'll be able to create more repositories (or improve the existing ones) and spend some time to help the community! 

The other way to support me, is to buy me some artworks, thank you!

IMPORTANT NOTE: 

This is still a WIP (Work In Progress).

I recently changed all the complex server logic for pagination and tags, with the use of Zustand library, and moved it all to two components (pagination, and ListLayout)
While it's not optimal for SEO purposes, the goal of these changes is to find a solution for managing all the url in a better way (translated urls are very bad for SEO)
Also, I don't think that the impact of these first changes is really bad for SEO, because most users will use this repository and code for their personal dev blog.

So for now, blog page and tags logic is entirely managed on client side (also resulting in a faster UI for users). This also means less complex server side code and pages.

sitemap.xml and robots.txt are now handled perfectly. I made all the necessary changes, next step is to fix rss.

How can YOU help? You can help this project by making PR. I need help to optimize the performances on mobile

## Introduction

In this post we will discuss the i18n implementation and how it changes compared to the original V.2.
For a better understanding of the basic functionalities, you will need to consult the other posts, or the original documentation
on [timlrx](https://github.com/timlrx/tailwind-nextjs-starter-blog) github.

Using the repo? Let me know and I'll start a list if you want your own blog listed there.

If you find this project useful, please give it a ⭐ to show your support.

## Motivation

The original model is amazing, and all major credits for it go to its creator @Timlrx. I was using V.1 of the i18n version, which was rather complicated to use and which it seems that the creator has unfortunately abandoned. So this is my participation and my donation to the community!

Also, I am currently redesigning my own website, which uses the router page, and part of the code for the internationalized blog of V.1.
I wanted to migrate to the app router, but for that, I first had to learn how to internationalize a site with the router app, so I took this repository as training.

I love the idea of helping other developers to quickly start sharing their precious knowledge with the whole world, making the internet better, whether in their native language, or in English 😌

I also designed a much more complete template for artists, content creators and developers, which I m'using for my own site and which is available here :

Normal version :

- [Pablo Pikassiet Next Starter](https://github.com/PxlSyl/pablo-pikassiet-next-starter)

I18 version :

- [Pablo Pikassiet Next Starter I18n](https://github.com/PxlSyl/pablo-pikassiet-next-starter-i18n)

My own website based on this new template :

- [PxlSyl.art](https://www.pxlsyl.art/)

# Changes:

## New features

This repository will sometimes be updated with new features (not present in the original repository)
All this can sometimes seem obsessive regarding the UI and details, -maybe too neat or a little overkill- but I also use this repository as a play and learning space.

For now :
- New "WebsiteEmbed" MDX component : Embed your demo templates from github with ease, and show them on your website! (Don't forget to update your Content Security Policy in the config files of your templates)
- New "sidetoc" component :  display automatically the table of contents of your posts in a dedicated sidebar.
- Integration of email, theme, as well as a button to quickly copy the URL of the page you are on, with the kbar palette command.
The motivation for this is having explored other command palette libraries, with some offering nested elements for 'Actions'. Unfortunately this is not possible with kbar, but it gave me new ideas!
- Multi-authors feature for "about" section: each author can have it's own about page available inside a dropdown menu on large screens, or displayed directly on small screens. If you want to turn it off and only use the "normal", classical about section, go to sitemetadata.js and set multiauthors to false. In any case, your main author now needs to have the field "default" set to true.
- Featured section on home page for posts you want to pin to top : set featured to true (max two posts by default, can be modified in Featured.tsx file, in component folder) The program will pick the latest two posts with "featured : true." If no featured posts are available, this section will simply not be displayed!
- Each tag now has its own pagination! If the number of posts is greater than the one you have defined (by default, set to 5) then a new page is automatically created for subsequent posts including the same tag.
- Waline comment system now supported! It's probably the best open source comment system right now, with even i18n and many other great features! First, follow [the official tutorial](https://waline.js.org/en/guide/get-started/) to set up the comments database and your vercel server. There's many options available, so take the time to read their documentation. Since it's Vue based, it's still compatible with Next.js, and I created a new comment component. You'll find it in "walinecomponents" folder. I also added a new css file, and you can modify the style here if needed. Once you have deployed your application for comments, modify the sitemetadata.js file. Set "iscomments" property to false, set "iswaline"
to true and set the url of your comments server accordingly in "walineServer". If your language is not supported by waline, make a PR to their repository or ask them kindly to add your own translation (provide it yourself first). This is what I did for supporting french, and this how we work in open source world!

- Series for your posts is now supported, see the deployed demo!

Example of including this new feature : 

```mdx
title: Internationalization of V 2.0
series:
  order: 4 // You must add a number for the actual order of your post in your series
  title: "Blog Starter" // You must add the same title to all of your posts from the same series
date: '2023-11-17'
lastmod: '2023-11-17'
language: en
tags: ['next-js', 'tailwind', 'guide', 'features', 'i18n']
authors: ['default']
images: ['/static/images/twitter-card.png']
draft: false
summary: Presentation of the Starter Blog Tailwind Next-js v2.0, with addition and support for multiple languages.
```

- Share component : you or your users can share your blog posts on Facebook, Twitter, Linkedin, WhatsApp, Threads or Telegram with ease! What's a 2024 modern blog without this possibility?

- Smooth page transitions thanks to [Framer Motion](https://github.com/framer/motion) (see the template.tsx file in the app folder and take a look at the following next.js documentation
  for file functionality [template](https://nextjs.org/docs/app/api-reference/file-conventions/template))
  I strongly encourage you to experiment with framer-motion and its use within the new
  router. I also added some Framer Motion flavor to the formspree contact modal, and to the ListLayoutWithTags.tsx component

  Note : the template.tsx file is now removed, because there's performances issues with it. I'll try to implement animations handled in a better way. If you don't care about mobile performance and like this animation, you can stick with it, here's the code :

```ts:template.tsx
'use client'

import { motion } from 'framer-motion'

const variants = {
  hidden: { opacity: 0, x: -50, y: 0 },
  enter: { opacity: 1, x: 0, y: 0 },
}

export default function Template({ children }: { children: React.ReactNode }) {
  return (
    <motion.main
      variants={variants}
      initial="hidden"
      animate="enter"
      transition={{ type: 'linear' }}
    >
      {children}
    </motion.main>
  )
}
```

- New MDX component: excellent audio player for mdx files (in case you make podcasts, or even music), thanks to [react-h5-audio-player](https://github.com/lhz516/react-h5-audio-player)

- Tailwind screen size indicator: a little help for development mode and responsive design (see TwSizeIndicator.tsx in /components/helper)

- [Formspree](https://formspree.io/) support for the mail icon, with a beautiful modal dialog. Formspree allows your users to contact you and send you messages directly from your site, with anti-spam protection. Simply create a free basic account, read the docs and get the key from your formspree account and then replace the key with your own here, in components/formspree/index.tsx :

```ts:formspree/useContactForm.ts
/* Line 11*/
 const [state, handleSubmit, reset] = useForm('xdojkndq')
```

IMPORTANT NOTE: you must replace the key in useform like this : useform('[your key]'). The provided key is
a test one of mine. You can use it to verify if the toast box is functional for example, but you must know
that I'll receive all your test messages. (You can still send me a friendly hello message!)

If you don't want to use Formspree, go to the siteMetadata.js file and set formspree to "false".

## Libraries

For translations, the chosen library is not next-translate as in V.1 of GautierArcin, but the following libraries:

- i18next
- i18next-browser-languagedetector
- i18next-resources-to-backend
- React-i18next

Indeed, with the new version of next-js and the router app, it was easier for me to find information and tutorials to make everything work as expected. (I first tried with next-translate, but there are too many unresolved issues currently with this library and the features related to the new router)

## Configuration

Within the app folder, all content has been moved to a new folder [locale]: this is the official way recommended by next.js. An i18n folder has also been added:

```
app
  │
 [locale]
    │
    ├── i18n
    │     │
    │     ├──locales
    │     │     │
    │     │     ├── en
    │     │     │   ├── about.json
    │     │     │   │
    │     │     │   ├── home.json
    │     │     │   │
    │     │     │   └── ...
    │     │     └── fr
    │     │         ├── about.json
    │     │         │
    │     │         ├── home.json
    │     │         │
    │     │         └── ...
    │     │
    │     │
    │     ├── client.ts
    │     ├── locales.js
    │     ├── server.ts
    │     └── settings.ts
    │
    └── ...
```

It is therefore in this i18n folder that the main logic for the internationalization of the application is located.

- Json files:

The "locales" subfolder contains the .json files where you will define your translations, the convention being to define one file per page of your site, with the name of the page concerned for the name of the json file.
There is also a "common" file: if you do not specify a "namespace" or ns (the name of the file without the json extension) in your pages or components, the translations will be taken from this file by default.

\*Important: for each language there must be a corresponding file with the same name, for example an "about" file for "fr" and for "en", etc. As well as translation keys with the same name within
of each file.

Example :

In English in the "en" folder:

```json:projects.json
{
   "title": "Projects",
   "description": "Showcase your projects with a hero image (16 x 9)",
   "learn": "Learn more",
   "subtitle": "Here you will find information about my current projects",
   "linkto": "Link to"
}
```

In French in the "fr" folder:

```json:projects.json
{
  "title": "Projets",
  "description": "Présentez vos projets avec une image (16 x 9)",
  "learn": "En savoir plus",
  "subtitle": "Ici vous trouverez des informations sur mes projets actuels.",
  "linkto": "Lien vers"
}
```

- locales.js:

This is the file where you will define the languages you want to use, as well as the default language:

```js:locales.js
const fallbackLng = 'en' // default language
const secondLng = 'fr'

module.exports = { fallbackLng, secondLng }
```

You can add as many languages as you want:

```js:locales.js
/* Example of adding a 3rd language:*/
const fallbackLng = 'en'
const secondLng = 'fr'
const thirdLng = 'es'

module.exports = { fallbackLng, secondLng, thirdLng }
```

However, this will require some additional configuration steps within other files (mainly files that are discussed here)

You can also swap the default language and the second language:

```js:locales.js
/* Example of changing default language:*/
const fallbackLng = 'fr'
const secondLng = 'en'

module.exports = { fallbackLng, secondLng}
```

- settings.ts

This is a configuration file, which allows you to define a locales object as well as the corresponding options:

```ts:settings.ts
import type { InitOptions } from 'i18next'
import { fallbackLng, secondLng } from './locales'

/* Locales object, which defines all the languages that will be used in the application: */
export const locales = [fallbackLng, secondLng] as const
/* Typescript definition of type for our locales:*/
export type LocaleTypes = (typeof locales)[number]
/* “Namespace” (or ns) by default: translations will be taken from the file
common.json if no ns is specified in your components or pages: */
export const defaultNS = 'common'
/* Function that will be reused in client.ts and server.ts files: */
export function getOptions(locale = fallbackLng, ns = defaultNS): InitOptions {
   return {
     debug:true,
     supportedLngs: locales,
     fallbackLng,
     lng: locale,
     fallbackNS:defaultNS,
     defaultNS,
     ns,
   }
}
```

- client.ts and server.ts:

Without going into complex details, these two files each export
a function for translation (useTranslation on the client side, createTranslation on the server side),
reusable in your pages and components:

```ts:client.ts
export function useTranslation(lng: LocaleTypes, ns: string) {
   const translator = useTransAlias(ns)
   const { i18n } = translator

   /* Executed when content is rendered server-side: */
   if (runsOnServerSide && lng && i18n.resolvedLanguage !== lng) {
     i18n.changeLanguage(lng)
   } else {
     /* Use our custom implementation when running client-side: */
     // eslint-disable-next-line react-hooks/rules-of-hooks
     useCustomTranslationImplem(i18n, lng)
   }
   return translator
}
```

```ts:server.ts
export async function createTranslation(lang: LocaleTypes, ns: string) {
   const i18nextInstance = await initI18next(lang, ns)

   return {
     /* The "t" translation function that we will use in our components: */
     // e.g. t('greeting')
     t: i18nextInstance.getFixedT(lang, Array.isArray(ns) ? ns[0]: ns),
   }
}
```

Example of client-side component, with translation of the button's aria-label:

```ts:ThemeSwitch.tsx
'use client'

import { useEffect, useState } from 'react'
import { useTheme } from 'next-themes'
/*Import the hook provided by next.js to retrieve the language
defined by the user, and the client-side translation function: */
import { useParams } from 'next/navigation'
import { LocaleTypes } from 'app/[locale]/i18n/settings'
import { useTranslation } from 'app/[locale]/i18n/client'

const ThemeSwitch = () => {
   /* Using the hook provided by next.js to retrieve the currently defined language: */
   const locale = useParams()?.locale as LocaleTypes
   /* Using the client-side translation function:
    no namespace (ns) defined (empty square brackets), therefore the translation will be drawn
    in the common.json file */
   const { t } = useTranslation(locale, '')
   const [mounted, setMounted] = useState(false)
   const { theme, setTheme, resolvedTheme } = useTheme()

   useEffect(() => setMounted(true), [])

   if (!mounted) {
     return null
   }

   return(
     <button
     /* Translation of aria-label */
       aria-label={t('darkmode')}
       onClick={() => setTheme(theme === 'dark' || resolvedTheme === 'dark' ? 'light' : 'dark')}
     >
       <svg
         xmlns="http://www.w3.org/2000/svg"
         viewBox="0 0 20 20"
         fill="currentColor"
         className="h-6 w-6 text-gray-900 dark:text-gray-100"
       >
         {mounted && (theme === 'dark' || resolvedTheme === 'dark') ? (
           <path
             fillRule="evenodd"
             d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-. 707- .707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.7 07.707zm1.414 8.486 l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
             clipRule="evenodd"
           />
         ): (
           <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
         )}
       </svg>
     </button>
   )
}

export default ThemeSwitch
```

Example of server-side component:

```ts:footer.tsx
import Link from './Link'
import siteMetadata from '@/data/siteMetadata'
import SocialIcon from '@/components/social-icons'
/*Importing the server-side translation function: */
import { createTranslation } from 'app/[locale]/i18n/server'
import { LocaleTypes } from 'app/[locale]/i18n/settings'

Props type = {
   params: { locale: LocaleTypes }
}
/* the current language is passed as the page settings prop: */
export default async function Footer({ params: { locale } }: Props) {
/* Using the server-side translation function, with the "footer" namespace */
   const { t } = await createTranslation(locale, 'footer')
   return(
     <footer>
       <div className="mt-16 flex flex-col items-center">
         <div className="mb-3 flex space-x-4">
           <SocialIcon kind="mail" href={`mailto:${siteMetadata.email}`} size={6} />
           <SocialIcon kind="github" href={siteMetadata.github} size={6} />
           <SocialIcon kind="facebook" href={siteMetadata.facebook} size={6} />
           <SocialIcon kind="youtube" href={siteMetadata.youtube} size={6} />
           <SocialIcon kind="linkedin" href={siteMetadata.linkedin} size={6} />
           <SocialIcon kind="twitter" href={siteMetadata.twitter} size={6} />
         </div>
         <div className="mb-2 flex space-x-2 text-sm text-gray-500 dark:text-gray-400">
           <div>{siteMetadata.author}</div>
           <div>{` • `}</div>
           <div>{`© ${new Date().getFullYear()}`}</div>
           <div>{` • `}</div>
           <Link href="/">{siteMetadata.title}</Link>
         </div>
         <div className="mb-8 text-sm text-gray-500 dark:text-gray-400">
           <Link href="https://github.com/timlrx/tailwind-nextjs-starter-blog">
        {t('theme')}
           </Link>
         </div>
       </div>
     </footer>
   )
}
```

For the creation of new components or pages, you will therefore have to rely on these two
functions concerning your translations, depending on whether the component is rendered client-side or server-side.

- Middleware.ts:

Since I18n is not natively supported within the new router, it is an essential file for proper
operation of the whole. It is also essential to use the "matcher"
(here with inverted values which allow you to exclude folders and files which should not
be supported by middleware)

```ts:middleware.ts
import { NextResponse, NextRequest } from 'next/server'
import { locales } from 'app/[locale]/i18n/settings'
import { fallbackLng } from 'app/[locale]/i18n/locales'

export function middleware(request: NextRequest) {
   /* Check if a language is supported in the pathname: */
   const pathname = request.nextUrl.pathname

   /* Check if default language is in pathname: */
   if (pathname.startsWith(`/${fallbackLng}/`) || pathname === `/${fallbackLng}`) {
     /* ex: the incoming request is: /en/about
     The new path name is now: /about */
     return NextResponse.redirect(
       new URL(
         pathname.replace(`/${fallbackLng}`, pathname === `/${fallbackLng}` ? '/' : ''),
         request.url
       )
     )
   }

   const pathnameIsMissingLocale = locales.every(
     (locale) => !pathname.startsWith(`/${locale}/`) && pathname !== `/${locale}`
   )

   if (pathnameIsMissingLocale) {
     /* We are on the default language
     Rewriting so that next.js understands */

     // ex: incoming request is: /about
     // Inform Next.js that it should behave as if it were: /en/about
     return NextResponse.rewrite(new URL(`/${fallbackLng}${pathname}`, request.url))
   }
}

export const config = {
   /* Do not execute middleware on the following paths: */
   // prettier-ignore
   match:
   '/((?!api|static|data|css|scripts|.*\\..*|_next).*|sitemap.xml)',
}
```

## Posts

All posts are grouped within the “data/blog” folder.

They are organized into subfolders: "data/blog/en" for English, and "data/blog/fr" for French. 
You can name the subfolders for your languages as you want : with the current configuration in contentlayer.config.ts file, the slug for your posts is the filename of your post, without the .mdx extension. All your translated posts must have the same name as the originals ones, for handling purposes of translation.

Example : 

En: "data/blog/en/code-sample.mdx"
Fr: "data/blog/fr/code-sample.mdx"

Etc.

- Headers of your posts:

```mdx:article.mdx
---
title: article title
date: creation date
lastmod: last modified date
language: article language
tags: tags
authors: authors
pictures: pictures
draft: under construction or not
summary: summary
---
```

- contentlayer.config.ts:

Within the "contentlayer.config.ts" file there are therefore minor changes due to
internationalization:

```
export const Blog = defineDocumentType(() => ({
   name: 'Blog',
   filePathPattern: 'blog/**/*.mdx',
   contentType: 'mdx',
   fields: {
     title: { type: 'string', required: true },
     series: { type: 'nested', of: Series },
     date: { type: 'date', required: true },
     language: { type: 'string', required: true }, // New required field
     tags: { type: 'list', of: { type: 'string' }, default: [] },
     lastmod: { type: 'date' },
     featured: { type: 'boolean' },
     draft: { type: 'boolean' },
     summary: { type: 'string' },
     images: { type: 'json' },
     authors: { type: 'list', of: { type: 'string' }, required: true },
     layout: { type: 'string' },
     bibliography: { type: 'string' },
     canonicalUrl: { type: 'string' },
   },
   ...
)})
```

For the “authors” field:

```
export const Authors = defineDocumentType(() => ({
   name: 'Authors',
   filePathPattern: 'authors/**/*.mdx',
   contentType: 'mdx',
   fields: {
     name: { type: 'string', required: true },
     language: { type: 'string', required: true }, // New required field
     default: {type: 'boolean'},
     avatar: { type: 'string' },
     occupation: { type: 'string' },
     company: { type: 'string' },
     email: { type: 'string' },
     twitter: { type: 'string' },
     linkedin: { type: 'string' },
     github: { type: 'string' },
     layout: { type: 'string' },
   },
```

-Generation of tags:

Here too, it was necessary to make modifications in order to generate a .json object
with tags for each language.

```
function createTagCount(allBlogs) {
   const tagCount = {
     [fallbackLng]: {},
     [secondLng]: {},
   }

   allBlogs.forEach((file) => {
     if (file.tags && (!isProduction || file.draft !== true)) {
       file.tags.forEach((tag: string) => {
         const formattedTag = GithubSlugger.slug(tag)
         if (file.language === fallbackLng) { // tags for default language
           tagCount[fallbackLng][formattedTag] = (tagCount[fallbackLng][formattedTag] || 0) + 1
         } else if (file.language === secondLng) { // tags for the second language
           tagCount[secondLng][formattedTag] = (tagCount[secondLng][formattedTag] || 0) + 1
         }
       })
     }
   })

   writeFileSync('./app/[locale]/tag-data.json', JSON.stringify(tagCount))
}
```

Note: If you want to add other languages (3, 4 or even 5 languages), you will need to modify the logic to support
these new languages.

## Authors

Folders containing authors are organized by language, and author information can be translated.

The implementation is quite simple and straightforward: if you want to change or add a language, just change or add
folders with your corresponding translations for new languages.

## SiteMetadata file and new localeMetadata file

The siteMetadata.js file present in the "/data" folder does not require modifications related to internationalization.

On the other hand, in order to best manage the metadata, it was necessary to create a new file, for the title
and the description:

```ts:localeMetadata.ts
Metadata type = {
   [locale: string]: string
}
/* Add or modify the title here depending on the chosen languages: */
export const maintitle: Metadata = {
   en: 'Next.js i18n Starter Blog',
  fr: 'Starter Blog Next.js i18n',
}
/* Add or modify the description here depending on the chosen languages: */
export const maindescription: Metadata = {
   en: 'A blog created with Next.js, i18n and Tailwind.css',
  fr: 'Un blog crée avec tailwind, i18n et next.js',
}
```

## “Projects” tab

The logic needed for the "projects" tab resides in the following file, also present in the "/data" folder:

```ts:projectsData.ts
type Project = {
   title: string
   description: string
   imgSrc: string
   href: string
}

type ProjectsData = {
   [locale:string]:Project[]
}

const projectsData: ProjectsData = {
   en: [
     {
       title: 'A Search Engine',
       description: `What if you could look up any information in the world? Webpages, images, videos
         and more. Google has many features to help you find exactly what you're looking for
         for.`,
       imgSrc: '/static/images/google.png',
       href: 'https://www.google.com',
     },
     {
       title: 'The Time Machine',
       description: `Imagine being able to travel back in time or to the future. Simple turn the knob
         to the desired date and press “Go”. No more worrying about lost keys or
         forgotten headphones with this simple yet affordable solution.`,
       imgSrc: '/static/images/time-machine.jpg',
       href: '/blog/the-time-machine',
     },
   ],

    fr: [
    {
      title: 'Un moteur de recherche',
      description: `Et si vous pouviez rechercher n'importe quelle information dans le monde ? Pages Web, images, vidéos
        et plus. Google propose de nombreuses fonctionnalités pour vous aider à trouver exactement ce que vous cherchez.`,
      imgSrc: '/static/images/google.png',
      href: 'https://www.google.com',
    },
    {
      title: 'La Machine à remonter le temps',
      description: `Imaginez pouvoir voyager dans le temps ou vers le futur. Tournez simplement le bouton
        à la date souhaitée et appuyez sur "Go". Ne vous inquiétez plus des clés perdues ou
        écouteurs oubliés avec cette solution simple mais abordable.`,
      imgSrc: '/static/images/time-machine.jpg',
      href: '/blog/the-time-machine',
    },
  ],
}

export default projectsData
```

Again, simply modify the logic keeping the same general structure, and according to your chosen languages/and/or number of languages.

## Search bar :

The original repository allows support for kbar and algolia.

Here, the search bar relies on the kbar library, and Algolia support is not planned.
If you prefer to use Algolia, it will be up to you to implement it on your site, instead of kbar.

There's an issue when using regular translations, so I implemented a workaround for that problem. Just modify the name in each menu item, as well as the navigationSection object, based on the languages you're using.

```ts:SearchProvider.ts
  export const SearchProvider = ({ children }: SearchProviderProps) => {
  const locale = useParams()?.locale as LocaleTypes
  const { t } = useTranslation(locale, '')
  const router = useRouter()
   const authors = allAuthors
    .filter((a) => a.language === locale)
    .sort((a, b) => (a.default === b.default ? 0 : a.default ? -1 : 1)) as Authors[]

  const authorSearchItems = authors.map((author) => {
    const { name, slug } = author
    return {
      id: slug,
      name: name,
      keywords: '',
      shortcut: [],
      section: locale === fallbackLng ? 'Authors' : 'Auteurs',
      perform: () => router.push(`/${locale}/about/${slug}`),
      icon: (
        <i>
          <AboutIcon />
        </i>
      ),
    }
  })

  const showAuthorsSearch = siteMetadata.multiauthors
  const authorsActions = [
    ...(showAuthorsSearch ? authorSearchItems : []),
    ...(showAuthorsSearch
      ? []
      : [
          {
            id: 'about',
            name: locale === fallbackLng ? 'About' : 'À propos',
            keywords: '',
            shortcut: ['a'],
            section: locale === fallbackLng ? 'Navigate' : 'Naviguer',
            perform: () => router.push(`/${locale}/about`),
            icon: (
              <i>
                <AboutIcon />
              </i>
            ),
          },
        ]),
  ]
  /* issue when using regular translations, this is a workaround to show how to implement section titles */
   /*Modify the following line based on your implemented languages: */
  const navigationSection = locale === fallbackLng ? 'Navigate' : 'Naviguer'
  return (
    <KBarSearchProvider
      kbarConfig={{
        searchDocumentsPath: 'search.json',
        /* issue when using regular translations, this is a workaround to show how to implement translated menu titles */
        defaultActions: [
          {
            id: 'home',
            name: locale === fallbackLng ? 'Home' : 'Accueil',
            keywords: '',
            shortcut: ['h'],
            section: navigationSection,
            perform: () => router.push(`/${locale}`),
            icon: (
              <i>
                <HomeIcon />
              </i>
            ),
          },
          {
            id: 'blog',
            name: locale === fallbackLng ? 'Blog' : 'Blog',
            keywords: '',
            shortcut: ['b'],
            section: navigationSection,
            perform: () => router.push(`/${locale}/blog`),
            icon: (
              <i>
                <BlogIcon />
              </i>
            ),
          },
          {
            id: 'tags',
            name: locale === fallbackLng ? 'Tags' : 'Tags',
            keywords: '',
            shortcut: ['t'],
            section: navigationSection,
            perform: () => router.push(`/${locale}/tags`),
            icon: (
              <i>
                <TagsIcon />
              </i>
            ),
          },
          {
            id: 'projects',
            name: locale === fallbackLng ? 'Projects' : 'Projets',
            keywords: '',
            shortcut: ['p'],
            section: navigationSection,
            perform: () => router.push(`/${locale}/projects`),
            icon: (
              <i>
                <ProjectsIcon />
              </i>
            ),
          },
          ...authorsActions,
        ],
        onSearchDocumentsLoad(json) {
          return json
            .filter((post: CoreContent<Blog>) => post.language === locale)
            .map((post: CoreContent<Blog>) => ({
              id: post.path,
              name: post.title,
              keywords: post?.summary || '',
              section: t('content'),
              subtitle: post.tags.join(', '),
              perform: () => router.push(`/${locale}/blog/${post.slug}`),
            }))
        },
      }}
    >
      {children}
    </KBarSearchProvider>
  )
}
```

## Things to do :

- Fix rss.mjs. If you find a solution on your side, don't hesitate to open a PR!

Everything else is currently working as expected.

Here is another possible solution for i18n integration regarding SEO, and even the translated URL:

- [next-roots](https://github.com/svobik7/next-roots)

Any help for improvements and/or bug reports is welcome!

Important notes:

- I use a custom Link component for language selection: I prefer this to the HTML selection element (easier to customize).
  The small downside is that it requires more code. If you prefer, you are free to adapt and use the select element instead, but I
  I'll keep it as is for the template.

- Do not update dependencies: this will break your application since some things need to be fixed on the side of these libraries
  ​

Author: [pxlsyl](https://pxlsyl.art)

================
File: SECURITY.md
================
# Security Policy

## Supported Versions

Use this section to tell people about which versions of your project are
currently being supported with security updates.

| Version | Supported          |
| ------- | ------------------ |
| 5.1.x   | :white_check_mark: |
| 5.0.x   | :x:                |
| 4.0.x   | :white_check_mark: |
| < 4.0   | :x:                |

## Reporting a Vulnerability

Use this section to tell people how to report a vulnerability.

Tell them where to go, how often they can expect to get an update on a
reported vulnerability, what to expect if the vulnerability is accepted or
declined, etc.

================
File: tailwind.config.js
================
// @ts-check
const { fontFamily } = require('tailwindcss/defaultTheme')
const colors = require('tailwindcss/colors')

/** @type {import("tailwindcss/types").Config } */
module.exports = {
  content: [
    './node_modules/pliny/**/*.js',
    './app/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,tsx}',
    './layouts/**/*.{js,ts,tsx}',
    './data/**/*.mdx',
  ],
  darkMode: 'class',
  theme: {
    extend: {
      lineHeight: {
        11: '2.75rem',
        12: '3rem',
        13: '3.25rem',
        14: '3.5rem',
      },
      fontFamily: {
        sans: ['var(--font-space-grotesk)', ...fontFamily.sans],
      },
      colors: {
        primary: colors.pink,
        heading: colors.blue,
        gray: colors.gray,
      },
      typography: ({ theme }) => ({
        DEFAULT: {
          css: {
            a: {
              color: theme('colors.primary.500'),
              '&:hover': {
                color: `${theme('colors.primary.600')}`,
              },
              code: { color: theme('colors.primary.400') },
            },
            'h1,h2': {
              fontWeight: '700',
              letterSpacing: theme('letterSpacing.tight'),
            },
            h3: {
              fontWeight: '600',
            },
            code: {
              color: theme('colors.indigo.500'),
            },
          },
        },
        invert: {
          css: {
            a: {
              color: theme('colors.primary.500'),
              '&:hover': {
                color: `${theme('colors.primary.400')}`,
              },
              code: { color: theme('colors.primary.400') },
            },
            'h1,h2,h3,h4,h5,h6': {
              color: theme('colors.gray.100'),
            },
          },
        },
      }),
    },
  },
  plugins: [require('@tailwindcss/forms'), require('@tailwindcss/typography')],
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "incremental": true,
    "target": "ES6",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "composite": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "baseUrl": ".",
    "paths": {
      "@/components/*": ["components/*"],
      "@/data/*": ["data/*"],
      "@/layouts/*": ["layouts/*"],
      "@/css/*": ["css/*"],
      "contentlayer/generated": ["./.contentlayer/generated"]
    },
    "plugins": [
      {
        "name": "next"
      }
    ],
    "strictNullChecks": true
  },
  "include": [
    "next-env.d.ts",
    "**/*.js",
    "**/*.mjs",
    "**/*.ts",
    "**/*.tsx",
    "**/*.json",
    ".contentlayer/generated",
    ".contentlayer/generated/**/*.json",
    ".next/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}
